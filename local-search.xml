<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2023/03/15/cao-zuo-xi-tong/"/>
    <url>/2023/03/15/cao-zuo-xi-tong/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统-实验"><a href="#操作系统-实验" class="headerlink" title="操作系统 实验"></a>操作系统 实验</h1><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>创建子进程</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">pid_t pidA<span class="hljs-comment">;</span><br>while((<span class="hljs-name">pidA=fork</span>())==-1)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p><p>在父进程中，fork返回新创建子进程的进程ID；</p><ol><li>在子进程中，fork返回0；</li><li>如果出现错误，fork返回一个负值；</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">pid_t fork(<span class="hljs-keyword">void</span>)；<span class="hljs-comment">//pid_t为int类型，进行了重载</span><br><span class="hljs-function">pid_t <span class="hljs-title">getpid</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 获取当前进程的 pid 值。</span><br><span class="hljs-function">pid_t <span class="hljs-title">getppid</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//获取当前进程的父进程 pid 值。</span><br></code></pre></td></tr></table></figure><p>创建两子进程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,std::string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid1,pid2;<br>    <span class="hljs-keyword">while</span> ((pid1=fork())==<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(pid1==<span class="hljs-number">0</span>) <span class="hljs-comment">//子进程1</span><br>    &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> ((pid2=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(pid2==<span class="hljs-number">0</span>)<span class="hljs-comment">//子进程2</span><br>        &#123;<br>        <br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vfork"><a href="#vfork" class="headerlink" title="vfork"></a>vfork</h3><table><thead><tr><th>fork</th><th>vfork</th></tr></thead><tbody><tr><td>子进程拷贝父进程的地址空间，子进程是父进程的一个复</td><td>子进程共享父进程的地址空间（准确来说，在调用 exec（进程替换） 或 exit（退出进程） 之前与父进程数据是共享的）</td></tr><tr><td>父子进程的执行次序不确定</td><td>保证子进程先运行,在它调用 exec（进程替换） 或 exit（退出进程）之后父进程才可能被调度运行。</td></tr></tbody></table><p>需要搭配 exec 或者 _exit() 使用</p><p>可以用来统计一共有多少进程</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include&lt;sys/wait.h&gt;</span><br><span class="hljs-comment">#include&lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include&lt;string.h&gt;</span><br><span class="hljs-keyword">int</span> main()&#123;<br>signal(SIGCHLD,SIG_IGN);<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>; <br>pid_t pid1,pid2,pid3,pid4,pid5;<br><span class="hljs-keyword">while</span>((pid1 = vfork()) == -<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid1 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">while</span>((pid2=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid2 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Dpid is %d , Dppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Bpid is %d , Bppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((pid3=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid3 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">while</span>((pid4=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid4 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Fpid is %d , Fppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>); <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((pid5=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid5 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Epid is %d , Eppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Cpid is %d , Cppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Apid is %d , Appid is %d\n&quot;</span>,getpid(),getppid());<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;childnum is %d\n&quot;</span>,num);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="execl"><a href="#execl" class="headerlink" title="execl"></a>execl</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execl</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *arg, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>execl()用来执行参数path字符串所代表的文件路径，接下来的参数代表执行该文件的参数argv[0],argv[1]…</p><p>最后一个参数必须是空指针NULL作为结束。</p><p>返回值：成功则不返回，执行失败则返回－1，失败原因在errno中。</p><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p>进程创建管道，得到两个件描述符指向管道的两端</p><p>父进程fork出子进程，子进程也有两个文件描述符指向同管道。</p><p>父进程关闭fd[0],子进程关闭fd[1]，即子进程关闭管道读端,父进程关闭管道写端（因为管道只支持单向通信）。子进程可以往管道中写,父进程可以从管道中读,管道是由环形队列实现的,数据从写端流入从读端流出,这样就实现了进程间通信。</p><p><img src="/../%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230316200446335.png" alt="image-20230316200446335"></p><p>管道创建</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> ret=<span class="hljs-keyword">pipe</span>(fd);<br></code></pre></td></tr></table></figure><p>失败返回-1 </p><p>成功返回0</p><h3 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">waitpid</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid,<span class="hljs-keyword">int</span> *status,<span class="hljs-keyword">int</span> options)</span></span><br></code></pre></td></tr></table></figure><p>pid&gt;0时，只等待进程ID等于pid的子进程，不管其它已经有多少子进程运行结束退出了，只要指定的子进程还没有结束，waitpid就会一直等下去。<br>pid=-1时，等待任何一个子进程退出，没有任何限制，此时waitpid和wait的作用一模一样。<br>pid=0时，等待同一个进程组中的任何子进程，如果子进程已经加入了别的进程组，waitpid不会对它做任何理睬。<br>pid&lt;-1时，等待一个指定进程组中的任何子进程，这个进程组的ID等于pid的绝对值。</p><h3 id="创建进程并使用管道"><a href="#创建进程并使用管道" class="headerlink" title="创建进程并使用管道"></a>创建进程并使用管道</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXBUFFSIZE=<span class="hljs-number">1000</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-built_in">pipe</span>(fd);<br>    <span class="hljs-keyword">char</span> write_buff[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,write_buff);<br>    <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;无法使用管道\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">pid_t</span> pid1,pid2;<br>    <span class="hljs-keyword">while</span> ((pid1=fork())==<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(pid1==<span class="hljs-number">0</span>)<br>    &#123;            <br>        <span class="hljs-built_in">close</span>(fd[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(write_buff);<br>        <span class="hljs-built_in">write</span>(fd[<span class="hljs-number">1</span>],write_buff,len+<span class="hljs-number">1</span>);<br>        _exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> ((pid2=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(pid2==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">waitpid</span>(pid1,<span class="hljs-literal">NULL</span>,WNOHANG);<br>            <span class="hljs-built_in">close</span>(fd[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">char</span> read_buff[MAXBUFFSIZE];<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">read</span>(fd[<span class="hljs-number">0</span>], read_buff, MAXBUFFSIZE);<br><br>            <span class="hljs-built_in">execl</span>(<span class="hljs-string">&quot;./output/encode&quot;</span>,read_buff,<span class="hljs-literal">NULL</span>);<br>            _exit(<span class="hljs-number">0</span>);<br>        &#125;<br>        _exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ps:</p><p>这边 值得注意的是</p><p>write 函数需要 的 size_t 参数 要+1</p><p>read 函数 的 size_t 参数 直接用数组的长度即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl</title>
    <link href="/2023/03/14/wsl/"/>
    <url>/2023/03/14/wsl/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><h2 id="安装-适用于-Linux-的-Windows-子系统文档"><a href="#安装-适用于-Linux-的-Windows-子系统文档" class="headerlink" title="安装 适用于 Linux 的 Windows 子系统文档 "></a>安装 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">适用于 Linux 的 Windows 子系统文档 </a></h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">wsl <span class="hljs-comment">--install</span><br></code></pre></td></tr></table></figure><p>更新和升级包</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo apt <span class="hljs-meta">update</span> <span class="hljs-variable">&amp;&amp;</span> sudo apt upgrade<br></code></pre></td></tr></table></figure><h2 id="连接-Vs-Code"><a href="#连接-Vs-Code" class="headerlink" title="连接 Vs Code"></a>连接 Vs Code</h2><p>在扩展里面下载</p><p><img src="/../wsl/image-20230315140144999.png" alt="image-20230315140144999"></p><p>以及</p><p><img src="/../wsl/image-20230315140244520.png" alt="image-20230315140244520"></p><p>之后在ubuntu里面 使用 </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">code</span> .<br></code></pre></td></tr></table></figure><p>来打开 VC</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyTorch_手写字识别</title>
    <link href="/2023/03/05/pytorch/"/>
    <url>/2023/03/05/pytorch/</url>
    
    <content type="html"><![CDATA[<h3 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> torch torchvision torchaudio<br></code></pre></td></tr></table></figure><h3 id="下载MNiST数据集"><a href="#下载MNiST数据集" class="headerlink" title="下载MNiST数据集"></a>下载MNiST数据集</h3><p>创建 dataset.py</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-keyword">def</span> download_dataset():<br>    dataset=torchvision.datasets.MNIST(<span class="hljs-string">&quot;./data&quot;</span>,train=<span class="hljs-keyword">True</span>,download=<span class="hljs-keyword">True</span>)<br>    <span class="hljs-keyword">return</span> dataset<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    download_dataset()<br></code></pre></td></tr></table></figure><h3 id="保存训练模型测试"><a href="#保存训练模型测试" class="headerlink" title="保存训练模型测试"></a>保存训练模型测试</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">import torch<br><span class="hljs-selector-tag">from</span> model import DNN<br><br>def save_model_fun1():<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    #只保存模型参数<br>    torch.<span class="hljs-built_in">save</span>(model.<span class="hljs-built_in">state_dict</span>(),<span class="hljs-string">&quot;dnn_test1.pth&quot;</span>)<br>def <span class="hljs-built_in">save_model_fun2</span>():<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    #保存整个类模型<br>    torch.<span class="hljs-built_in">save</span>(model,<span class="hljs-string">&quot;dnn_test2.pt&quot;</span>)<br>def <span class="hljs-built_in">load_model_test1</span>(path):<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    ckpt=torch.<span class="hljs-built_in">load</span>(path)<br>def <span class="hljs-built_in">load_model_test2</span>(path):<br>    model=torch.<span class="hljs-built_in">load</span>(path)<br>    <span class="hljs-built_in">print</span>(model)<br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">save_model_fun1</span>()<br>    <span class="hljs-built_in">save_model_fun2</span>()<br>    <span class="hljs-built_in">load_model_test2</span>(<span class="hljs-string">&quot;./dnn_test2.pt&quot;</span>)<br></code></pre></td></tr></table></figure><p>建议只保存 模型参数，会更加通用</p><p>如果是只有本人用的话，那保存整个类模型也可以</p><h3 id="eval评估"><a href="#eval评估" class="headerlink" title="eval评估"></a>eval评估</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import  torch<br><span class="hljs-keyword">from</span> dataset import get_dataloader<br><span class="hljs-keyword">from</span> model import DNN<br><br>def eval_model(model,eval_dataloader,<span class="hljs-attribute">ckpt_path</span>=None):<br>    # 构造数据集<br>    # 构造模型 导入保存的模型<br>    <span class="hljs-keyword">if</span> ckpt_path:<br>        ckpt = torch.load(ckpt_path)<br>        <span class="hljs-attribute">not_load</span>=model.load_state_dict(ckpt,strict=True)<br><br>    model.eval()<br><br>    <span class="hljs-attribute">all_night_num</span>=0<br>    with torch.no_grad():<br>        <span class="hljs-keyword">for</span> images,labes <span class="hljs-keyword">in</span> eval_dataloader:<br>            <span class="hljs-attribute">images</span>=images<br>            <span class="hljs-attribute">labes</span>=labes<br>            <span class="hljs-attribute">images</span>=images.reshape((-1,1*28*28))<br>            #向前<br>            <span class="hljs-attribute">output</span>=model(images)<br>            <span class="hljs-attribute">pre</span>=output.max(1,keepdim=True)[1].reshape(labes.shape)<br>            right_num=(<span class="hljs-attribute">pre</span>==labes).sum()<br>            all_night_num+=right_num<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;pre: &quot;</span>)<br>            # <span class="hljs-builtin-name">print</span>(pre)<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;labes &quot;</span>)<br>            # <span class="hljs-builtin-name">print</span>(labes)<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;----------&quot;</span>)<br>        <span class="hljs-attribute">per</span>=all_night_num/len(eval_dataloader.dataset)<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;per is &#123;:.2f&#125;%&quot;</span>.format(per.cpu().item()<span class="hljs-number">*100</span>))<br>    return per<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-attribute">model</span>=DNN(1,28,28)<br>    eval_dataloader = get_dataloader(<span class="hljs-literal">False</span>)<br>    #模型初始化<br>    eval(model,eval_dataloader,<span class="hljs-string">&quot;dnn.path&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="保存最优模型"><a href="#保存最优模型" class="headerlink" title="保存最优模型"></a>保存最优模型</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> torch<br>from dataset <span class="hljs-built_in">import</span> get_dataloader<br>from model <span class="hljs-built_in">import</span> DNN<br><span class="hljs-built_in">import</span> eval<br><br>def train(<span class="hljs-attr">epochs=10):</span><br>    <span class="hljs-comment">#构造数据集</span><br>    <span class="hljs-attr">train_data_loader</span> = get_dataloader(True)<br>    <span class="hljs-attr">eval_dataloader</span> = get_dataloader(False)<br><br>    <span class="hljs-comment">#模型初始化</span><br>    <span class="hljs-comment">#构造模型</span><br>    <span class="hljs-attr">dnn</span> = DNN(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br><br>    <span class="hljs-comment">#构造优化器/学习率/loss</span><br>    <span class="hljs-attr">optimizer</span> = torch.optim.Adam(dnn.parameters(), <span class="hljs-attr">lr=0.001)</span><br>    <span class="hljs-attr">lr_scheduler</span> = torch.optim.lr_scheduler.StepLR(optimizer,len(train_data_loader),<span class="hljs-attr">gamma=0.8)</span><br>    <span class="hljs-attr">nll_loss</span> = torch.nn.NLLLoss()<br><br>    <span class="hljs-comment">#模型训练</span><br>    <span class="hljs-attr">per=0</span><br>    for epoch <span class="hljs-keyword">in</span> range(epochs):<br>        dnn.train()<br>        <span class="hljs-attr">step</span> = <span class="hljs-number">0</span><br>        for images,labels <span class="hljs-keyword">in</span> train_data_loader:<br>            optimizer.zero_grad()<br>            <span class="hljs-attr">images</span> = images.reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            <span class="hljs-comment"># forward 前向</span><br>            <span class="hljs-attr">output</span> = dnn(images)<br>            <span class="hljs-attr">loss</span> = nll_loss(output,labels)<br>            <span class="hljs-comment"># backward 反向</span><br>            loss.backward()<br><br><br>            <span class="hljs-comment">#参数更新</span><br>            optimizer.step()<br>            lr_scheduler.step()<br>            step += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                print(<span class="hljs-string">&quot;epcoh: &#123;&#125; / &#123;&#125; ,step &#123;&#125; / &#123;&#125;,lr: &#123;&#125;,loss&#123;&#125;&quot;</span>.format(<br>                    epoch + <span class="hljs-number">1</span>, epochs, step, len(train_data_loader),<br>                    lr_scheduler.get_last_lr(), loss))<br>        <span class="hljs-attr">per_now</span> = eval.eval_model(dnn, eval_dataloader)<br>    <span class="hljs-comment">#保存模型</span><br>        torch.save(dnn.state_dict(),<span class="hljs-string">&quot;dnn_new.path&quot;</span>)<br>        <span class="hljs-keyword">if</span>(per_now&gt;per):<br>            print(<span class="hljs-string">&quot;save best model per is &#123;:.2f&#125;%&quot;</span>.format(per_now.cpu().item()*<span class="hljs-number">100</span>))<br>            torch.save(dnn.state_dict(),<span class="hljs-string">&quot;dnn_best.path&quot;</span>)<br>            <span class="hljs-attr">per=per_now</span><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == &#x27;__main__&#x27;:<br>    train()<br></code></pre></td></tr></table></figure><h3 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">from</span> matplotlib import pyplot as plt<br><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">import</span>  torch<br><span class="hljs-attribute">import</span>  model<br><span class="hljs-attribute">from</span> dataset import get_dataloader<br><span class="hljs-attribute">def</span> image_pre_handle(image):<br>    <span class="hljs-attribute">gray_image</span>=cv<span class="hljs-number">2</span>.cvtColor(image,cv<span class="hljs-number">2</span>.COLOR_RGB<span class="hljs-number">2</span>GRAY)<br><br>    <span class="hljs-attribute">gray_image</span>=cv<span class="hljs-number">2</span>.resize(gray_image,(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>))[np.newaxis,:,:]<br><br>    <span class="hljs-comment"># image.cv2.imshow(&quot;image&quot;, gray_image)</span><br>    <span class="hljs-comment"># cv2.waitkey(0)</span><br>    <span class="hljs-comment"># cv2.destroyAllwinodows()</span><br>    <span class="hljs-attribute">norm_image</span>=gray_image/<span class="hljs-number">255</span><br>    <span class="hljs-attribute">norm_image</span>=(norm_image-<span class="hljs-number">0</span>.<span class="hljs-number">1307</span>)/<span class="hljs-number">0</span>.<span class="hljs-number">3801</span><br>    <span class="hljs-attribute">norm_tensor</span>=torch.from_numpy(norm_image).view((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>    <span class="hljs-attribute">return</span> norm_tensor.to(torch.float<span class="hljs-number">32</span>)<br><span class="hljs-attribute">def</span> infer(model,image_path):<br>    <span class="hljs-comment">#读取图片</span><br>    <span class="hljs-attribute">image</span>=cv<span class="hljs-number">2</span>.imread(image_path)<br>    <span class="hljs-comment"># cv2.imshow(&quot;1&quot;, image)</span><br>         <span class="hljs-comment"># cv2.waitkey(0)</span><br>    <span class="hljs-comment"># cv2.destroyAllwinodows()</span><br><br>    <span class="hljs-comment">#图片预处理</span><br>    <span class="hljs-attribute">input_data</span>=image_pre_handle(image)<br>    <span class="hljs-comment">#模型推理</span><br>    <span class="hljs-attribute">model</span>.eval()<br>    <span class="hljs-attribute">with</span> torch.no_grad():<br>        <span class="hljs-attribute">output</span>=model(input_data)<br>        <span class="hljs-attribute">pre</span>=output.max(<span class="hljs-number">1</span>,keepdim=True)[<span class="hljs-number">1</span>]<br>    <span class="hljs-attribute">print</span>(pre)<br>    <span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;1&quot;</span>, image)<br>    <span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">cv2</span>.destroyAllWindows()<br><br><br>    <span class="hljs-comment">#参数更新</span><br><br>    <span class="hljs-comment">#保存模型</span><br>    <span class="hljs-attribute">pass</span><br><br><span class="hljs-attribute">if</span> __name__ == &#x27;__main__&#x27;:<br>    <span class="hljs-attribute">model</span>=model.DNN(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    <span class="hljs-attribute">ckpt</span>=torch.load(<span class="hljs-string">&quot;dnn_best.path&quot;</span>)<br>    <span class="hljs-attribute">model</span>.load_state_dict(ckpt,strict=True)<br>    <span class="hljs-attribute">print</span>(model)<br>    <span class="hljs-attribute">infer</span>(model,<span class="hljs-string">&quot;data/dataset/eval/1/1_0.jpg&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="AlextNet"><a href="#AlextNet" class="headerlink" title="AlextNet"></a>AlextNet</h3><p><img src="/../pyTorch-%E6%89%8B%E5%86%99%E5%AD%97%E8%AF%86%E5%88%AB/1.png" alt="image-20230312150121641"></p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习 python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视觉</title>
    <link href="/2023/03/03/shi-jue/"/>
    <url>/2023/03/03/shi-jue/</url>
    
    <content type="html"><![CDATA[<h1 id="视觉方向实践-用sift算法特征提取并完成匹配"><a href="#视觉方向实践-用sift算法特征提取并完成匹配" class="headerlink" title="视觉方向实践-用sift算法特征提取并完成匹配"></a>视觉方向实践-用sift算法特征提取并完成匹配</h1><h2 id="简易的前端制作"><a href="#简易的前端制作" class="headerlink" title="简易的前端制作"></a>简易的前端制作</h2><h3 id="用Qt写一个简单的界面"><a href="#用Qt写一个简单的界面" class="headerlink" title="用Qt写一个简单的界面"></a>用Qt写一个简单的界面</h3><h3 id="将ui转化为py"><a href="#将ui转化为py" class="headerlink" title="将ui转化为py"></a>将ui转化为py</h3><p>先安装pyqt5</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install pyqt<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>用Qt做完ui后，将ui文件转换为py文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pyuic5</span> -o xxx.py xxx.ui<br></code></pre></td></tr></table></figure><p>获得py 文件后 ，在main 文件中写以下代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">import sys<br>import sys<br>from PyQt5.QtWidgets import *<br>from PyQt5.QtCore import QObject<br><br>from vision_ui import *<span class="hljs-comment">#引用ui界面</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = QtWidgets.QApplication(sys.argv)<br><br>    <span class="hljs-comment">#初始化一个窗口</span><br>    widgets = QtWidgets.QMainWindow()<br>    <span class="hljs-comment">#初始化写好的ui</span><br>    ui = Ui_MainWindow()<br>    <span class="hljs-comment">#将ui赋值给窗口</span><br>    ui.setupUi(widgets)<br>    widgets.show()<br>    sys.<span class="hljs-keyword">exit</span>(app.exec_())<br><br></code></pre></td></tr></table></figure><h3 id="关于槽函数"><a href="#关于槽函数" class="headerlink" title="关于槽函数"></a>关于槽函数</h3><p>和qt里面的槽函数 用法基本相同</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">self</span>.pushButton_SelectPic.clicked.connect(<span class="hljs-keyword">self</span>.ClickOn_SelectPic)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ClickOn_SelectPic</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>:<br><span class="hljs-keyword">self</span>.sift.imgname1=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getOpenFileNames(<br>          None,<span class="hljs-string">&quot;选取文件&quot;</span>,<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;All Files (*);;Image(*.jpg *.png)&quot;</span><br>      )[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>需要引用库</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br></code></pre></td></tr></table></figure><h3 id="vision-ui-py-的代码"><a href="#vision-ui-py-的代码" class="headerlink" title="vision_ui.py 的代码"></a>vision_ui.py 的代码</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Form implementation generated from reading ui file &#x27;mainwindow.ui&#x27;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Created by: PyQt5 UI code generator 5.15.9</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><br><span class="hljs-comment"># run again.  Do not edit this file unless you know what you are doing.</span><br>import cv2<br><span class="hljs-keyword">from</span> PyQt5 import QtCore, QtGui, QtWidgets<br>import sift<br><br>class Ui_MainWindow(object):<br>    def setupUi(<span class="hljs-literal">self</span>, MainWindow):<br>        MainWindow.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;MainWindow&quot;</span>)<br>        MainWindow.resize(<span class="hljs-number">1004</span>, <span class="hljs-number">660</span>)<br>        <span class="hljs-literal">self</span>.centralwidget = QtWidgets.QWidget(MainWindow)<br>        <span class="hljs-literal">self</span>.centralwidget.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;centralwidget&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">390</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_SelectPic&quot;</span>)<br>        <span class="hljs-literal">self</span>.textEdit = QtWidgets.QTextEdit(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.textEdit.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">450</span>, <span class="hljs-number">361</span>))<br>        <span class="hljs-literal">self</span>.textEdit.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;textEdit&quot;</span>)<br>        <span class="hljs-literal">self</span>.textEdit_2 = QtWidgets.QTextEdit(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.textEdit_2.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">520</span>, <span class="hljs-number">20</span>, <span class="hljs-number">450</span>, <span class="hljs-number">361</span>))<br>        <span class="hljs-literal">self</span>.textEdit_2.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;textEdit_2&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_Sift = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">420</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_Sift&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">450</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_SelectDirectory&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_matching = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">480</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_matching&quot;</span>)<br>        <span class="hljs-literal">self</span>.label_match = QtWidgets.QLabel(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">40</span>, <span class="hljs-number">550</span>, <span class="hljs-number">61</span>, <span class="hljs-number">16</span>))<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;label_match&quot;</span>)<br>        <span class="hljs-literal">self</span>.label_matchtime = QtWidgets.QLabel(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">100</span>, <span class="hljs-number">550</span>, <span class="hljs-number">81</span>, <span class="hljs-number">16</span>))<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;label_matchtime&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>CentralWidget(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.menubar = QtWidgets.QMenuBar(MainWindow)<br>        <span class="hljs-literal">self</span>.menubar.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1004</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.menubar.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;menubar&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>MenuBar(<span class="hljs-literal">self</span>.menubar)<br>        <span class="hljs-literal">self</span>.statusbar = QtWidgets.QStatusBar(MainWindow)<br>        <span class="hljs-literal">self</span>.statusbar.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;statusbar&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>StatusBar(<span class="hljs-literal">self</span>.statusbar)<br><br>        <span class="hljs-literal">self</span>.sift=sift.Sift_AI()<br><br>        <span class="hljs-literal">self</span>.retranslateUi(MainWindow)<br><br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_SelectPic)<br>        <span class="hljs-literal">self</span>.pushButton_Sift.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_Sift)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_SelectDirectory)<br>        <span class="hljs-literal">self</span>.pushButton_matching.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_Matching)<br>        QtCore.QMetaObject.connectSlotsByName(MainWindow)<br>    def ClickOn_SelectPic(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.imgname1=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getOpenFileNames(<br>            None,<span class="hljs-string">&quot;选取文件&quot;</span>,<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;All Files (*);;Image(*.jpg *.png)&quot;</span><br>        )[<span class="hljs-number">0</span>])<br>        <span class="hljs-literal">self</span>.textEdit.append(<span class="hljs-string">&quot;&lt;img src=%s&gt;&quot;</span>%(<span class="hljs-literal">self</span>.sift.imgname1))<br>    def ClickOn_Sift(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.Sift_feature_transform()<br>    def ClickOn_SelectDirectory(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.DirPath=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getExistingDirectory(<br>            None,<span class="hljs-string">&quot;选取文件夹&quot;</span>,<span class="hljs-string">&quot;./&quot;</span><br>        ))+<span class="hljs-string">&quot;/&quot;</span><br>        print(<span class="hljs-literal">self</span>.sift.DirPath)<br>    def ClickOn_Matching(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.all_pic=[]<br>        <span class="hljs-literal">self</span>.sift.get_all_pic(<span class="hljs-literal">self</span>.sift.DirPath,<span class="hljs-literal">self</span>.sift.all_pic)<br>        print(<span class="hljs-literal">self</span>.sift.all_pic)<br>        comparisonImageList=<span class="hljs-literal">self</span>.sift.sift_fun(<span class="hljs-literal">self</span>.sift.all_pic)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>            cv2.imshow(<span class="hljs-string">&quot;%d&quot;</span>%i,comparisonImageList[i][<span class="hljs-number">0</span>])<br>            <span class="hljs-literal">self</span>.textEdit_2.append(<span class="hljs-string">&quot;&lt;img src=%s&gt;&quot;</span>%comparisonImageList[i][<span class="hljs-number">2</span>])<br><br>    def retranslateUi(<span class="hljs-literal">self</span>, MainWindow):<br>        _translate = QtCore.QCoreApplication.translate<br>        MainWindow.<span class="hljs-built_in">set</span>WindowTitle(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;MainWindow&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;选择图片&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;sift提取特征&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;选择待匹配图像目录&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;匹配&quot;</span>))<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;匹配时间:&quot;</span>))<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br><br></code></pre></td></tr></table></figure><h3 id="生产exe文件"><a href="#生产exe文件" class="headerlink" title="生产exe文件"></a>生产exe文件</h3><p>在pycharm终端输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">pyinstaller -F -w <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><h2 id="sift-算法"><a href="#sift-算法" class="headerlink" title="sift 算法"></a>sift 算法</h2><h3 id="sift算法特点"><a href="#sift算法特点" class="headerlink" title="sift算法特点"></a>sift算法特点</h3><p>不变性：对旋转和尺度变化具有不变性；对三维视角变化和光照变化具有适应性；局部特征，在遮挡和场景杂乱时保持不变性；</p><p>辨别力强：特征之间相互区分的能力强，有利于匹配</p><p>数量较多：一般500*500的图像能提取约2000个特征点</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>•构建尺度空间</p><p>•构造高斯差分尺度空间</p><p>•DoG尺度空间极值点检测</p><p>•特征点精确定位</p><p>•去除不稳定点</p><p><img src="/2023/03/03/shi-jue/image-20230303162347221.png" alt="sift流程"></p><h3 id="sift-py的代码"><a href="#sift-py的代码" class="headerlink" title="sift.py的代码"></a>sift.py的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">import</span> glob<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sift_AI</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.imgname1=<span class="hljs-string">&#x27;D:/vision/PY/resources/test/A0C573/A0C573_20151103073308_3029240562.jpg&#x27;</span><br>        self.imgname2=<span class="hljs-string">&#x27;D:/vision/PY/resources/test/A0C573/A0C573_20151103074304_6595543738.jpg&#x27;</span><br>        self.sift=cv2.SIFT_create()<br>        self.time=<span class="hljs-number">0</span><br>        self.DirPath=<span class="hljs-string">&#x27;./&#x27;</span><br>        self.all_pic=[]<br>        self.des1=<span class="hljs-number">0</span><br>        self.kp1=<span class="hljs-number">0</span><br>        self.sampleImage=<span class="hljs-number">0</span><br>        self.FLANN_INDEX_KDTREE = <span class="hljs-number">0</span><br><span class="hljs-comment">#提取特征值</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Sift_feature_transform</span>(<span class="hljs-params">self</span>):</span><br>        self.sampleImage= cv2.imread(self.imgname1)<br>        gray1 = cv2.cvtColor(self.sampleImage, cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 灰度处理图像</span><br><br>        self.kp1, self.des1 = self.sift.detectAndCompute(self.sampleImage, <span class="hljs-literal">None</span>)  <span class="hljs-comment"># kp1是特征点 des是描述子</span><br><br>        img_feature = cv2.drawKeypoints(self.sampleImage, self.kp1, self.sampleImage, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>))  <span class="hljs-comment"># 画出特征点，并显示为红色圆圈</span><br>        cv2.imshow(<span class="hljs-string">&quot;point&quot;</span>,img_feature)<br>        cv2.waitKey(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMatchNum</span>(<span class="hljs-params">self,matches, ratio</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回特征点匹配数量和匹配掩码&#x27;&#x27;&#x27;</span><br>        matchesMask = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matches))]<br>        matchNum = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, (m, n) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(matches):<br>            <span class="hljs-keyword">if</span> m.distance &lt; ratio * n.distance:  <span class="hljs-comment"># 将距离比率小于ratio的匹配点删选出来</span><br>                matchesMask[i] = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>                matchNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> (matchNum, matchesMask)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_pic</span>(<span class="hljs-params">self,path,all_files=[]</span>):</span><br>        filelist1=<span class="hljs-built_in">sorted</span>(os.listdir(path))<br>        <span class="hljs-keyword">for</span> file1 <span class="hljs-keyword">in</span> filelist1:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.isdir(path+file1)):<br>                <span class="hljs-keyword">if</span>(file1.endswith((<span class="hljs-string">&#x27;.jpg&#x27;</span>,<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&quot;.png&quot;</span>))):<br>                    all_files.append(path+file1)<br>            <span class="hljs-keyword">else</span>:<br>            self.get_all_pic(path+file1+<span class="hljs-string">&quot;/&quot;</span>,all_files)<br>  <span class="hljs-comment">#用于匹配最合适的图像</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift_fun</span>(<span class="hljs-params">self,all_P=[]</span>) :</span><br>        comparisonImageList=[]<br>        indexParams = <span class="hljs-built_in">dict</span>(algorithm=self.FLANN_INDEX_KDTREE, trees=<span class="hljs-number">5</span>)<br>        searchParams = <span class="hljs-built_in">dict</span>(checks=<span class="hljs-number">50</span>)<br>        flann = cv2.FlannBasedMatcher(indexParams, searchParams)<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> all_P:<br>            img = cv2.imread(p)<br>            gray2 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 灰度处理图像</span><br>            kp2, des2 = self.sift.detectAndCompute(gray2, <span class="hljs-literal">None</span>)  <span class="hljs-comment"># des是描述子</span><br>            matches= flann.knnMatch(self.des1,des2,k=<span class="hljs-number">2</span>)<span class="hljs-comment">#匹配特征点，为了删选匹配点，指定k为2，这样对样本图的每个特征点，返回两个匹配</span><br>            (matchNum, matchesMask) = self.getMatchNum(matches, <span class="hljs-number">0.9</span>) <span class="hljs-comment">#通过比率条件，计算出匹配程度</span><br>            matchRatio = matchNum * <span class="hljs-number">100</span> / <span class="hljs-built_in">len</span>(matches)<br>            drawParams = <span class="hljs-built_in">dict</span>(matchColor=(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>),<br>                              singlePointColor=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>                              matchesMask=matchesMask,<br>                              flags=<span class="hljs-number">0</span>)<br>            comparisonImage = cv2.drawMatchesKnn(self.sampleImage, self.kp1, img, kp2, matches, <span class="hljs-literal">None</span>, **drawParams)<br>            comparisonImageList.append((comparisonImage, matchRatio,p))  <span class="hljs-comment"># 记录下结果</span><br>        comparisonImageList.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> comparisonImageList<br></code></pre></td></tr></table></figure><h2 id="Surf算法"><a href="#Surf算法" class="headerlink" title="Surf算法"></a>Surf算法</h2><h2 id="生成码本"><a href="#生成码本" class="headerlink" title="生成码本"></a>生成码本</h2>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json—C</title>
    <link href="/2023/02/26/json-c/"/>
    <url>/2023/02/26/json-c/</url>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在GitHub上找来练手的项目</p><p>在这里记录一下自己的路上遇到的难点和知识吧</p><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><h3 id="Cmake创建项目-windows"><a href="#Cmake创建项目-windows" class="headerlink" title="Cmake创建项目(windows)"></a>Cmake创建项目(windows)</h3><p><img src="/../%E8%A7%86%E8%A7%89/image-20230309142607715.png" alt="image-20230309142607715"></p><p><img src="/../%E8%A7%86%E8%A7%89/image-20230309143021107.png" alt="image-20230309143021107"></p><p>将这个设立为 启动项</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">#define EXPECT_EQ_BASE(equality, <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>, format) \<br>    <span class="hljs-keyword">do</span> &#123;\<br>        test_count++;\<br>        <span class="hljs-keyword">if</span> (equality)\<br>            test_pass++;\<br>        <span class="hljs-keyword">else</span> &#123;\<br>            fprintf(stderr, <span class="hljs-string">&quot;%s:%d: expect: &quot;</span> format <span class="hljs-string">&quot; actual: &quot;</span> format <span class="hljs-string">&quot;\n&quot;</span>, __FILE__, __LINE__, <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>);\<br>            main_ret = <span class="hljs-number">1</span>;\<br>        &#125;\<br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br>#define EXPECT_EQ_INT(<span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>) EXPECT_EQ_BASE((<span class="hljs-keyword">expect</span>) == (<span class="hljs-keyword">actual</span>), <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>, <span class="hljs-string">&quot;%d&quot;</span>)<br></code></pre></td></tr></table></figure><p>简单例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static void test<span class="hljs-constructor">_parse_null()</span> &#123;<br>    lept_value v;<br>    v.<span class="hljs-keyword">type</span> = LEPT_FALSE;<br>    <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_PARSE_OK, <span class="hljs-params">lept_parse</span>(&amp;<span class="hljs-params">v</span>, <span class="hljs-string">&quot;null&quot;</span>)</span>);<br>    <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_NULL, <span class="hljs-params">lept_get_type</span>(&amp;<span class="hljs-params">v</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><h3 id="简化单元测试"><a href="#简化单元测试" class="headerlink" title="简化单元测试"></a>简化单元测试</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#define <span class="hljs-constructor">TEST_ERROR(<span class="hljs-params">error</span>, <span class="hljs-params">json</span>)</span>\<br>    <span class="hljs-keyword">do</span> &#123;\<br>        lept_value v;\<br>        v.<span class="hljs-keyword">type</span> = LEPT_FALSE;\<br>        <span class="hljs-constructor">EXPECT_EQ_INT(<span class="hljs-params">error</span>, <span class="hljs-params">lept_parse</span>(&amp;<span class="hljs-params">v</span>, <span class="hljs-params">json</span>)</span>);\<br>        <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_NULL, <span class="hljs-params">lept_get_type</span>(&amp;<span class="hljs-params">v</span>)</span>);\<br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br>static void test<span class="hljs-constructor">_parse_expect_value()</span> &#123;<br>    <span class="hljs-constructor">TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot;&quot;</span>)</span>;<br>    <span class="hljs-constructor">TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot; &quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="number-解析"><a href="#number-解析" class="headerlink" title="number 解析"></a>number 解析</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span>   <span class="hljs-comment">/* errno, ERANGE */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span>    <span class="hljs-comment">/* HUGE_VAL */</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lept_parse_number</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>* end;<br>    <span class="hljs-comment">/* \TODO validate number */</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p = c-&gt;json;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;-&#x27;</span>)p++;<span class="hljs-comment">// -号</span><br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;0&#x27;</span>)p++;<span class="hljs-comment">//整数部分</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT1TO9</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;.&#x27;</span>)<br>    &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;e&#x27;</span> || *p == <span class="hljs-string">&#x27;E&#x27;</span>)<br>    &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;+&#x27;</span> || *p == <span class="hljs-string">&#x27;-&#x27;</span>)p++;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br><br>    &#125;<br>    errno = <span class="hljs-number">0</span>;<br>    v-&gt;n = <span class="hljs-built_in">strtod</span>(c-&gt;json, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (errno == ERANGE &amp;&amp; v-&gt;n == HUGE_VAL)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_NUMBER_TOO_BIG;<br>    c-&gt;json = p;<br>    v-&gt;type = LEPT_NUMBER;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>errno 用于判断是否有溢出 ，当溢出后 errno==ERANGE</p><table><thead><tr><th align="left">&lt;math.h&gt; 常量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">HUGE_VALF</td><td align="left">扩展为表示溢出的正浮点表达式</td></tr><tr><td align="left">HUGE_VAL</td><td align="left">扩展为表示溢出的正数双表达式，不一定表示为浮点数</td></tr><tr><td align="left">HUGE_VALL</td><td align="left">扩展为正数long double表达式，表示溢出，不一定表示为float或double</td></tr></tbody></table><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="字符串内存管理"><a href="#字符串内存管理" class="headerlink" title="字符串内存管理"></a>字符串内存管理</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>new 申请</p><p>delete 释放</p><h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><p><code>&lt;stdlib.h&gt;</code> 中的 <code>malloc()</code>、<code>realloc()</code> 和 <code>free()</code> 来分配／释放内存。</p><h4 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h4><table><thead><tr><th>new关键字是C++的一部分</th><th>malloc是由C库提供的函数</th></tr></thead><tbody><tr><td>new以具体类型为单位进行内存分配</td><td>malloc以字节为单位进行内存分配</td></tr><tr><td>new在申请单个类型变量时可进行初始化</td><td>malloc不具备内存初始化的特性</td></tr></tbody></table><h3 id="缓冲区和堆栈"><a href="#缓冲区和堆栈" class="headerlink" title="缓冲区和堆栈"></a>缓冲区和堆栈</h3><p>​    解析字符串（以及之后的数组、对象）时，需要把解析的结果先储存在一个临时的缓冲区，最后再用 <code>lept_set_string()</code> 把缓冲区的结果设进值之中。在完成解析一个字符串之前，这个缓冲区的大小是不能预知的。因此，我们可以采用动态数组（dynamic array）这种数据结构，即数组空间不足时，能自动扩展。C++ 标准库的 <code>std::vector</code> 也是一种动态数组。</p><p>​    如果每次解析字符串时，都重新建一个动态数组，那么是比较耗时的。我们可以重用这个动态数组，每次解析 JSON 时就只需要创建一个。而且我们将会发现，无论是解析字符串、数组或对象，我们也只需要以先进后出的方式访问这个动态数组。换句话说，我们需要一个动态的堆栈（stack）数据结构。</p><p>​    创建一个动态堆栈</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* json;<br>    <span class="hljs-keyword">char</span>* stack;<br>    <span class="hljs-keyword">size_t</span> size, top;<br>&#125;lept_context;<br></code></pre></td></tr></table></figure><p><code>size</code>是堆栈容量</p><p><code>top</code> 是栈顶的位置</p><p>释放的时候要把全部弹出</p><p>因为该堆栈以字节储存，可压入任意字节数量的内存 （参考 <a href="https://zhuanlan.zhihu.com/p/20029820">RapidJSON 代码剖析（一）：混合任意类型的堆栈</a>）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PUTC(c, ch)         do &#123; *(char*)lept_context_push(c, sizeof(char)) = (ch); &#125; while(0)</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LEPT_PARSE_STACK_INIT_SIZE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEPT_PARSE_STACK_INIT_SIZE 256</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>* <span class="hljs-title">lept_context_push</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">void</span>* ret;<br>    <span class="hljs-built_in">assert</span>(size &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;top + size &gt;= c-&gt;size) &#123;<br>        <span class="hljs-keyword">if</span> (c-&gt;size == <span class="hljs-number">0</span>)<br>            c-&gt;size = LEPT_PARSE_STACK_INIT_SIZE;<br>        <span class="hljs-keyword">while</span> (c-&gt;top + size &gt;= c-&gt;size)<br>            c-&gt;size += c-&gt;size &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">/* c-&gt;size * 1.5 */</span><br>        c-&gt;stack = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">realloc</span>(c-&gt;stack, c-&gt;size);<br>    &#125;<br>    ret = c-&gt;stack + c-&gt;top;<br>    c-&gt;top += size;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>* <span class="hljs-title">lept_context_pop</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(c-&gt;top &gt;= size);<br>    <span class="hljs-keyword">return</span> c-&gt;stack + (c-&gt;top -= size);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1A-Windows-下的内存泄漏检测方法"><a href="#1A-Windows-下的内存泄漏检测方法" class="headerlink" title="1A. Windows 下的内存泄漏检测方法"></a>1A. Windows 下的内存泄漏检测方法</h4><p>在 Windows 下，可使用 Visual C++ 的 <a href="https://msdn.microsoft.com/zh-cn/library/x98tx3cf.aspx">C Runtime Library（CRT） 检测内存泄漏</a>。</p><p>首先，我们在两个 .c 文件首行插入这一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WINDOWS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRTDBG_MAP_ALLOC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;crtdbg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>并在 <code>main()</code> 开始位置插入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WINDOWS</span><br>    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在 Debug 配置下按 F5 生成、开始调试程序，没有任何异样。</p><p>然后，我们删去 <code>lept_set_boolean()</code> 中的 <code>lept_free(v)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lept_set_boolean</span><span class="hljs-params">(lept_value* v, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">/* lept_free(v); */</span><br>    v-&gt;type = b ? LEPT_TRUE : LEPT_FALSE;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次按 F5 生成、开始调试程序，在输出会看到内存泄漏信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Detected</span> memory leaks!<br><span class="hljs-attribute">Dumping</span> objects -&gt;<br><span class="hljs-attribute">C</span>:\GitHub\json-tutorial\tutorial<span class="hljs-number">03</span>_answer\leptjson.c(<span class="hljs-number">212</span>) : &#123;<span class="hljs-number">79</span>&#125; normal block at <span class="hljs-number">0</span>x<span class="hljs-number">013</span>D<span class="hljs-number">9868</span>, <span class="hljs-number">2</span> bytes long.<br> <span class="hljs-attribute">Data</span>: &lt;a &gt; <span class="hljs-number">61</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">Object</span> dump complete.<br></code></pre></td></tr></table></figure><p>这正是我们在单元测试中，先设置字符串，然后设布尔值时没释放字符串所分配的内存。比较麻烦的是，它没有显示调用堆栈。从输出信息中 <code>... &#123;79&#125; ...</code> 我们知道是第 79 次分配的内存做成问题，我们可以加上 <code>_CrtSetBreakAlloc(79);</code> 来调试，那么它便会在第 79 次时中断于分配调用的位置，那时候就能从调用堆栈去找出来龙去脉。</p><h4 id="1B-Linux-OSX-下的内存泄漏检测方法"><a href="#1B-Linux-OSX-下的内存泄漏检测方法" class="headerlink" title="1B. Linux/OSX 下的内存泄漏检测方法"></a>1B. Linux/OSX 下的内存泄漏检测方法</h4><p>在 Linux、OS X 下，我们可以使用 <a href="https://valgrind.org/">valgrind</a> 工具（用 <code>apt-get install valgrind</code>、 <code>brew install valgrind</code>）。我们完全不用修改代码，只要在命令行执行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$ valgrind --leak-check=full  ./leptjson_test<br>==<span class="hljs-number">22078</span>== Memcheck, a memory error detector<br>==<span class="hljs-number">22078</span>== Copyright (C) <span class="hljs-number">2002</span>-<span class="hljs-number">2015</span>, and GNU GPL&#x27;d, by Julian Seward et al.<br>==<span class="hljs-number">2207</span>8== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info<br>==<span class="hljs-number">2207</span>8== Command: ./leptjson_test<br>==<span class="hljs-number">2207</span>8== <br>--<span class="hljs-number">2207</span>8-- run: /usr/bin/dsymutil &quot;./leptjson_test&quot;<br>160/160 (100.00%) passed<br>==<span class="hljs-number">2207</span>8== <br>==<span class="hljs-number">2207</span>8== HEAP SUMMARY:<br>==<span class="hljs-number">2207</span>8==     in use at exit: 27,728 bytes in 209 blocks<br>==<span class="hljs-number">2207</span>8==   total heap usage: 301 allocs, 92 frees, 34,966 bytes allocated<br>==<span class="hljs-number">2207</span>8== <br>==<span class="hljs-number">2207</span>8== 2 bytes in 1 blocks are definitely lost in loss record 1 of 79<br>==<span class="hljs-number">2207</span>8==    at 0x<span class="hljs-number">100012</span>EBB: malloc (in /usr/local/Cellar/valgrind/3.11.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">100008</span>F36: lept_set_string (leptjson.c:208)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">10000841</span>5: test_access_boolean (test.c:187)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">10000184</span>9: test_parse (test.c:229)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">100001</span>7A3: main (test.c:235)<br>==<span class="hljs-number">2207</span>8== <br>...<br></code></pre></td></tr></table></figure><p>它发现了在 <code>test_access_boolean()</code> 中，由 <code>lept_set_string()</code> 分配的 2 个字节（<code>&quot;a&quot;</code>）泄漏了。</p><p>Valgrind 还有很多功能，例如可以发现未初始化变量。我们若在应用程序或测试程序中，忘了调用 <code>lept_init(&amp;v)</code>，那么 <code>v.type</code> 的值没被初始化，其值是不确定的（indeterministic），一些函数如果读取那个值就会出现问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_access_boolean</span><span class="hljs-params">()</span> </span>&#123;<br>    lept_value v;<br>    <span class="hljs-comment">/* lept_init(&amp;v); */</span><br>    lept_set_string(&amp;v, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这种错误有时候测试时能正确运行（刚好 <code>v.type</code> 被设为 <code>0</code>），使我们误以为程序正确，而在发布后一些机器上却可能崩溃。这种误以为正确的假像是很危险的，我们可利用 valgrind 能自动测出来：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ valgrind <span class="hljs-attribute">--leak-check</span>=full  ./leptjson_test<br><span class="hljs-built_in">..</span>.<br>==<span class="hljs-attribute">22174</span>== Conditional jump <span class="hljs-keyword">or</span> move depends on uninitialised value(s)<br>==<span class="hljs-attribute">22174</span>==    at 0x100008B5D: lept_free (leptjson.c:164)<br>==<span class="hljs-attribute">22174</span>==    by 0x100008F26: lept_set_string (leptjson.c:207)<br>==<span class="hljs-attribute">22174</span>==    by 0x1000083FE: test_access_boolean (test.c:187)<br>==<span class="hljs-attribute">22174</span>==    by 0x100001839: test_parse (test.c:229)<br>==<span class="hljs-attribute">22174</span>==    by 0x100001793: main (test.c:235)<br>==<span class="hljs-attribute">22174</span>== <br></code></pre></td></tr></table></figure><p>它发现 <code>lept_free()</code> 中依靠了一个未初始化的值来跳转，就是 <code>v.type</code>，而错误是沿自 <code>test_access_boolean()</code>。</p><p>编写单元测试时，应考虑哪些执行次序会有机会出错，例如内存相关的错误。然后我们可以利用 TDD 的步骤，先令测试失败（以内存工具检测），修正代码，再确认测试是否成功。</p><h3 id="解析字符串"><a href="#解析字符串" class="headerlink" title="解析字符串"></a>解析字符串</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> lept_parse_string(lept_context* c, lept_value* v) &#123;<br>    size_t head = c-&gt;top, len;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p;<br>    EXPECT(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>);<br>    p = c-&gt;json;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">char</span> ch = *p++;<br>        <span class="hljs-keyword">switch</span> (ch) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>:<br>            <span class="hljs-keyword">switch</span> (*p++) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>: PUTC(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>: PUTC(c, <span class="hljs-string">&#x27;\\&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;/&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\b&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\f&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\n&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\r&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\t&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                c-&gt;top = head;<br>                <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_STRING_ESCAPE;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>:<br>            len = c-&gt;top - head;<br>            lept_set_string(v, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*)lept_context_pop(c, len), len);<br>            c-&gt;json = p;<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>            c-&gt;top = head;<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_MISS_QUOTATION_MARK;<br>        <span class="hljs-keyword">default</span>: <br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)ch &lt; <span class="hljs-number">0x20</span>) <br>            &#123;<br>                c-&gt;top = head;<br>                <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_STRING_CHAR;<br>            &#125;<br>            PUTC(c, ch);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><h3 id="uft-8编码"><a href="#uft-8编码" class="headerlink" title="uft-8编码"></a>uft-8编码</h3><p>UTF-8 的编码单元为 8 位（1 字节），每个码点编码成 1 至 4 个字节。它的编码方式很简单，按照码点的范围，把码点的二进位分拆成 1 至最多 4 个字节：</p><table><thead><tr><th align="center">码点范围</th><th align="center">码点位数</th><th align="center">字节1</th><th align="center">字节2</th><th align="center">字节3</th><th align="center">字节4</th></tr></thead><tbody><tr><td align="center">U+0000 ~ U+007F</td><td align="center">7</td><td align="center">0xxxxxxx</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">U+0080 ~ U+07FF</td><td align="center">11</td><td align="center">110xxxxx</td><td align="center">10xxxxxx</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">U+0800 ~ U+FFFF</td><td align="center">16</td><td align="center">1110xxxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td><td align="center"></td></tr><tr><td align="center">U+10000 ~ U+10FFFF</td><td align="center">21</td><td align="center">11110xxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td></tr></tbody></table><p>这个编码方法的好处之一是，码点范围 U+0000 ~ U+007F 编码为一个字节，与 ASCII 编码兼容。这范围的 Unicode 码点也是和 ASCII 字符相同的。因此，一个 ASCII 文本也是一个 UTF-8 文本。</p><p>我们举一个例子解析多字节的情况，欧元符号 <code>€</code> → U+20AC：</p><ol><li>U+20AC 在 U+0800 ~ U+FFFF 的范围内，应编码成 3 个字节。</li><li>U+20AC 的二进位为 10000010101100</li><li>3 个字节的情况我们要 16 位的码点，所以在前面补两个 0，成为 0010000010101100</li><li>按上表把二进位分成 3 组：0010, 000010, 101100</li><li>加上每个字节的前缀：11100010, 10000010, 10101100</li><li>用十六进位表示即：0xE2, 0x82, 0xAC</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static const <span class="hljs-built_in">char</span>* lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">p</span>, <span class="hljs-params">unsigned</span><span class="hljs-operator">*</span> <span class="hljs-params">u</span>)</span> &#123;<span class="hljs-comment">//用于转换</span><br>    <span class="hljs-comment">/* \TODO */</span><br>    *u = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">char</span> ch = *p++;<br>        *u &lt;&lt;= <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-character">&#x27;0&#x27;</span><span class="hljs-operator"> &amp;&amp; </span>ch &lt;= <span class="hljs-character">&#x27;9&#x27;</span>)  *u <span class="hljs-pattern-match">|= ch - &#x27;0&#x27;;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;<span class="hljs-constructor">A</span>&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;<span class="hljs-constructor">F</span>&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;<span class="hljs-constructor">A</span>&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;a&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;f&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;a&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> return <span class="hljs-constructor">NULL</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return p;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">static void lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">u</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> \<span class="hljs-constructor">TODO</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">F</span>)</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, <span class="hljs-params">u</span> &amp; 0xFF)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">FF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xC0 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x<span class="hljs-constructor">FFFF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xE0 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">assert</span>(u &lt;= 0x10<span class="hljs-constructor">FFFF</span>);</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xF0 | ((<span class="hljs-params">u</span> &gt;&gt; 18)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br></code></pre></td></tr></table></figure><h3 id="代理对"><a href="#代理对" class="headerlink" title="代理对"></a>代理对</h3><p>其实，U+0000 至 U+FFFF 这组 Unicode 字符称为基本多文种平面（basic multilingual plane, BMP），还有另外 16 个平面。那么 BMP 以外的字符，JSON 会使用代理对（surrogate pair）表示 <code>\uXXXX\uYYYY</code>。在 BMP 中，保留了 2048 个代理码点。如果第一个码点是 U+D800 至 U+DBFF，我们便知道它的代码对的高代理项（high surrogate），之后应该伴随一个 U+DC00 至 U+DFFF 的低代理项（low surrogate）。然后，我们用下列公式把代理对 (H, L) 变换成真实的码点：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">codepoint</span> = <span class="hljs-number">0</span>x<span class="hljs-number">10000</span> + (H − <span class="hljs-number">0</span>xD<span class="hljs-number">800</span>) × <span class="hljs-number">0</span>x<span class="hljs-number">400</span> + (L − <span class="hljs-number">0</span>xDC<span class="hljs-number">00</span>)<br></code></pre></td></tr></table></figure><p>举个例子，高音谱号字符 <code>𝄞</code> → U+1D11E 不是 BMP 之内的字符。在 JSON 中可写成转义序列 <code>\uD834\uDD1E</code>，我们解析第一个 <code>\uD834</code> 得到码点 U+D834，我们发现它是 U+D800 至 U+DBFF 内的码点，所以它是高代理项。然后我们解析下一个转义序列 <code>\uDD1E</code> 得到码点 U+DD1E，它在 U+DC00 至 U+DFFF 之内，是合法的低代理项。我们计算其码点：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">H = <span class="hljs-number">0xD834</span>, L = <span class="hljs-number">0xDD1E</span><br>codepoint = <span class="hljs-number">0x10000</span> + (H − <span class="hljs-number">0xD800</span>) × <span class="hljs-number">0x400</span> + (L − <span class="hljs-number">0xDC00</span>)<br>          = <span class="hljs-number">0x10000</span> + (<span class="hljs-number">0xD834</span> - <span class="hljs-number">0xD800</span>) × <span class="hljs-number">0x400</span> + (<span class="hljs-number">0xDD1E</span> − <span class="hljs-number">0xDC00</span>)<br>          = <span class="hljs-number">0x10000</span> + <span class="hljs-number">0x34</span> × <span class="hljs-number">0x400</span> + <span class="hljs-number">0x11E</span><br>          = <span class="hljs-number">0x10000</span> + <span class="hljs-number">0xD000</span> + <span class="hljs-number">0x11E</span><br>          = <span class="hljs-number">0x1D11E</span><br></code></pre></td></tr></table></figure><p>这样就得出这转义序列的码点，然后我们再把它编码成 UTF-8。如果只有高代理项而欠缺低代理项，或是低代理项不在合法码点范围，我们都返回 <code>LEPT_PARSE_INVALID_UNICODE_SURROGATE</code> 错误。如果 <code>\u</code> 后不是 4 位十六进位数字，则返回 <code>LEPT_PARSE_INVALID_UNICODE_HEX</code> 错误。</p><h3 id="对于utf-8解析"><a href="#对于utf-8解析" class="headerlink" title="对于utf-8解析"></a>对于utf-8解析</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static const <span class="hljs-built_in">char</span>* lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">p</span>, <span class="hljs-params">unsigned</span><span class="hljs-operator">*</span> <span class="hljs-params">u</span>)</span> &#123;<br>    <span class="hljs-comment">/* \TODO */</span><br>    *u = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">char</span> ch = *p++;<br>        *u &lt;&lt;= <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-character">&#x27;0&#x27;</span><span class="hljs-operator"> &amp;&amp; </span>ch &lt;= <span class="hljs-character">&#x27;9&#x27;</span>)  *u <span class="hljs-pattern-match">|= ch - &#x27;0&#x27;;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;<span class="hljs-constructor">A</span>&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;<span class="hljs-constructor">F</span>&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;<span class="hljs-constructor">A</span>&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;a&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;f&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;a&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> return <span class="hljs-constructor">NULL</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return p;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">static void lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">u</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> \<span class="hljs-constructor">TODO</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">F</span>)</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, <span class="hljs-params">u</span> &amp; 0xFF)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">FF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xC0 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x<span class="hljs-constructor">FFFF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xE0 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">assert</span>(u &lt;= 0x10<span class="hljs-constructor">FFFF</span>);</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xF0 | ((<span class="hljs-params">u</span> &gt;&gt; 18)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">case <span class="hljs-character">&#x27;u&#x27;</span>:<br>                      <span class="hljs-keyword">if</span> (!(p = lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">p</span>, &amp;<span class="hljs-params">u</span>)</span>))<br>                          <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_HEX)</span>;<br>                      <span class="hljs-comment">/* \TODO surrogate handling */</span><br>                      <span class="hljs-keyword">if</span> (u &gt;= <span class="hljs-number">0xD800</span><span class="hljs-operator"> &amp;&amp; </span>u &lt;= <span class="hljs-number">0xDC00</span>)<br>                      &#123;<br>                          <span class="hljs-keyword">if</span>(*p++!=<span class="hljs-character">&#x27;\\&#x27;</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          <span class="hljs-keyword">if</span>(*p++!=<span class="hljs-character">&#x27;u&#x27;</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          unsigned u2=<span class="hljs-number">0</span>;<br>                          <span class="hljs-keyword">if</span>(!(p=lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">p</span>,&amp;<span class="hljs-params">u2</span>)</span>))<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          <span class="hljs-keyword">if</span>(u2 &lt; <span class="hljs-number">0xDC00</span><span class="hljs-operator"> || </span>u2 &gt; <span class="hljs-number">0xDFFF</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          u = (((u - <span class="hljs-number">0xD800</span>) &lt;&lt; <span class="hljs-number">10</span>) <span class="hljs-pattern-match">| (u2 - 0x<span class="hljs-constructor">DC00</span>)) + 0x10000;</span><br><span class="hljs-pattern-match">                      &#125;</span><br><span class="hljs-pattern-match">                      lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">c</span>, <span class="hljs-params">u</span>)</span>;</span><br><span class="hljs-pattern-match">                      break;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用手册</title>
    <link href="/2023/02/25/hexo-shi-yong-shou-ce/"/>
    <url>/2023/02/25/hexo-shi-yong-shou-ce/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博弈论</title>
    <link href="/2023/02/25/bo-yi-lun/"/>
    <url>/2023/02/25/bo-yi-lun/</url>
    
    <content type="html"><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><h2 id="sg函数-Sprague-Garundy"><a href="#sg函数-Sprague-Garundy" class="headerlink" title="sg函数(Sprague-Garundy)"></a>sg函数(Sprague-Garundy)</h2><h3 id="如何求"><a href="#如何求" class="headerlink" title="如何求"></a>如何求</h3><p>要弄明白sg函数首先要明白什么是 必败态 N-position(g(x)一般是 mex{})</p><p>对于一个g(x)=0的顶点x，它的所有后继y都满足g(y)!=0。 N</p><p>对于一个g(x)!=0的顶点，必定存在一个后继y满足g(y)=0。 P</p><p>比如定义一个游戏</p><p>有一堆石头个数 为n 两人轮流可以 1~3个</p><p>直到不能取的人失败</p><p>当n==0时必败 或者说n%4==0时都是必败的</p><p><img src="/2023/02/25/bo-yi-lun/sg%E5%87%BD%E6%95%B0.jpg" alt="sg函数"></p><p>有向无环图上面定义一个sg函数的</p><p>从小到大标记 sg函数</p><p>x  0  1  2  3  4  5  6  7  8  9  10  11<br>g(x)  0  1  2  3  0  1  2  3  0  1  2  3 ]</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//打表</span><br><span class="hljs-keyword">int</span> f[N],sg[N],hash[N];     <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSG</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bitset&lt;N&gt;vis;<br>   vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>      vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;f[j]&lt;=i;j++)<br>            vis[sg[i-f[j]]]=<span class="hljs-number">1</span>;<span class="hljs-comment">//f[i]为实现方法</span><br>       <span class="hljs-keyword">while</span>(vis[sg[i]])   <span class="hljs-comment">//求mes&#123;&#125;中未出现的最小的非负整数</span><br>       sg[i]++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//dfs</span><br><span class="hljs-keyword">int</span> s[<span class="hljs-number">110</span>],sg[<span class="hljs-number">10010</span>],n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SG_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sg[x]!=<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> sg[x];<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x&gt;=s[i])<br>        &#123;<br>            <span class="hljs-built_in">SG_dfs</span>(x-s[i]);<br>            vis[sg[x-s[i]]]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            e=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> sg[x]=e;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="SG定理"><a href="#SG定理" class="headerlink" title="SG定理"></a>SG定理</h2><h3 id="nim"><a href="#nim" class="headerlink" title="nim"></a>nim</h3><p>经典nim博弈嗷</p><p>如果有n个游戏的话</p><p>总游戏 的sg值 为 </p><p><img src="/../%E5%8D%9A%E5%BC%88%E8%AE%BA.assets/image-20220219123412894.png" alt="image-20220219123412894"></p><p>大概就是这样子啦</p><h3 id="阶梯nim博弈"><a href="#阶梯nim博弈" class="headerlink" title="阶梯nim博弈"></a>阶梯nim博弈</h3><p><img src="D:\c语言\题目\杂题\图片\image-20220219192045720.png" alt="image-20220219192045720"></p><p><strong>对奇数阶的石头进行 Nim，偶数阶的石头对结果不影响。</strong></p><p>为什么是奇数阶？</p><p><strong>因为最后石子都要到 0 上，从 1 到 0 就是最后一步，这是从奇数阶到偶数阶，</strong></p><p><strong>所以认为从奇数阶上移到偶数阶上相当于取一次石子才能保证状态一致。</strong></p><h2 id="寒冬信使2"><a href="#寒冬信使2" class="headerlink" title=" 寒冬信使2"></a><a href="https://ac.nowcoder.com/acm/contest/23481/H"> 寒冬信使2</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有长度为n 的只含 b 和w 的字符串(&lt;=10)</p><p>现有 两个操作</p><p><img src="D:\c语言\题目\杂题\图片\image-20220219143115738.png" alt="image-20220219143115738"></p><p>不能操作的人先输掉</p><p>问是否有必胜策略</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将 w 看成1 b看出0</p><p>然后打表 sg函数 (1~1&lt;&lt;10)应该很小</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;long long,long long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int128 __int128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>), eps = <span class="hljs-number">1e-8</span>, EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf32 = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1000000007</span>, inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">50</span>, maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>+<span class="hljs-number">1</span>);<br>    bitset&lt;105&gt;vis;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>); i++)<br>    &#123;<br>        vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>                    vis[sg[i ^ (<span class="hljs-number">1</span> &lt;&lt; j)]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; j; k++)<br>                        vis[sg[i ^ (<span class="hljs-number">1</span> &lt;&lt; j) ^ (<span class="hljs-number">1</span> &lt;&lt; k)]] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (vis[sg[i]])<br>        &#123;<br>            sg[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> t; cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        cin &gt;&gt; n;<br>        string str;<br>        cin &gt;&gt; str;<br>        <span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;w&#x27;</span>)<br>            &#123;<br>                st|= (<span class="hljs-number">1</span> &lt;&lt; i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sg[st])<br>            cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//int t; cin &gt;&gt; t; while (t--)</span><br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高手过招"><a href="#高手过招" class="headerlink" title="高手过招"></a>高手过招</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有个 20*n  的棋盘</p><p>每行 有mi个棋子</p><p>可以进行以下操作</p><p>对于一个棋子，能将它向右移动一格，如果右边有棋子，则向右跳到第一个空格，如果右边没有空格，则不能移动这个棋子，如果所有棋子都不能移动，那么将输掉这场比赛。</p><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>用st打表 1&lt;&lt;20 大概 1e7左右 </p><h3 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a>AC代码1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;long long,long long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int128 __int128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>), eps = <span class="hljs-number">1e-8</span>, EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf32 = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1000000007</span>, inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">50</span>, maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>);<br>bitset&lt;105&gt;vis;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>        vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>, nxt = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>        &#123;<br>            temp = <span class="hljs-number">1</span> &lt;&lt; i;<br>            <span class="hljs-keyword">if</span> (x &amp; temp)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((x | (temp &gt;&gt; <span class="hljs-number">1</span>)) != x)<br>                    vis[sg[x ^ temp ^ (temp &gt;&gt; <span class="hljs-number">1</span>)]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nxt!=<span class="hljs-number">-1</span>)<br>                    vis[sg[x ^ temp ^ (<span class="hljs-number">1</span> &lt;&lt; (nxt))]] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                nxt = i;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (vis[sg[x]])<br>        &#123;<br>            sg[x]++;<br>        &#125;<br>   <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n ;<br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; m;<br>        st = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x;<br>            cin &gt;&gt; x;<br>            st|=(<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">20</span> - x));<br>        &#125;<br>        ans ^= sg[st];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans)<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>);i++)<br>        <span class="hljs-built_in">fun</span>(i);<br>    <span class="hljs-keyword">int</span> t; cin &gt;&gt; t; <span class="hljs-keyword">while</span> (t--)<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>变形 的阶梯nim 博弈( )</p><p>将相互连接的棋子看作一个阶梯的</p><p>在 第21个格子加上一个棋子</p><p>进行 阶梯nim 博弈</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开机自连宽带</title>
    <link href="/2023/02/25/kai-ji-zi-lian-kuan-dai/"/>
    <url>/2023/02/25/kai-ji-zi-lian-kuan-dai/</url>
    
    <content type="html"><![CDATA[<h1 id="开机自动连接宽带以及启动随e行"><a href="#开机自动连接宽带以及启动随e行" class="headerlink" title="开机自动连接宽带以及启动随e行"></a>开机自动连接宽带以及启动随e行</h1><h3 id="连接宽带"><a href="#连接宽带" class="headerlink" title="连接宽带"></a>连接宽带</h3><p>可以在cmd中使用可以连接宽带</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rasdial <span class="hljs-selector-attr">[宽带名称]</span> <span class="hljs-selector-attr">[用户名]</span> <span class="hljs-selector-attr">[密码]</span><br></code></pre></td></tr></table></figure><h3 id="获取随e行的句柄"><a href="#获取随e行的句柄" class="headerlink" title="获取随e行的句柄"></a>获取随e行的句柄</h3><p>使用Spy++获取软件的句柄</p><p><img src="/../../pic/spyxx.png" alt="spy++"></p><p><img src="/../../pic/spyxx2.png" alt="spy++2"></p><p>之后用</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">hwnd</span>=win32gui.FindWindow(None, FrameTitle)<br></code></pre></td></tr></table></figure><p>参数1 是类</p><p>参数2 是标题</p><p>这边只用标题找就行（随e行的类会变）</p><h3 id="任务计划程序"><a href="#任务计划程序" class="headerlink" title="任务计划程序"></a>任务计划程序</h3><p><img src="/../../pic/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E8%AE%A1%E5%88%92.png" alt="image-20230214175153874"></p><p>编写一个bat程序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@echo off<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%1&quot;</span> == <span class="hljs-string">&quot;h&quot;</span> <span class="hljs-keyword">goto</span> begin<br>mshta vbscript:<span class="hljs-built_in">createobject</span>(<span class="hljs-string">&quot;wscript.shell&quot;</span>).<span class="hljs-built_in">run</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;%~0&quot;</span><span class="hljs-string">&quot; h&quot;</span>,<span class="hljs-number">0</span>)(window.close)&amp;&amp;exit<br>:begin<br>python <span class="hljs-string">&quot;D:\py_test\automatic.py&quot;</span><br></code></pre></td></tr></table></figure><p>让其开机启动 注意要使用最高权限运行</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br><span class="hljs-keyword">import</span> ctypes, sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#宽带名称 宽带账号 密码</span><br>g_adsl_account=&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;ZJGSU&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;2012190228&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    <br>app_path=<span class="hljs-string">r&quot;C:\Program Files (x86)\cmclient\bin\CMClient.exe&quot;</span> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adsl</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span> <br>    <span class="hljs-comment"># 初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">object</span></span>):</span><br>        self.name=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;name&quot;</span>]<br>        self.username=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;username&quot;</span>]<br>        self.password=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-comment"># 修改基本信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_adsl</span>(<span class="hljs-params">self, account</span>):</span><br>        self.name=account[<span class="hljs-string">&quot;name&quot;</span>]<br>        self.username=account[<span class="hljs-string">&quot;username&quot;</span>]<br>        self.password=account[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-comment"># 连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect</span>(<span class="hljs-params">self</span>):</span><br>        cmd_str=<span class="hljs-string">&quot;rasdial %s %s %s&quot;</span>%(self.name,self.username,self.password)<br>        os.system(cmd_str)<br>    <span class="hljs-comment">#</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disconnect</span>(<span class="hljs-params">self</span>):</span><br>        cmd_str=<span class="hljs-string">&quot;rasdial %s /disconnect&quot;</span>%self.name<br>        os.system(cmd_str)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reconnect</span>(<span class="hljs-params">self</span>):</span><br>        self.disconnect()<br>        self.connect()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_app</span>(<span class="hljs-params">app_dir</span>):</span><br>  os.startfile(app_dir)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_admin</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> ctypes.windll.shell32.IsUserAnAdmin()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    auto=Adsl(g_adsl_account)<br>    auto.connect()<br>    <span class="hljs-comment">#判断是否是管理员权限</span><br>    <span class="hljs-keyword">if</span> is_admin():<br>        open_app(app_dir=app_path)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> sys.version_info[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span>:<br>            ctypes.windll.shell32.ShellExecuteW(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;runas&quot;</span>, sys.executable, __file__, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># in python2.x</span><br>            ctypes.windll.shell32.ShellExecuteW(<span class="hljs-literal">None</span>, <span class="hljs-string">u&quot;runas&quot;</span>, unicode(sys.executable), unicode(__file__), <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#移动鼠标的位置</span><br>    pyautogui.moveTo(<span class="hljs-number">1120</span>, <span class="hljs-number">508</span>)<br>    pyautogui.click(clicks=<span class="hljs-number">1</span>)<br>    FrameTitle=<span class="hljs-string">&quot;随e行&quot;</span><br>    hwnd=win32gui.FindWindow(<span class="hljs-literal">None</span>, FrameTitle)<br>    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>莫队算法（离线查询）</title>
    <link href="/2022/02/20/mo-dui-suan-fa-chi-xian-cha-xun/"/>
    <url>/2022/02/20/mo-dui-suan-fa-chi-xian-cha-xun/</url>
    
    <content type="html"><![CDATA[<h1 id="莫队算法-离线查询"><a href="#莫队算法-离线查询" class="headerlink" title="莫队算法(离线查询)"></a>莫队算法(离线查询)</h1><h2 id="SP3267-DQUERY-D-query"><a href="#SP3267-DQUERY-D-query" class="headerlink" title="SP3267 DQUERY - D-query"></a>SP3267 DQUERY - D-query</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 n个数 m次查询</p><p>每次查询给出 范围 l 和 r</p><p>求 l ~r之间有多少不同的数</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>(其实线段树,树状数组都可以)莫队算法</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span>+<span class="hljs-number">50</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">query</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">query</span>() &#123;&#125;<br><span class="hljs-built_in">query</span>(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> id) :<span class="hljs-built_in">l</span>(l), <span class="hljs-built_in">r</span>(r), <span class="hljs-built_in">id</span>(id) &#123;&#125;<br><span class="hljs-keyword">int</span> l, r, id;<br><br>&#125;q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) res = (res &lt;&lt; <span class="hljs-number">1</span>) + (res &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> res;<br>&#125;<span class="hljs-comment">//快读</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>) <span class="hljs-built_in">printi</span>(x / <span class="hljs-number">10</span>);<br><span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn], cnt[N], ans[maxn], belong[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(query a, query b)</span><span class="hljs-comment">//分块排序</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (belong[a.l] ^ belong[b.l])<br>&#123;<br><span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (belong[a.l] &amp; <span class="hljs-number">1</span>) <span class="hljs-comment">//如果左端点在奇数块则按照右端点升序 反之相反</span><br>&#123;<br><span class="hljs-keyword">return</span> a.r &lt; b.r;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a.r &gt; b.r;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>cnt[x]++;<br><span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>cnt[x]--;<br><span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><span class="hljs-comment">//分区</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> size = <span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-keyword">int</span> bnum = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(n) / size);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i++)<span class="hljs-comment">//</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = (i - <span class="hljs-number">1</span>) * size + <span class="hljs-number">1</span>; j &lt;= i * size; j++)<br>&#123;<br>belong[j] = i;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, m;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">init</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cin &gt;&gt; a[i];<br>cin &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">int</span> l, r;<br>cin &gt;&gt; l &gt;&gt; r;<br>q[i] = <span class="hljs-built_in">query</span>(l, r, i);<br>&#125;<br><span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + <span class="hljs-number">1</span> + m, cmp);<br><span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> now = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">int</span> ql = q[i].l, qr = q[i].r;<br><span class="hljs-keyword">while</span> (l &lt; ql) now += <span class="hljs-built_in">del</span>(a[l++]);<br><span class="hljs-keyword">while</span> (l &gt; ql) now += <span class="hljs-built_in">add</span>(a[--l]);<br><span class="hljs-keyword">while</span> (r &lt; qr) now += <span class="hljs-built_in">add</span>(a[++r]);<br><span class="hljs-keyword">while</span> (r &gt; qr) now += <span class="hljs-built_in">del</span>(a[r--]);<br>ans[q[i].id] = now;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>cout &lt;&lt; ans[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//int t; cin &gt;&gt; t; while (t--)</span><br><span class="hljs-built_in">solve</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
