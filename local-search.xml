<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>assembly</title>
    <link href="/2023/06/01/assembly/"/>
    <url>/2023/06/01/assembly/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><p><img src="/2023/06/01/assembly/image-20230601150157904.png" alt="image-20230601150157904"></p>]]></content>
    
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>408</title>
    <link href="/2023/05/14/408/"/>
    <url>/2023/05/14/408/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1>]]></content>
    
    
    
    <tags>
      
      <tag>考研 408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统大作业</title>
    <link href="/2023/05/09/cao-zuo-xi-tong-da-zuo-ye/"/>
    <url>/2023/05/09/cao-zuo-xi-tong-da-zuo-ye/</url>
    
    <content type="html"><![CDATA[<h1 id="同步加密"><a href="#同步加密" class="headerlink" title="同步加密"></a>同步加密</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>某加密系统中由K个数据发生器、一个长度为L的缓冲器、M个数字接收器、一个字母接收器、一个密钥生成器和一个字符加密器组成。数据发生器负责随机产生一个数字或者一个字母写入缓冲器，当缓冲器满的时候，数据发生器暂停发送数据。当缓冲器中没有数字时，数字接收器阻塞，缓冲区没有字符时，字符接收器阻塞。</p><p>数字接收器按顺序轮流从缓冲器中接收一个数字，当所有的数字接收器都接收到一个数字且密钥生成器为空闲时，启动密钥生成器进行密钥计算（ 假设算法是将所有数字接收器中的数字求和），同时数字接收器开始重新从缓冲器中接收数字，此时密钥生成器一直阻塞直到该密钥被加密器取走。如果密钥生成器阻塞，数字接收器全部接收到数据后也会阻塞，直到密钥生成器变成空闲。</p><p>字母接收器每次缓冲器中接收一个字母，若密钥生成器中有密钥，则加密器取走密钥对字母接收器中的字母进行加密（加密算法为E(密钥,字母)），此时密钥生成器变为空闲状态。若没有密钥，则字母接收器阻塞直到密钥生成器生成密钥。</p><p>​    <strong>要求：</strong>请编写一个程序能够使发生器线程，数字接收器线程，字母接收器线程，密钥生成器线程和加密器线程按照上面的逻辑正确地执行。要求程序随机产生一些字符，能够通过输出观察到并发执行的过程。并输出每次产生的密钥和加密结果。</p><h3 id="验收要点"><a href="#验收要点" class="headerlink" title="验收要点"></a><strong>验收要点</strong></h3><p>1）实验结果必须能够验证有密钥但没有字符的情形</p><p>2） 实验结果必须能够验证有字符但没有的情形</p><p>3）必须用信号量的方法实现上述线程之间的同步和互斥</p><p>4）程序运行必须能够正常结束，不能出现死锁或其他异常情况，</p><p>5）在极端情况下的死锁可能性需要考虑，如全是数字或者字母的情形，请自己设计方案解决。</p><p>6）K、L、M在不为1时程序也能够正确运行</p><p>7）加密算法E(密钥，字母）可以简化处理，建议对ASCII码和密钥进行一个简单运算即可。</p><p><strong>编程提示：</strong>参考吃水果问题的模型，但是略有不同。使用Pthread线程库中的方法，使用Linux下进程同步和互斥方法，建议程序中针对验收要点自行设计一些必要的输出信息，便于观察实验结果。</p><p><strong>实验报告撰写要求（格式要求详见大作业模板）：</strong></p><p>1）实验原理应有你用到的各种函数介绍，可以查网络资料。</p><p>2）设计方案中应该系统框架图或者解决该问题的PV模型。</p><p>3）实验报告中必须要有对能够验证验收要点各部分的运行结果要截图，通过分析验证程序设计的正确性。</p><p>4）调试过程中的逻辑错误或者你从未碰到过的语法错误要注意截图保存，查阅</p><p>资料，分析错误原因并给出解决方法，代码前后对比要截图。</p><h3 id="同步关系-问题1"><a href="#同步关系-问题1" class="headerlink" title="同步关系(问题1)"></a>同步关系(问题1)</h3><h3 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h3><p>缓冲区中只有字符或者数字</p><p>信号量没有初始化导致一直阻塞</p><p>sem_post 和sem_wait 因为疏忽写错</p><p>在一次密钥生成过程中数字接收器多次接收</p><p><img src="/wrong.png" alt="image-20230510134606351"></p><p>原因：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">if</span>(DigReceiver[<span class="hljs-number">0</span>]==-<span class="hljs-number">1</span>)<span class="hljs-comment">//如果第一个数字接收器没有数字的话，使它接收</span><br>   &#123;<br>       <span class="hljs-selector-tag">sem_post</span>(&amp;DigReceiverMutex[<span class="hljs-number">0</span>]);<br>       <span class="hljs-selector-tag">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cnt2++);<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>代码编写有问题，应该在此修改<code>DigReceiver[0]</code>的值的时候</p><p>数字生成器0生成过多</p><p><img src="/C:/Users/admin/AppData/Roaming/Typora/typora-user-images/image-20230510191200781.png" alt="image-20230510191200781"></p>]]></content>
    
    
    
    <tags>
      
      <tag>期末大作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 高并发服务器开发</title>
    <link href="/2023/04/11/linux/"/>
    <url>/2023/04/11/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-高并发服务器开发"><a href="#Linux-高并发服务器开发" class="headerlink" title="Linux 高并发服务器开发"></a>Linux 高并发服务器开发</h1><h2 id="Linux-系统编程入门"><a href="#Linux-系统编程入门" class="headerlink" title="Linux 系统编程入门"></a>Linux 系统编程入门</h2><h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><p><img src="/2023/04/11/linux/Gcc.png" alt="image-20230411142304527"></p><p><img src="/2023/04/11/linux/gcc2.png" alt="image-20230411142953910"></p><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><p>库文件用于保存代码</p><p>1.不能单独运行</p><p>2.代码保密性好，方便部署与分发</p><p>静态库是指在编译时将库的代码和数据编译成可执行程序中的一个单独的可执行模块。这意味着静态库的代码在编译时被复制到可执行程序中，因此它们不需要在运行时加载。静态库的好处是可以获得更快的执行速度，因为代码和数据已经在可执行程序中，而不需要在运行时进行加载和链接。但是静态库的缺点是它会使得可执行程序的大小变得更大，并且在多个可执行程序之间共享代码会变得更加困难。</p><p>动态库是在运行时加载的库，它们不像静态库那样被编译到可执行程序中。当可执行程序运行时，它会通过动态链接器加载动态库并将其链接到可执行程序中。这使得动态库可以被多个可执行程序共享，从而节省磁盘空间和内存。另外，动态库可以被更新和替换而不需要重新编译可执行程序，因此它们更加灵活。但是，动态库的缺点是在加载和链接时需要一定的时间，因此可能会导致一定的性能损失。</p><p>命名规则：</p><p><strong>Linux ：</strong>   <strong>libxxx.a</strong></p><p><strong>Windows：</strong> <strong>libxxx.lib</strong></p><h5 id="静态库制作"><a href="#静态库制作" class="headerlink" title="静态库制作"></a>静态库制作</h5><p>1.用Gcc 获得.o文件</p><p>2.将.o文件打包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ar rcs libxxx<span class="hljs-selector-class">.a</span> xxx<span class="hljs-selector-class">.o</span><br>r-将文件存入备存文件<br>c-建立备存文件<br>s-索引<br></code></pre></td></tr></table></figure><p>其中 <code>xxx</code>为库名</p><h5 id="静态库使用"><a href="#静态库使用" class="headerlink" title="静态库使用"></a>静态库使用</h5><p><img src="/2023/04/11/linux/tree.png" alt="image-20230411154022370"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gcc main.c -o app -I .<span class="hljs-regexp">/include/</span> -L .<span class="hljs-regexp">/lib/</span> -l suanshu<br></code></pre></td></tr></table></figure><p><code>-I</code> 指定include包含文件的搜索目录</p><p><code>-L</code>指定编译时候，搜索的库目录</p><p><code>-l</code>指定使用的库名</p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>动态库文件命名规则：</p><p><strong>Linux ：</strong>   <strong>libxxx.so</strong></p><p><strong>Windows：</strong> <strong>libxxx.dll</strong></p><h5 id="动态库制作"><a href="#动态库制作" class="headerlink" title="动态库制作"></a>动态库制作</h5><p>1.gcc 得到.o 文件 得到和位置无关的代码    <code>gcc -c  -fpic/-fPIC a.c b.c</code>    </p><p>2.gcc 得到动态库 <code>gcc shared a.o b.o -o libxxx.so</code></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><img src="/2023/04/11/linux/%E5%8A%A8%E6%80%81%E5%BA%93tree.png" alt="image-20230411162220648"></p><p><code>gcc main.c -o app -I ./include/ -L ./lib/ -l calc</code></p><p>类似于静态库</p><p>由于动态库的代码不会被打包到可执行程序中</p><p>所以在运行用到了动态库的程序之前要将 动态库加载到内存中</p><p>用<code>ldd</code>来检查可执行程序的动态库链接情况</p><p><img src="/2023/04/11/linux/%E5%8A%A8%E6%80%81%E5%BA%93%E5%8A%A0%E8%BD%BD%E5%8F%AF%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81.png"></p><p>写完动态库之后需要改变环境变量 或者 /etc/ld.so.cache 文件 来使程序能使用动态库</p><h5 id="LD-LIBRARY-PATH"><a href="#LD-LIBRARY-PATH" class="headerlink" title="LD_LIBRARY_PATH"></a><strong>LD_LIBRARY_PATH</strong></h5><p><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库的绝对路径</code></p><p>ps:这种方法并不用会把动态库放到/usr/bin/中，重新打开一个终端的话，需要重新将库路径添加到环境变量 LD_LIBRARY_PATH 中,是临时的</p><h6 id="修改-bashrc"><a href="#修改-bashrc" class="headerlink" title="修改 .bashrc"></a>修改 .bashrc</h6><p>在home 目录下 用vim 打开 .bashrc 在最后插入<code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库的绝对路径</code></p><p>修改完之后 <code>. .bashrc</code>更新环境</p><p>此方法是用户级别的</p><h6 id="修改-etc-profile"><a href="#修改-etc-profile" class="headerlink" title="修改 /etc/profile"></a>修改 /etc/profile</h6><p><code>sudo vim  /etc/profile</code></p><p>同样在最下面 插入<code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库的绝对路径</code></p><p>之后 <code>source /etc/profile   </code>更新即可</p><h5 id="etc-ld-so-cache"><a href="#etc-ld-so-cache" class="headerlink" title="/etc/ld/so.cache"></a><strong>/etc/ld/so.cache</strong></h5><p>因为是二进制文件所有需要间接修改此文件  </p><p>打开 <code>vim /etc/ld.so.conf</code>在最后直接添加 动态库的绝对路径即可</p><h5 id="lib-usr-lib"><a href="#lib-usr-lib" class="headerlink" title="/lib/ /usr/lib"></a><strong>/lib/ /usr/lib</strong></h5><p>将动态库移动在这两个目录下即可，但是不推荐，因为有可能覆盖原有的文件</p><h4 id="动态库和静态库对比"><a href="#动态库和静态库对比" class="headerlink" title="动态库和静态库对比"></a>动态库和静态库对比</h4><p>编译过程</p><p><img src="/2023/04/11/linux/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png"></p><p><img src="/2023/04/11/linux/%E9%9D%99%E6%80%81%E5%BA%93.png"></p><p><img src="/2023/04/11/linux/%E5%8A%A8%E6%80%81%E5%BA%93%E4%BC%98%E7%BC%BA%E7%82%B9.png" alt="linux"></p><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><h3 id="IO函数"><a href="#IO函数" class="headerlink" title="IO函数"></a>IO函数</h3><p><img src="/WindowsIO.png"></p><p>文件描述符</p><p>缓冲区地址</p><p>读写指针</p><h4 id="虚拟内存地址"><a href="#虚拟内存地址" class="headerlink" title="虚拟内存地址"></a>虚拟内存地址</h4><p><img src="/2023/04/11/linux/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.png" alt="image-20230416124327957"></p><p>实际上并不存在，生命周期等同程序生命周期</p><h2 id="Linux网络编程"><a href="#Linux网络编程" class="headerlink" title="Linux网络编程"></a>Linux网络编程</h2><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a><strong>socket</strong></h3><h4 id="小端字节序"><a href="#小端字节序" class="headerlink" title="小端字节序"></a>小端字节序</h4><p><strong>字节序</strong>分为<strong>大端字节序</strong>（Big-Endian） 和<strong>小端字节序</strong>（Little-Endian）。大端字节序是指一个整数的<strong>最高位字</strong>节（23 ~ 31 bit）存储<strong>在内存的低地址处</strong>，<strong>低位字节（0 ~ 7 bit）存储在内存的高地址处</strong>；小端字节序则是指整数的<strong>高位字节存储在内存的高地址处</strong>，而<strong>低位字节则存储在内存的低地址处</strong>。</p><p>0x 01 02 03 04     - ff = 255</p><p> 内存的方向 —–&gt; 内存的低位 —–&gt; 内存的高位</p><p>以 0x 11 22 33 44 12 34 56 78 为例子</p><p><img src="/2023/04/11/linux/%E5%B0%8F%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F.png" alt="image-20230421143355158"></p><h4 id="大端字节序"><a href="#大端字节序" class="headerlink" title="大端字节序"></a>大端字节序</h4><p>0x 01 02 03 04 </p><p> 内存的方向 —–&gt; 内存的低位 —–&gt; 内存的高位</p><p>0x 12 34 56 78 11 22 33 44 为例子</p><p><img src="/2023/04/11/linux/%E5%A4%A7%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F.png" alt="image-20230421143416999"></p><h3 id="TCP多进程实现并发服务器"><a href="#TCP多进程实现并发服务器" class="headerlink" title="TCP多进程实现并发服务器"></a>TCP多进程实现并发服务器</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;signal.h&gt;</span><br><span class="hljs-comment">#include &lt;wait.h&gt;</span><br><span class="hljs-comment">#include &lt;errno.h&gt;</span><br><br>void recyleChild(int arg) &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        int ret = waitpid(-<span class="hljs-number">1</span>, NULL, WNOHANG);<br>        <span class="hljs-keyword">if</span>(ret == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-regexp">//</span> 所有的子进程都回收了<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-regexp">//</span> 还有子进程活着<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-regexp">//</span> 被回收了<br>            printf(<span class="hljs-string">&quot;子进程 %d 被回收了\n&quot;</span>, ret);<br>        &#125;<br>    &#125;<br>&#125;<br><br>int main() &#123;<br><br>    struct sigaction act;<br>    act.sa_flags = <span class="hljs-number">0</span>;<br>    sigemptyset(&amp;act.sa_mask);<br>    act.sa_handler = recyleChild;<br>    <span class="hljs-regexp">//</span> 注册信号捕捉<br>    sigaction(SIGCHLD, &amp;act, NULL);<br>    <br><br>    <span class="hljs-regexp">//</span> 创建socket<br>    int lfd = socket(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(lfd == -<span class="hljs-number">1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    struct sockaddr_in saddr;<br>    saddr.sin_family = AF_INET;<br>    saddr.sin_port = htons(<span class="hljs-number">9999</span>);<br>    saddr.sin_addr.s_addr = INADDR_ANY;<br><br>    <span class="hljs-regexp">//</span> 绑定<br>    int ret = bind(lfd,(struct sockaddr *)&amp;saddr, sizeof(saddr));<br>    <span class="hljs-keyword">if</span>(ret == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;bind&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 监听<br>    ret = listen(lfd, <span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span>(ret == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 不断循环等待客户端连接<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><br>        struct sockaddr_in cliaddr;<br>        int len = sizeof(cliaddr);<br>        <span class="hljs-regexp">//</span> 接受连接<br>        int cfd = accept(lfd, (struct sockaddr*)&amp;cliaddr, &amp;len);<br>        <span class="hljs-keyword">if</span>(cfd == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span>(errno == EINTR) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            perror(<span class="hljs-string">&quot;accept&quot;</span>);<br>            <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-regexp">//</span> 每一个连接进来，创建一个子进程跟客户端通信<br>        pid_t pid = fork();<br>        <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-regexp">//</span> 子进程<br>            <span class="hljs-regexp">//</span> 获取客户端的信息<br>            char cliIp[<span class="hljs-number">16</span>];<br>            inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr, cliIp, sizeof(cliIp));<br>            unsigned short cliPort = ntohs(cliaddr.sin_port);<br>            printf(<span class="hljs-string">&quot;client ip is : %s, prot is %d\n&quot;</span>, cliIp, cliPort);<br><br>            <span class="hljs-regexp">//</span> 接收客户端发来的数据<br>            char recvBuf[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>                int len = read(cfd, &amp;recvBuf, sizeof(recvBuf));<br><br>                <span class="hljs-keyword">if</span>(len == -<span class="hljs-number">1</span>) &#123;<br>                    perror(<span class="hljs-string">&quot;read&quot;</span>);<br>                    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len &gt; <span class="hljs-number">0</span>) &#123;<br>                    printf(<span class="hljs-string">&quot;recv client : %s\n&quot;</span>, recvBuf);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>) &#123;<br>                    printf(<span class="hljs-string">&quot;client closed....\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                write(cfd, recvBuf, strlen(recvBuf) + <span class="hljs-number">1</span>);<br>            &#125;<br>            close(cfd);<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);    <span class="hljs-regexp">//</span> 退出当前子进程<br>        &#125;<br><br>    &#125;<br>    close(lfd);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> TCP通信的客户端<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br>int main() &#123;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.创建套接字<br>    int fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(fd == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.连接服务器端<br>    struct sockaddr_in serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    inet_pton(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;serveraddr.sin_addr.s_addr);<br>    serveraddr.sin_port = htons(<span class="hljs-number">9999</span>);<br>    int ret = connect(fd, (struct sockaddr *)&amp;serveraddr, sizeof(serveraddr));<br><br>    <span class="hljs-keyword">if</span>(ret == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;connect&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-regexp">//</span> <span class="hljs-number">3</span>. 通信<br>    char recvBuf[<span class="hljs-number">1024</span>];<br>    int i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <br>        sprintf(recvBuf, <span class="hljs-string">&quot;data : %d\n&quot;</span>, i++);<br>        <br>        <span class="hljs-regexp">//</span> 给服务器端发送数据<br>        write(fd, recvBuf, strlen(recvBuf)+<span class="hljs-number">1</span>);<br><br>        int len = read(fd, recvBuf, sizeof(recvBuf));<br>        <span class="hljs-keyword">if</span>(len == -<span class="hljs-number">1</span>) &#123;<br>            perror(<span class="hljs-string">&quot;read&quot;</span>);<br>            <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len &gt; <span class="hljs-number">0</span>) &#123;<br>            printf(<span class="hljs-string">&quot;recv server : %s\n&quot;</span>, recvBuf);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-regexp">//</span> 表示服务器端断开连接<br>            printf(<span class="hljs-string">&quot;server closed...&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        sleep(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 关闭连接<br>    close(fd);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1.创建一个通信的socket</span><br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;   <br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br>    addr.sin_addr.s_addr = INADDR_ANY;<br><br>    <span class="hljs-comment">// 2.绑定</span><br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">bind</span>(fd, (struct sockaddr *)&amp;addr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;bind&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3.通信</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">char</span> recvbuf[<span class="hljs-number">128</span>];<br>        <span class="hljs-keyword">char</span> ipbuf[<span class="hljs-number">16</span>];<br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">cliaddr</span>;</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cliaddr);<br><br>        <span class="hljs-comment">// 接收数据</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">recvfrom</span>(fd, recvbuf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(recvbuf), <span class="hljs-number">0</span>, (struct sockaddr *)&amp;cliaddr, &amp;len);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client IP : %s, Port : %d\n&quot;</span>, <br>            <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;cliaddr.sin_addr.s_addr, ipbuf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ipbuf)),<br>            <span class="hljs-built_in">ntohs</span>(cliaddr.sin_port));<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client say : %s\n&quot;</span>, recvbuf);<br><br>        <span class="hljs-comment">// 发送数据</span><br>        <span class="hljs-built_in">sendto</span>(fd, recvbuf, <span class="hljs-built_in">strlen</span>(recvbuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (struct sockaddr *)&amp;cliaddr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cliaddr));<br><br>    &#125;<br><br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1.创建一个通信的socket</span><br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;   <br><br>    <span class="hljs-comment">// 服务器的地址信息</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">saddr</span>;</span><br>    saddr.sin_family = AF_INET;<br>    saddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br>    <span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;saddr.sin_addr.s_addr);<br><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 3.通信</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-comment">// 发送数据</span><br>        <span class="hljs-keyword">char</span> sendBuf[<span class="hljs-number">128</span>];<br>        <span class="hljs-built_in">sprintf</span>(sendBuf, <span class="hljs-string">&quot;hello , i am client %d \n&quot;</span>, num++);<br>        <span class="hljs-built_in">sendto</span>(fd, sendBuf, <span class="hljs-built_in">strlen</span>(sendBuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (struct sockaddr *)&amp;saddr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(saddr));<br><br>        <span class="hljs-comment">// 接收数据</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">recvfrom</span>(fd, sendBuf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(sendBuf), <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;server say : %s\n&quot;</span>, sendBuf);<br><br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2023/03/15/cao-zuo-xi-tong/"/>
    <url>/2023/03/15/cao-zuo-xi-tong/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统-实验"><a href="#操作系统-实验" class="headerlink" title="操作系统 实验"></a>操作系统 实验</h1><h2 id="01-进程管理"><a href="#01-进程管理" class="headerlink" title="01 进程管理"></a>01 进程管理</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>创建子进程</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">pid_t pidA<span class="hljs-comment">;</span><br>while((<span class="hljs-name">pidA=fork</span>())==-1)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p><p>在父进程中，fork返回新创建子进程的进程ID；</p><ol><li>在子进程中，fork返回0；</li><li>如果出现错误，fork返回一个负值；</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">pid_t fork(<span class="hljs-keyword">void</span>)；<span class="hljs-comment">//pid_t为int类型，进行了重载</span><br><span class="hljs-function">pid_t <span class="hljs-title">getpid</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 获取当前进程的 pid 值。</span><br><span class="hljs-function">pid_t <span class="hljs-title">getppid</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//获取当前进程的父进程 pid 值。</span><br></code></pre></td></tr></table></figure><p>创建两子进程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,std::string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid1,pid2;<br>    <span class="hljs-keyword">while</span> ((pid1=fork())==<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(pid1==<span class="hljs-number">0</span>) <span class="hljs-comment">//子进程1</span><br>    &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> ((pid2=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(pid2==<span class="hljs-number">0</span>)<span class="hljs-comment">//子进程2</span><br>        &#123;<br>        <br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vfork"><a href="#vfork" class="headerlink" title="vfork"></a>vfork</h3><table><thead><tr><th>fork</th><th>vfork</th></tr></thead><tbody><tr><td>子进程拷贝父进程的地址空间，子进程是父进程的一个复</td><td>子进程共享父进程的地址空间（准确来说，在调用 exec（进程替换） 或 exit（退出进程） 之前与父进程数据是共享的）</td></tr><tr><td>父子进程的执行次序不确定</td><td>保证子进程先运行,在它调用 exec（进程替换） 或 exit（退出进程）之后父进程才可能被调度运行。</td></tr></tbody></table><p>需要搭配 exec 或者 _exit() 使用</p><p>可以用来统计一共有多少进程</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include&lt;sys/wait.h&gt;</span><br><span class="hljs-comment">#include&lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include&lt;string.h&gt;</span><br><span class="hljs-keyword">int</span> main()&#123;<br>signal(SIGCHLD,SIG_IGN);<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>; <br>pid_t pid1,pid2,pid3,pid4,pid5;<br><span class="hljs-keyword">while</span>((pid1 = vfork()) == -<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid1 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">while</span>((pid2=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid2 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Dpid is %d , Dppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Bpid is %d , Bppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((pid3=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid3 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">while</span>((pid4=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid4 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Fpid is %d , Fppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>); <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((pid5=vfork())==-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pid5 == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Epid is %d , Eppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br>num++;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Cpid is %d , Cppid is %d\n&quot;</span>,getpid(),getppid());<br>_exit(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">wait</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Apid is %d , Appid is %d\n&quot;</span>,getpid(),getppid());<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;childnum is %d\n&quot;</span>,num);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="execl"><a href="#execl" class="headerlink" title="execl"></a>execl</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execl</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *arg, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>execl()用来执行参数path字符串所代表的文件路径，接下来的参数代表执行该文件的参数argv[0],argv[1]…</p><p>最后一个参数必须是空指针NULL作为结束。</p><p>返回值：成功则不返回，执行失败则返回－1，失败原因在errno中。</p><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p>进程创建管道，得到两个件描述符指向管道的两端</p><p>父进程fork出子进程，子进程也有两个文件描述符指向同管道。</p><p>父进程关闭fd[0],子进程关闭fd[1]，即子进程关闭管道读端,父进程关闭管道写端（因为管道只支持单向通信）。子进程可以往管道中写,父进程可以从管道中读,管道是由环形队列实现的,数据从写端流入从读端流出,这样就实现了进程间通信。</p><p><img src="/2023/03/15/cao-zuo-xi-tong/image-20230316200446335.png" alt="image-20230316200446335"></p><p>管道创建</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> ret=<span class="hljs-keyword">pipe</span>(fd);<br></code></pre></td></tr></table></figure><p>失败返回-1 </p><p>成功返回0</p><h3 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">waitpid</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid,<span class="hljs-keyword">int</span> *status,<span class="hljs-keyword">int</span> options)</span></span><br></code></pre></td></tr></table></figure><p>pid&gt;0时，只等待进程ID等于pid的子进程，不管其它已经有多少子进程运行结束退出了，只要指定的子进程还没有结束，waitpid就会一直等下去。<br>pid=-1时，等待任何一个子进程退出，没有任何限制，此时waitpid和wait的作用一模一样。<br>pid=0时，等待同一个进程组中的任何子进程，如果子进程已经加入了别的进程组，waitpid不会对它做任何理睬。<br>pid&lt;-1时，等待一个指定进程组中的任何子进程，这个进程组的ID等于pid的绝对值。</p><h3 id="创建进程并使用管道"><a href="#创建进程并使用管道" class="headerlink" title="创建进程并使用管道"></a>创建进程并使用管道</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXBUFFSIZE=<span class="hljs-number">1000</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-built_in">pipe</span>(fd);<br>    <span class="hljs-keyword">char</span> write_buff[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,write_buff);<br>    <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;无法使用管道\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">pid_t</span> pid1,pid2;<br>    <span class="hljs-keyword">while</span> ((pid1=fork())==<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(pid1==<span class="hljs-number">0</span>)<br>    &#123;            <br>        <span class="hljs-built_in">close</span>(fd[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(write_buff);<br>        <span class="hljs-built_in">write</span>(fd[<span class="hljs-number">1</span>],write_buff,len+<span class="hljs-number">1</span>);<br>        _exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> ((pid2=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(pid2==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">waitpid</span>(pid1,<span class="hljs-literal">NULL</span>,WNOHANG);<br>            <span class="hljs-built_in">close</span>(fd[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">char</span> read_buff[MAXBUFFSIZE];<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">read</span>(fd[<span class="hljs-number">0</span>], read_buff, MAXBUFFSIZE);<br><br>            <span class="hljs-built_in">execl</span>(<span class="hljs-string">&quot;./output/encode&quot;</span>,read_buff,<span class="hljs-literal">NULL</span>);<br>            _exit(<span class="hljs-number">0</span>);<br>        &#125;<br>        _exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ps:</p><p>这边 值得注意的是</p><p>write 函数需要 的 size_t 参数 要+1</p><p>read 函数 的 size_t 参数 直接用数组的长度即可</p><h2 id="02-进程调度"><a href="#02-进程调度" class="headerlink" title="02 进程调度"></a>02 进程调度</h2><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><p>PCB：process ctrl block（进程控制块）在操作系统代码当中是一个结构体：struct task_struct{…}</p><p>如进程状态、进程ID、优先级、程序计数器、寄存器值、内存管理信息、打开文件列表等。PCB是操作系统对进程的抽象，它记录了进程在系统中的运行状态，是操作系统进行进程调度和管理的重要数据结构。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*本次实验模拟实现操作系统中进程调度算法,模拟进程在不同时刻到达的情况*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PNUM  5 <span class="hljs-comment">//进程的数量</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TIMER 10 <span class="hljs-comment">//定时器,最长CPU区间时间</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SLICE 2<span class="hljs-comment">//轮转算法的时间片</span></span><br> <span class="hljs-keyword">int</span> timenow=<span class="hljs-number">0</span>;     <span class="hljs-comment">//当前时刻</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>   <span class="hljs-keyword">int</span> pid;   <span class="hljs-comment">//进程号</span><br>   <span class="hljs-keyword">int</span> priority;<span class="hljs-comment">//进程优先级,1~3,数字越小优先级越高</span><br>   <span class="hljs-keyword">int</span> arrival; <span class="hljs-comment">//到达时间</span><br>   <span class="hljs-keyword">int</span> burst;  <span class="hljs-comment">//CPU区间时间</span><br>   <span class="hljs-keyword">int</span> rest;  <span class="hljs-comment">//剩余时间</span><br>   <span class="hljs-keyword">char</span> state;<span class="hljs-comment">//进程状态,&#x27;N&#x27;新建,&#x27;R&#x27;运行,&#x27;W&#x27;等待CPU(就绪),&#x27;T&#x27;终止</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;PCB;<br><span class="hljs-keyword">int</span> gantt[TIMER*PNUM]=&#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//用一个gantt数组记录调度过程,每个时刻调度的进程号 </span><br><br>PCB *job;<span class="hljs-comment">//所有作业的序列,带头节点(为简化编程)</span><br>PCB *ready=<span class="hljs-literal">NULL</span>; <span class="hljs-comment">//进程就绪队列,不带头节点</span><br>PCB *tail=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//记录就绪队列的尾节点</span><br>PCB *run=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//正在运行中的进程,不带头结点</span><br>PCB *finish=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//已经结束的程序,不带头结点</span><br>PCB* temp=<span class="hljs-literal">NULL</span>;<br><br></code></pre></td></tr></table></figure><h3 id="SJF-最短作业优先，非抢占"><a href="#SJF-最短作业优先，非抢占" class="headerlink" title="SJF(最短作业优先，非抢占)"></a>SJF(最短作业优先，非抢占)</h3><p>短作业优先调度算法</p><p>优点：考虑到作业的服务时间情况，降低了周转时间等相应时间；<br>缺点：有可能短进程一致插队，导致长进程处于长期饥饿状态；</p><h3 id="FCFS-先来先服务"><a href="#FCFS-先来先服务" class="headerlink" title="FCFS(先来先服务)"></a>FCFS(<strong>先来先服务</strong>)</h3><p>FCFS 策略可以通过 FIFO 队列容易地实现。当一个进程进入就绪队列时，它的 PCB 会被链接到队列尾部。当 CPU 空闲时，它会分配给位于队列头部的进程，并且这个运行进程从队列中移去。FCFS 调度代码编写简单并且理解容易。</p><p>FCFS 策略的缺点是，平均等待时间往往很长。假设有如下一组进程，它们在时间 0 到达，CPU 执行长度按 ms 计：</p><p><img src="/2023/03/15/cao-zuo-xi-tong/FCFS.png" alt="image-20230321191906644"></p><h3 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h3><p>时间片轮转（RR）调度算法是专门为分时系统设计的。它类似于 <a href="http://c.biancheng.net/view/1242.html">FCFS调度</a>，但是增加了抢占以切换进程。</p><p>该算法中，将一个较小时间单元定义为时间量或时间片。时间片的大小通常为 10~100ms。就绪队列作为循环队列。CPU 调度程序循环整个就绪队列，为每个进程分配不超过一个时间片的 CPU。</p><p>为了实现 RR 调度，我们再次将就绪队列视为进程的 FIFO 队列。新进程添加到就绪队列的尾部。CPU 调度程序从就绪队列中选择第一个进程，将定时器设置在一个时间片后中断，最后分派这个进程。</p><h3 id="初始化-以及-更新队列-显示队列"><a href="#初始化-以及-更新队列-显示队列" class="headerlink" title="初始化 以及 更新队列 显示队列"></a>初始化 以及 更新队列 显示队列</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">void</span> InitialJob()<br>&#123;   <br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    PCB *p,*tail;<br>    job=(PCB *)malloc(sizeof(PCB));<span class="hljs-comment">//生成头节点,其它域无意义</span><br>    job-&gt;next=<span class="hljs-literal">NULL</span>;<br>    tail=job;<br>    <br> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;PNUM;i++)<br> &#123; p=(PCB *)malloc(sizeof(PCB));<span class="hljs-comment">//生成新节点(新进程)</span><br>   p-&gt;pid=i+<span class="hljs-number">1</span>;<br>   p-&gt;priority=rand()%<span class="hljs-number">3</span>+<span class="hljs-number">1</span>;<span class="hljs-comment">//随机生成优先级:1~3</span><br>   p-&gt;arrival=rand()%TIMER;<span class="hljs-comment">//随机生成到达时刻0-9,(预计到达就绪队列的时间) </span><br>   p-&gt;burst=rand()%TIMER+<span class="hljs-number">1</span>;<span class="hljs-comment">//随机生成CPU区间时间:1~10;(估计运行时间)</span><br>   p-&gt;rest=p-&gt;burst;<br>   p-&gt;state=<span class="hljs-string">&#x27;N&#x27;</span>;<span class="hljs-comment">//初始化进程的状态为&#x27;新建&#x27;</span><br>   p-&gt;next=<span class="hljs-literal">NULL</span>; <br>   tail-&gt;next=p; <br>   tail=p;  <span class="hljs-comment">//带头结点</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">void</span> DisplayPCB(PCB *pcb) <span class="hljs-comment">//显示队列</span><br>&#123;<br>  struct node *p=pcb;<br>  <span class="hljs-keyword">if</span>(pcb==<span class="hljs-literal">NULL</span>) &#123;printf(<span class="hljs-string">&quot;XXXXXX\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;<br>  printf(<span class="hljs-string">&quot;进程号 优先级 到达时刻 区间时间 剩余时间 进程状态\n&quot;</span>);<br>  <span class="hljs-keyword">do</span>&#123;<br>    printf(<span class="hljs-string">&quot;P%-3d\t&quot;</span>,p-&gt;pid);<br>    printf(<span class="hljs-string">&quot;%3d\t&quot;</span>,p-&gt;priority);<br>    printf(<span class="hljs-string">&quot;%3d\t&quot;</span>,p-&gt;arrival);<br>    printf(<span class="hljs-string">&quot;%3d\t&quot;</span>,p-&gt;burst);<br>printf(<span class="hljs-string">&quot;%3d\t&quot;</span>,p-&gt;rest);<br>printf(<span class="hljs-string">&quot;%3c\t&quot;</span>,p-&gt;state);<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    p=p-&gt;next;<br>  &#125;<span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>);   <br>&#125;<br><br><span class="hljs-keyword">void</span> DisplayGantt() <span class="hljs-comment">//显示甘特数组</span><br>&#123;<br>  <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;timenow;i++)<br>  &#123;<br>   <span class="hljs-keyword">if</span>(gantt[i]==<span class="hljs-number">0</span>) printf(<span class="hljs-string">&quot;空闲,&quot;</span>);<br>   <span class="hljs-keyword">else</span><br>     printf(<span class="hljs-string">&quot;P%d,&quot;</span>,gantt[i]);<br>  &#125;<br>  printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*注:关于周转时间,等待时间与响应时间的概念释疑:</span><br><span class="hljs-comment">  在课程教材&lt;操作系统概念第7版&gt;中(P141),上述三个时间是从进程到达的时间开始的.</span><br><span class="hljs-comment">  在辅助教材&lt;现代操作系统第4版&gt;中(P89),上述三个时间时从进程提交的时刻(0时刻)开始的.</span><br><span class="hljs-comment">  国内普遍接受前一种理解,本程序以课程教材中的解释为准来计算时间.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> DisplayTime() <span class="hljs-comment">//显示周转时间t,等待时间w和响应时间r</span><br>&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>,w=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> t_avg=<span class="hljs-number">0</span>,w_avg=<span class="hljs-number">0</span>,r_avg=<span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">int</span> i,j;<br>    PCB *p; <span class="hljs-comment">//用p遍历finish队列,查找进程Pi的到达时间,调用该函数时所有进程都已放入finish队列</span><br>    <span class="hljs-keyword">if</span>(finish==<span class="hljs-literal">NULL</span>) &#123;<span class="hljs-keyword">return</span>;&#125;<br>    printf(<span class="hljs-string">&quot;进程号    周转时间    等待时间    响应时间\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=PNUM;i++)<br>     &#123; p=finish;<br>       <span class="hljs-keyword">while</span>(p-&gt;pid!=i) p=p-&gt;next;<br>       j=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(gantt[j]!=i) j++; <span class="hljs-comment">//遍历甘特数组,求进程Pi的响应时间</span><br>        r=j;  <span class="hljs-comment">//响应时刻</span><br>        t=j+<span class="hljs-number">1</span>;        <br>       <span class="hljs-keyword">for</span>(j=r+<span class="hljs-number">1</span>;j&lt;timenow;j++) <span class="hljs-comment">//继续遍历,求周转时间</span><br>       &#123; <span class="hljs-keyword">if</span>(i==gantt[j]) t=j+<span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//结束时刻</span><br>       r=r-p-&gt;arrival;  <span class="hljs-comment">//响应时间=响应时刻-到达时刻</span><br>       t=t-p-&gt;arrival; <span class="hljs-comment">//周转时间=结束时刻-到达时刻</span><br>       w=t-p-&gt;burst; <span class="hljs-comment">//等待时间=周转时间-运行时间</span><br>       r_avg+=(<span class="hljs-keyword">float</span>)r/PNUM; <span class="hljs-comment">//平均响应时间</span><br>       w_avg+=(<span class="hljs-keyword">float</span>)w/PNUM;  <span class="hljs-comment">//平均等待时间</span><br>       t_avg+=(<span class="hljs-keyword">float</span>)t/PNUM;   <span class="hljs-comment">//平均周转时间</span><br>       <br>       printf(<span class="hljs-string">&quot;P%d       %4d       %4d       %4d\n&quot;</span>,i,t,w,r);<br>     &#125;<br>     printf(<span class="hljs-string">&quot;平均周转时间:%.2f,平均等待时间%.2f,平均响应时间%.2f\n&quot;</span>,t_avg,w_avg,r_avg);<br>&#125;<br><span class="hljs-keyword">void</span> ReadyQueue(char * algo,<span class="hljs-keyword">int</span> t) <span class="hljs-comment">//根据作业队列构造就绪队列,algo:算法,t:当前时刻</span><br>&#123;   <br>   struct node *jpre,*jcur,*rpre,* rcur; <br>   <span class="hljs-keyword">int</span> j,r,a=<span class="hljs-number">0</span>;         <br>   <span class="hljs-keyword">if</span>(strcmp(algo,<span class="hljs-string">&quot;FCFS&quot;</span>)==<span class="hljs-number">0</span>||strcmp(algo,<span class="hljs-string">&quot;RR&quot;</span>)==<span class="hljs-number">0</span>)<span class="hljs-comment">//FCFS和RR的就绪队列的构造方式相同</span><br>      a=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(strcmp(algo,<span class="hljs-string">&quot;SJF&quot;</span>)==<span class="hljs-number">0</span>)  <span class="hljs-comment">//非抢占SJF</span><br>      a=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(strcmp(algo,<span class="hljs-string">&quot;SRTF&quot;</span>)==<span class="hljs-number">0</span>)  <span class="hljs-comment">//抢占式SJF,最短剩余时间优先</span><br>      a=<span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(strcmp(algo,<span class="hljs-string">&quot;Priority&quot;</span>)==<span class="hljs-number">0</span>||strcmp(algo,<span class="hljs-string">&quot;NonPriority&quot;</span>)==<span class="hljs-number">0</span>)<span class="hljs-comment">//抢占和非抢占优先级 </span><br>      a=<span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">else</span> &#123;printf(<span class="hljs-string">&quot;ReadyQueue()函数调用参数错误!\n&quot;</span>);<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;<br>   <span class="hljs-keyword">if</span>(job-&gt;next==<span class="hljs-literal">NULL</span>) &#123;printf(<span class="hljs-string">&quot;作业队列为空!\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;  <br>   jpre=job;<br>   jcur=job-&gt;next;<br>   <span class="hljs-keyword">while</span>(jcur!=<span class="hljs-literal">NULL</span>) <span class="hljs-comment">//遍历作业序列中选择已到达进程,将其从作业队列移入就绪队列,直到作业队列为空   </span><br>   &#123;  <br>      <span class="hljs-keyword">if</span>(jcur-&gt;arrival&lt;=t) <span class="hljs-comment">//如果当前时刻进程已经到达,则将其插入到就绪队列的合适位置</span><br>      &#123;<br>         printf(<span class="hljs-string">&quot;P%d到达.\n&quot;</span>,jcur-&gt;pid);<br>      jpre-&gt;next=jcur-&gt;next;  <span class="hljs-comment">//将jcur从作业队列移除</span><br>         jcur-&gt;state=<span class="hljs-string">&#x27;W&#x27;</span>;<span class="hljs-comment">//将进程状态设置为就绪</span><br>       <span class="hljs-keyword">if</span>(ready==<span class="hljs-literal">NULL</span>) <span class="hljs-comment">//就绪队列为空</span><br>         &#123;jcur-&gt;next=<span class="hljs-literal">NULL</span>;ready=jcur;tail=ready;&#125;<br>         <span class="hljs-keyword">else</span>  <span class="hljs-comment">//就绪队列不为空,遍历就绪队列,将jcur插入到合适位置</span><br>         &#123; rpre=ready;<br>             rcur=ready;<br>              <span class="hljs-keyword">switch</span> (a)&#123; <span class="hljs-comment">//遍历就绪队列查找插入点</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:    <span class="hljs-comment">//FCFS,RR.根据到达时间arrival查找合适插入点</span><br>                        <span class="hljs-keyword">while</span>((rcur!=<span class="hljs-literal">NULL</span>)&amp;&amp;(jcur-&gt;arrival&gt;=rcur-&gt;arrival)) <br>                             &#123;rpre=rcur;rcur=rcur-&gt;next;&#125;<br><span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//SJF,根据区间时间burst查找合适插入点 </span><br>                         <span class="hljs-keyword">while</span>((rcur!=<span class="hljs-literal">NULL</span>)&amp;&amp;(jcur-&gt;burst&gt;=rcur-&gt;burst))<br>                               &#123;rpre=rcur;rcur=rcur-&gt;next;&#125;<br> <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//STRF,根据剩余时间rest查找合适插入点</span><br>   <span class="hljs-keyword">while</span>((rcur!=<span class="hljs-literal">NULL</span>)&amp;&amp;(jcur-&gt;rest&gt;=rcur-&gt;rest))<br>                               &#123;rpre=rcur;rcur=rcur-&gt;next;&#125;<br>   <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//Priority, Non-Priority,根据优先级查找合适插入点</span><br><span class="hljs-keyword">while</span>((rcur!=<span class="hljs-literal">NULL</span>)&amp;&amp;(jcur-&gt;priority&gt;=rcur-&gt;priority)) <br>                             &#123;rpre=rcur;rcur=rcur-&gt;next;&#125;<br>                       <br>                        <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;<br>              &#125;<br>             <span class="hljs-keyword">if</span>(rcur==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">// 插入点在就绪队列尾部</span><br>             &#123; <br>               jcur-&gt;next=<span class="hljs-literal">NULL</span>;<br>               rpre-&gt;next=jcur;<br>               tail=jcur;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rcur==ready) <span class="hljs-comment">//插入点在头部</span><br>             &#123;<br>                jcur-&gt;next=rcur;<br>                ready=jcur; <br>             &#125;<br>             <span class="hljs-keyword">else</span> <span class="hljs-comment">//插入到rpre和rcur之间</span><br>             &#123;   <br>                jcur-&gt;next=rcur;<br>                rpre-&gt;next=jcur;  <br>             &#125;<br>         &#125;<br>         jcur=jpre-&gt;next;  <span class="hljs-comment">//下一个作业</span><br>       &#125;<span class="hljs-keyword">else</span>   <span class="hljs-comment">//当前作业未达到</span><br>       &#123;jpre=jcur;jcur=jcur-&gt;next;&#125; <span class="hljs-comment">//下一个作业</span><br>     &#125;<br>      printf(<span class="hljs-string">&quot;\n作业队列:\n&quot;</span>);<br>      DisplayPCB(job-&gt;next); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="03-进程同步"><a href="#03-进程同步" class="headerlink" title="03 进程同步"></a>03 进程同步</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>同时访问共享数据可能造成数据的不一致。</p><p>维持数据的一致性需要有保证协作进程有序执行的机制</p><p>多线程竞争</p><p>生产者进程中count++ 按如下顺序执行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">register1</span> = count<br><span class="hljs-attr">register1</span> = register1 + <span class="hljs-number">1</span><br><span class="hljs-attr">count</span> = register1<br></code></pre></td></tr></table></figure><p>同时，消费者者进程中count–按如下顺序执行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">register2</span> = count<br><span class="hljs-attr">register2</span> = register2 - <span class="hljs-number">1</span><br><span class="hljs-attr">count</span> = register2<br></code></pre></td></tr></table></figure><p>多个进程并发访问和操作同一组数据，且执行结果与访问顺序有关。</p><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p><strong>临界区：</strong>并发进程中可能改变共同变量、更新同一个表、写同一个文件的代码段。</p><p>进入区（上锁）、临界区、退出区（开锁）、剩余区</p><p>解决临界区问题必须满足如下三项要求：</p><p>1.<strong>互斥 ：</strong>进程Pi在临界区内执行，其他进程不得进入临界区</p><p>2.<strong>前进：</strong>如果没有进程在临界区执行，那么允许不在剩余区的进程计入临界区</p><p>3.<strong>有限等待：</strong>从一个进程作出进入临界区的请求，直到该请求被允许为止，其他进程允许进入其临界区的次数有上限。</p><p>总结：</p><p>  <strong>忙则等待；空则让进；等则有限</strong>；<strong>等则让权</strong></p><h3 id="Peterson-算法"><a href="#Peterson-算法" class="headerlink" title="Peterson 算法"></a>Peterson 算法</h3><p>适用于两个进程在临界区和剩余区间交替执行</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;semaphore.h&gt;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_init(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>, <span class="hljs-params">int</span> <span class="hljs-params">pshared</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">value</span>)</span>; <span class="hljs-comment">//通常 pshared 为 0.表示线程间</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_destroy(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span> <span class="hljs-params">sem</span>)</span>;<span class="hljs-comment">//注销信号量</span><br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_post(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span> <span class="hljs-params">sem</span>)</span>; <span class="hljs-comment">//相当于解锁</span><br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_wait(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span> <span class="hljs-params">sem</span>)</span>;     <span class="hljs-comment">//相当于加锁</span><br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_trywait(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span> <span class="hljs-params">sem</span>)</span>;   <span class="hljs-comment">//不阻塞</span><br></code></pre></td></tr></table></figure><h4 id="example-1"><a href="#example-1" class="headerlink" title="example_1"></a>example_1</h4><p><img src="/../%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%BA%A4%E6%9B%BF.png" alt="image-20230404195434037"></p><p>设置两个信号量 s1 s2</p><p>第一个程序等待 s1 释放 s2</p><p>第二个程序 等待 s2 释放 s1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-keyword">sem_t</span> s1,s2; <span class="hljs-comment">//信号量结构</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread_t1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>     <br>   <span class="hljs-built_in">sem_wait</span>(&amp;s1);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;X&quot;</span>);<br>   <span class="hljs-built_in">usleep</span>(<span class="hljs-number">1000</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&quot;</span>);<br>   <span class="hljs-built_in">sem_post</span>(&amp;s2);<br>    <br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread_t2</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>   <span class="hljs-built_in">sem_wait</span>(&amp;s2);   <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;O&quot;</span>);<br>   <span class="hljs-built_in">usleep</span>(<span class="hljs-number">1000</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;o&quot;</span>);<br>   <span class="hljs-built_in">sem_post</span>(&amp;s1);<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span> res;<br>   <span class="hljs-keyword">pthread_t</span> a_thread;<br>   <span class="hljs-built_in">sem_init</span>(&amp;s1,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>   <span class="hljs-built_in">sem_init</span>(&amp;s2,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>   res=<span class="hljs-built_in">pthread_create</span>(&amp;a_thread,<span class="hljs-literal">NULL</span>,thread_t1,<span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">if</span>(res!=<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Thread creation failure!\n&quot;</span>);&#125;<br>   res=<span class="hljs-built_in">pthread_create</span>(&amp;a_thread,<span class="hljs-literal">NULL</span>,thread_t2,<span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">if</span>(res!=<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Thread creation failure!\n&quot;</span>);&#125;<br><br>   <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pthread-create-创建线程"><a href="#pthread-create-创建线程" class="headerlink" title="pthread_create 创建线程"></a>pthread_create 创建线程</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">int pthread_create(pthread_t *thread,<br>                   <span class="hljs-keyword">const</span> pthread_attr_t *attr,<br>                   void *<span class="hljs-comment">(*start_routine) (void *)</span>,<br>                   void *arg);<br></code></pre></td></tr></table></figure><p>**pthread_t *thread**：传递一个 pthread_t 类型的指针变量，也可以直接传递某个 pthread_t 类型变量的地址。pthread_t 是一种用于表示线程的数据类型，每一个 pthread_t 类型的变量都可以表示一个线程。</p><p>**const pthread_attr_t   *attr**：用于手动设置新建线程的属性，例如线程的调用策略、线程所能使用的栈内存的大小等。大部分场景中，我们都不需要手动修改线程的属性，将 attr 参数赋值为 NULL，pthread_create() 函数会采用系统默认的属性值创建线程。</p><p>pthread_attr_t 类型以结构体的形式定义在<code>&lt;pthread.h&gt;</code>头文件中，此类型的变量专门表示线程的属性。</p><p> **void *(*start_routine) (void *)<em><em>：以函数指针的方式指明新建线程需要执行的函数，该函数的参数最多有 1 个（可以省略不写），形参和返回值的类型都必须为 void</em> 类型。void</em> 类型又称空指针类型，表明指针所指数据的类型是未知的。使用此类型指针时，我们通常需要先对其进行强制类型转换，然后才能正常访问指针指向的数据。</p><p> **void *arg**：指定传递给 start_routine 函数的实参，当不需要传递任何数据时，将 arg 赋值为 NULL 即可。</p><p>如果成功创建线程，pthread_create() 函数返回数字 0，反之返回非零值。各个非零值都对应着不同的宏，指明创建失败的原因，常见的宏有以下几种：</p><p><strong>EAGAIN</strong>：系统资源不足，无法提供创建线程所需的资源。</p><p><strong>EINVAL</strong>：传递给 pthread_create() 函数的 attr 参数无效。</p><p><strong>EPERM</strong>：传递给 pthread_create() 函数的 attr 参数中，某些属性的设置为非法操作，程序没有相关的设置权限</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl</title>
    <link href="/2023/03/14/wsl/"/>
    <url>/2023/03/14/wsl/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><h2 id="安装-适用于-Linux-的-Windows-子系统文档"><a href="#安装-适用于-Linux-的-Windows-子系统文档" class="headerlink" title="安装 适用于 Linux 的 Windows 子系统文档 "></a>安装 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">适用于 Linux 的 Windows 子系统文档 </a></h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">wsl <span class="hljs-comment">--install</span><br></code></pre></td></tr></table></figure><p>更新和升级包</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo apt <span class="hljs-meta">update</span> <span class="hljs-variable">&amp;&amp;</span> sudo apt upgrade<br></code></pre></td></tr></table></figure><h2 id="连接-Vs-Code"><a href="#连接-Vs-Code" class="headerlink" title="连接 Vs Code"></a>连接 Vs Code</h2><p>在扩展里面下载</p><p><img src="/../../pic/WSLVScode.png" alt="image-20230315140144999"></p><p>以及</p><p><img src="/../../pic/VsCode%E9%85%8D%E7%BD%AE.png" alt="image-20230315140244520"></p><p>之后在ubuntu里面 使用 </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">code</span> .<br></code></pre></td></tr></table></figure><p>来打开 VC</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyTorch_手写字识别</title>
    <link href="/2023/03/05/pytorch/"/>
    <url>/2023/03/05/pytorch/</url>
    
    <content type="html"><![CDATA[<h3 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> torch torchvision torchaudio<br></code></pre></td></tr></table></figure><h3 id="下载MNiST数据集"><a href="#下载MNiST数据集" class="headerlink" title="下载MNiST数据集"></a>下载MNiST数据集</h3><p>创建 dataset.py</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-keyword">def</span> download_dataset():<br>    dataset=torchvision.datasets.MNIST(<span class="hljs-string">&quot;./data&quot;</span>,train=<span class="hljs-keyword">True</span>,download=<span class="hljs-keyword">True</span>)<br>    <span class="hljs-keyword">return</span> dataset<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    download_dataset()<br></code></pre></td></tr></table></figure><h3 id="保存训练模型测试"><a href="#保存训练模型测试" class="headerlink" title="保存训练模型测试"></a>保存训练模型测试</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">import torch<br><span class="hljs-selector-tag">from</span> model import DNN<br><br>def save_model_fun1():<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    #只保存模型参数<br>    torch.<span class="hljs-built_in">save</span>(model.<span class="hljs-built_in">state_dict</span>(),<span class="hljs-string">&quot;dnn_test1.pth&quot;</span>)<br>def <span class="hljs-built_in">save_model_fun2</span>():<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    #保存整个类模型<br>    torch.<span class="hljs-built_in">save</span>(model,<span class="hljs-string">&quot;dnn_test2.pt&quot;</span>)<br>def <span class="hljs-built_in">load_model_test1</span>(path):<br>    model=<span class="hljs-built_in">DNN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    ckpt=torch.<span class="hljs-built_in">load</span>(path)<br>def <span class="hljs-built_in">load_model_test2</span>(path):<br>    model=torch.<span class="hljs-built_in">load</span>(path)<br>    <span class="hljs-built_in">print</span>(model)<br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">save_model_fun1</span>()<br>    <span class="hljs-built_in">save_model_fun2</span>()<br>    <span class="hljs-built_in">load_model_test2</span>(<span class="hljs-string">&quot;./dnn_test2.pt&quot;</span>)<br></code></pre></td></tr></table></figure><p>建议只保存 模型参数，会更加通用</p><p>如果是只有本人用的话，那保存整个类模型也可以</p><h3 id="eval评估"><a href="#eval评估" class="headerlink" title="eval评估"></a>eval评估</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import  torch<br><span class="hljs-keyword">from</span> dataset import get_dataloader<br><span class="hljs-keyword">from</span> model import DNN<br><br>def eval_model(model,eval_dataloader,<span class="hljs-attribute">ckpt_path</span>=None):<br>    # 构造数据集<br>    # 构造模型 导入保存的模型<br>    <span class="hljs-keyword">if</span> ckpt_path:<br>        ckpt = torch.load(ckpt_path)<br>        <span class="hljs-attribute">not_load</span>=model.load_state_dict(ckpt,strict=True)<br><br>    model.eval()<br><br>    <span class="hljs-attribute">all_night_num</span>=0<br>    with torch.no_grad():<br>        <span class="hljs-keyword">for</span> images,labes <span class="hljs-keyword">in</span> eval_dataloader:<br>            <span class="hljs-attribute">images</span>=images<br>            <span class="hljs-attribute">labes</span>=labes<br>            <span class="hljs-attribute">images</span>=images.reshape((-1,1*28*28))<br>            #向前<br>            <span class="hljs-attribute">output</span>=model(images)<br>            <span class="hljs-attribute">pre</span>=output.max(1,keepdim=True)[1].reshape(labes.shape)<br>            right_num=(<span class="hljs-attribute">pre</span>==labes).sum()<br>            all_night_num+=right_num<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;pre: &quot;</span>)<br>            # <span class="hljs-builtin-name">print</span>(pre)<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;labes &quot;</span>)<br>            # <span class="hljs-builtin-name">print</span>(labes)<br>            # <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;----------&quot;</span>)<br>        <span class="hljs-attribute">per</span>=all_night_num/len(eval_dataloader.dataset)<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;per is &#123;:.2f&#125;%&quot;</span>.format(per.cpu().item()<span class="hljs-number">*100</span>))<br>    return per<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-attribute">model</span>=DNN(1,28,28)<br>    eval_dataloader = get_dataloader(<span class="hljs-literal">False</span>)<br>    #模型初始化<br>    eval(model,eval_dataloader,<span class="hljs-string">&quot;dnn.path&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="保存最优模型"><a href="#保存最优模型" class="headerlink" title="保存最优模型"></a>保存最优模型</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> torch<br>from dataset <span class="hljs-built_in">import</span> get_dataloader<br>from model <span class="hljs-built_in">import</span> DNN<br><span class="hljs-built_in">import</span> eval<br><br>def train(<span class="hljs-attr">epochs=10):</span><br>    <span class="hljs-comment">#构造数据集</span><br>    <span class="hljs-attr">train_data_loader</span> = get_dataloader(True)<br>    <span class="hljs-attr">eval_dataloader</span> = get_dataloader(False)<br><br>    <span class="hljs-comment">#模型初始化</span><br>    <span class="hljs-comment">#构造模型</span><br>    <span class="hljs-attr">dnn</span> = DNN(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br><br>    <span class="hljs-comment">#构造优化器/学习率/loss</span><br>    <span class="hljs-attr">optimizer</span> = torch.optim.Adam(dnn.parameters(), <span class="hljs-attr">lr=0.001)</span><br>    <span class="hljs-attr">lr_scheduler</span> = torch.optim.lr_scheduler.StepLR(optimizer,len(train_data_loader),<span class="hljs-attr">gamma=0.8)</span><br>    <span class="hljs-attr">nll_loss</span> = torch.nn.NLLLoss()<br><br>    <span class="hljs-comment">#模型训练</span><br>    <span class="hljs-attr">per=0</span><br>    for epoch <span class="hljs-keyword">in</span> range(epochs):<br>        dnn.train()<br>        <span class="hljs-attr">step</span> = <span class="hljs-number">0</span><br>        for images,labels <span class="hljs-keyword">in</span> train_data_loader:<br>            optimizer.zero_grad()<br>            <span class="hljs-attr">images</span> = images.reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            <span class="hljs-comment"># forward 前向</span><br>            <span class="hljs-attr">output</span> = dnn(images)<br>            <span class="hljs-attr">loss</span> = nll_loss(output,labels)<br>            <span class="hljs-comment"># backward 反向</span><br>            loss.backward()<br><br><br>            <span class="hljs-comment">#参数更新</span><br>            optimizer.step()<br>            lr_scheduler.step()<br>            step += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                print(<span class="hljs-string">&quot;epcoh: &#123;&#125; / &#123;&#125; ,step &#123;&#125; / &#123;&#125;,lr: &#123;&#125;,loss&#123;&#125;&quot;</span>.format(<br>                    epoch + <span class="hljs-number">1</span>, epochs, step, len(train_data_loader),<br>                    lr_scheduler.get_last_lr(), loss))<br>        <span class="hljs-attr">per_now</span> = eval.eval_model(dnn, eval_dataloader)<br>    <span class="hljs-comment">#保存模型</span><br>        torch.save(dnn.state_dict(),<span class="hljs-string">&quot;dnn_new.path&quot;</span>)<br>        <span class="hljs-keyword">if</span>(per_now&gt;per):<br>            print(<span class="hljs-string">&quot;save best model per is &#123;:.2f&#125;%&quot;</span>.format(per_now.cpu().item()*<span class="hljs-number">100</span>))<br>            torch.save(dnn.state_dict(),<span class="hljs-string">&quot;dnn_best.path&quot;</span>)<br>            <span class="hljs-attr">per=per_now</span><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == &#x27;__main__&#x27;:<br>    train()<br></code></pre></td></tr></table></figure><h3 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">from</span> matplotlib import pyplot as plt<br><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">import</span>  torch<br><span class="hljs-attribute">import</span>  model<br><span class="hljs-attribute">from</span> dataset import get_dataloader<br><span class="hljs-attribute">def</span> image_pre_handle(image):<br>    <span class="hljs-attribute">gray_image</span>=cv<span class="hljs-number">2</span>.cvtColor(image,cv<span class="hljs-number">2</span>.COLOR_RGB<span class="hljs-number">2</span>GRAY)<br><br>    <span class="hljs-attribute">gray_image</span>=cv<span class="hljs-number">2</span>.resize(gray_image,(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>))[np.newaxis,:,:]<br><br>    <span class="hljs-comment"># image.cv2.imshow(&quot;image&quot;, gray_image)</span><br>    <span class="hljs-comment"># cv2.waitkey(0)</span><br>    <span class="hljs-comment"># cv2.destroyAllwinodows()</span><br>    <span class="hljs-attribute">norm_image</span>=gray_image/<span class="hljs-number">255</span><br>    <span class="hljs-attribute">norm_image</span>=(norm_image-<span class="hljs-number">0</span>.<span class="hljs-number">1307</span>)/<span class="hljs-number">0</span>.<span class="hljs-number">3801</span><br>    <span class="hljs-attribute">norm_tensor</span>=torch.from_numpy(norm_image).view((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>    <span class="hljs-attribute">return</span> norm_tensor.to(torch.float<span class="hljs-number">32</span>)<br><span class="hljs-attribute">def</span> infer(model,image_path):<br>    <span class="hljs-comment">#读取图片</span><br>    <span class="hljs-attribute">image</span>=cv<span class="hljs-number">2</span>.imread(image_path)<br>    <span class="hljs-comment"># cv2.imshow(&quot;1&quot;, image)</span><br>         <span class="hljs-comment"># cv2.waitkey(0)</span><br>    <span class="hljs-comment"># cv2.destroyAllwinodows()</span><br><br>    <span class="hljs-comment">#图片预处理</span><br>    <span class="hljs-attribute">input_data</span>=image_pre_handle(image)<br>    <span class="hljs-comment">#模型推理</span><br>    <span class="hljs-attribute">model</span>.eval()<br>    <span class="hljs-attribute">with</span> torch.no_grad():<br>        <span class="hljs-attribute">output</span>=model(input_data)<br>        <span class="hljs-attribute">pre</span>=output.max(<span class="hljs-number">1</span>,keepdim=True)[<span class="hljs-number">1</span>]<br>    <span class="hljs-attribute">print</span>(pre)<br>    <span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;1&quot;</span>, image)<br>    <span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">cv2</span>.destroyAllWindows()<br><br><br>    <span class="hljs-comment">#参数更新</span><br><br>    <span class="hljs-comment">#保存模型</span><br>    <span class="hljs-attribute">pass</span><br><br><span class="hljs-attribute">if</span> __name__ == &#x27;__main__&#x27;:<br>    <span class="hljs-attribute">model</span>=model.DNN(<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    <span class="hljs-attribute">ckpt</span>=torch.load(<span class="hljs-string">&quot;dnn_best.path&quot;</span>)<br>    <span class="hljs-attribute">model</span>.load_state_dict(ckpt,strict=True)<br>    <span class="hljs-attribute">print</span>(model)<br>    <span class="hljs-attribute">infer</span>(model,<span class="hljs-string">&quot;data/dataset/eval/1/1_0.jpg&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="AlextNet"><a href="#AlextNet" class="headerlink" title="AlextNet"></a>AlextNet</h3><p><img src="/../../pic/pyTorchAlextnet.png" alt="image-20230312150121641"></p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习 python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视觉</title>
    <link href="/2023/03/03/shi-jue/"/>
    <url>/2023/03/03/shi-jue/</url>
    
    <content type="html"><![CDATA[<h1 id="视觉方向实践-用sift算法特征提取并完成匹配"><a href="#视觉方向实践-用sift算法特征提取并完成匹配" class="headerlink" title="视觉方向实践-用sift算法特征提取并完成匹配"></a>视觉方向实践-用sift算法特征提取并完成匹配</h1><h2 id="简易的前端制作"><a href="#简易的前端制作" class="headerlink" title="简易的前端制作"></a>简易的前端制作</h2><h3 id="用Qt写一个简单的界面"><a href="#用Qt写一个简单的界面" class="headerlink" title="用Qt写一个简单的界面"></a>用Qt写一个简单的界面</h3><h3 id="将ui转化为py"><a href="#将ui转化为py" class="headerlink" title="将ui转化为py"></a>将ui转化为py</h3><p>先安装pyqt5</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install pyqt<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>用Qt做完ui后，将ui文件转换为py文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pyuic5</span> -o xxx.py xxx.ui<br></code></pre></td></tr></table></figure><p>获得py 文件后 ，在main 文件中写以下代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">import sys<br>import sys<br>from PyQt5.QtWidgets import *<br>from PyQt5.QtCore import QObject<br><br>from vision_ui import *<span class="hljs-comment">#引用ui界面</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = QtWidgets.QApplication(sys.argv)<br><br>    <span class="hljs-comment">#初始化一个窗口</span><br>    widgets = QtWidgets.QMainWindow()<br>    <span class="hljs-comment">#初始化写好的ui</span><br>    ui = Ui_MainWindow()<br>    <span class="hljs-comment">#将ui赋值给窗口</span><br>    ui.setupUi(widgets)<br>    widgets.show()<br>    sys.<span class="hljs-keyword">exit</span>(app.exec_())<br><br></code></pre></td></tr></table></figure><h3 id="关于槽函数"><a href="#关于槽函数" class="headerlink" title="关于槽函数"></a>关于槽函数</h3><p>和qt里面的槽函数 用法基本相同</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">self</span>.pushButton_SelectPic.clicked.connect(<span class="hljs-keyword">self</span>.ClickOn_SelectPic)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ClickOn_SelectPic</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>:<br><span class="hljs-keyword">self</span>.sift.imgname1=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getOpenFileNames(<br>          None,<span class="hljs-string">&quot;选取文件&quot;</span>,<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;All Files (*);;Image(*.jpg *.png)&quot;</span><br>      )[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>需要引用库</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br></code></pre></td></tr></table></figure><h3 id="vision-ui-py-的代码"><a href="#vision-ui-py-的代码" class="headerlink" title="vision_ui.py 的代码"></a>vision_ui.py 的代码</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Form implementation generated from reading ui file &#x27;mainwindow.ui&#x27;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Created by: PyQt5 UI code generator 5.15.9</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><br><span class="hljs-comment"># run again.  Do not edit this file unless you know what you are doing.</span><br>import cv2<br><span class="hljs-keyword">from</span> PyQt5 import QtCore, QtGui, QtWidgets<br>import sift<br><br>class Ui_MainWindow(object):<br>    def setupUi(<span class="hljs-literal">self</span>, MainWindow):<br>        MainWindow.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;MainWindow&quot;</span>)<br>        MainWindow.resize(<span class="hljs-number">1004</span>, <span class="hljs-number">660</span>)<br>        <span class="hljs-literal">self</span>.centralwidget = QtWidgets.QWidget(MainWindow)<br>        <span class="hljs-literal">self</span>.centralwidget.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;centralwidget&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">390</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_SelectPic&quot;</span>)<br>        <span class="hljs-literal">self</span>.textEdit = QtWidgets.QTextEdit(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.textEdit.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">450</span>, <span class="hljs-number">361</span>))<br>        <span class="hljs-literal">self</span>.textEdit.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;textEdit&quot;</span>)<br>        <span class="hljs-literal">self</span>.textEdit_2 = QtWidgets.QTextEdit(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.textEdit_2.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">520</span>, <span class="hljs-number">20</span>, <span class="hljs-number">450</span>, <span class="hljs-number">361</span>))<br>        <span class="hljs-literal">self</span>.textEdit_2.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;textEdit_2&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_Sift = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">420</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_Sift&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">450</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_SelectDirectory&quot;</span>)<br>        <span class="hljs-literal">self</span>.pushButton_matching = QtWidgets.QPushButton(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">480</span>, <span class="hljs-number">121</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;pushButton_matching&quot;</span>)<br>        <span class="hljs-literal">self</span>.label_match = QtWidgets.QLabel(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">40</span>, <span class="hljs-number">550</span>, <span class="hljs-number">61</span>, <span class="hljs-number">16</span>))<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;label_match&quot;</span>)<br>        <span class="hljs-literal">self</span>.label_matchtime = QtWidgets.QLabel(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">100</span>, <span class="hljs-number">550</span>, <span class="hljs-number">81</span>, <span class="hljs-number">16</span>))<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;label_matchtime&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>CentralWidget(<span class="hljs-literal">self</span>.centralwidget)<br>        <span class="hljs-literal">self</span>.menubar = QtWidgets.QMenuBar(MainWindow)<br>        <span class="hljs-literal">self</span>.menubar.<span class="hljs-built_in">set</span>Geometry(QtCore.QRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1004</span>, <span class="hljs-number">23</span>))<br>        <span class="hljs-literal">self</span>.menubar.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;menubar&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>MenuBar(<span class="hljs-literal">self</span>.menubar)<br>        <span class="hljs-literal">self</span>.statusbar = QtWidgets.QStatusBar(MainWindow)<br>        <span class="hljs-literal">self</span>.statusbar.<span class="hljs-built_in">set</span>ObjectName(<span class="hljs-string">&quot;statusbar&quot;</span>)<br>        MainWindow.<span class="hljs-built_in">set</span>StatusBar(<span class="hljs-literal">self</span>.statusbar)<br><br>        <span class="hljs-literal">self</span>.sift=sift.Sift_AI()<br><br>        <span class="hljs-literal">self</span>.retranslateUi(MainWindow)<br><br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_SelectPic)<br>        <span class="hljs-literal">self</span>.pushButton_Sift.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_Sift)<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_SelectDirectory)<br>        <span class="hljs-literal">self</span>.pushButton_matching.clicked.connect(<span class="hljs-literal">self</span>.ClickOn_Matching)<br>        QtCore.QMetaObject.connectSlotsByName(MainWindow)<br>    def ClickOn_SelectPic(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.imgname1=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getOpenFileNames(<br>            None,<span class="hljs-string">&quot;选取文件&quot;</span>,<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;All Files (*);;Image(*.jpg *.png)&quot;</span><br>        )[<span class="hljs-number">0</span>])<br>        <span class="hljs-literal">self</span>.textEdit.append(<span class="hljs-string">&quot;&lt;img src=%s&gt;&quot;</span>%(<span class="hljs-literal">self</span>.sift.imgname1))<br>    def ClickOn_Sift(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.Sift_feature_transform()<br>    def ClickOn_SelectDirectory(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.DirPath=<span class="hljs-string">&quot;&quot;</span>.join(QtWidgets.QFileDialog.getExistingDirectory(<br>            None,<span class="hljs-string">&quot;选取文件夹&quot;</span>,<span class="hljs-string">&quot;./&quot;</span><br>        ))+<span class="hljs-string">&quot;/&quot;</span><br>        print(<span class="hljs-literal">self</span>.sift.DirPath)<br>    def ClickOn_Matching(<span class="hljs-literal">self</span>):<br>        <span class="hljs-literal">self</span>.sift.all_pic=[]<br>        <span class="hljs-literal">self</span>.sift.get_all_pic(<span class="hljs-literal">self</span>.sift.DirPath,<span class="hljs-literal">self</span>.sift.all_pic)<br>        print(<span class="hljs-literal">self</span>.sift.all_pic)<br>        comparisonImageList=<span class="hljs-literal">self</span>.sift.sift_fun(<span class="hljs-literal">self</span>.sift.all_pic)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>            cv2.imshow(<span class="hljs-string">&quot;%d&quot;</span>%i,comparisonImageList[i][<span class="hljs-number">0</span>])<br>            <span class="hljs-literal">self</span>.textEdit_2.append(<span class="hljs-string">&quot;&lt;img src=%s&gt;&quot;</span>%comparisonImageList[i][<span class="hljs-number">2</span>])<br><br>    def retranslateUi(<span class="hljs-literal">self</span>, MainWindow):<br>        _translate = QtCore.QCoreApplication.translate<br>        MainWindow.<span class="hljs-built_in">set</span>WindowTitle(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;MainWindow&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectPic.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;选择图片&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_Sift.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;sift提取特征&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_SelectDirectory.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;选择待匹配图像目录&quot;</span>))<br>        <span class="hljs-literal">self</span>.pushButton_matching.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;匹配&quot;</span>))<br>        <span class="hljs-literal">self</span>.label_match.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;匹配时间:&quot;</span>))<br>        <span class="hljs-literal">self</span>.label_matchtime.<span class="hljs-built_in">set</span>Text(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br><br></code></pre></td></tr></table></figure><h3 id="生产exe文件"><a href="#生产exe文件" class="headerlink" title="生产exe文件"></a>生产exe文件</h3><p>在pycharm终端输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">pyinstaller -F -w <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><h2 id="sift-算法"><a href="#sift-算法" class="headerlink" title="sift 算法"></a>sift 算法</h2><h3 id="sift算法特点"><a href="#sift算法特点" class="headerlink" title="sift算法特点"></a>sift算法特点</h3><p>不变性：对旋转和尺度变化具有不变性；对三维视角变化和光照变化具有适应性；局部特征，在遮挡和场景杂乱时保持不变性；</p><p>辨别力强：特征之间相互区分的能力强，有利于匹配</p><p>数量较多：一般500*500的图像能提取约2000个特征点</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>•构建尺度空间</p><p>•构造高斯差分尺度空间</p><p>•DoG尺度空间极值点检测</p><p>•特征点精确定位</p><p>•去除不稳定点</p><p><img src="/2023/03/03/shi-jue/image-20230303162347221.png" alt="sift流程"></p><h3 id="sift-py的代码"><a href="#sift-py的代码" class="headerlink" title="sift.py的代码"></a>sift.py的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">import</span> glob<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sift_AI</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.imgname1=<span class="hljs-string">&#x27;D:/vision/PY/resources/test/A0C573/A0C573_20151103073308_3029240562.jpg&#x27;</span><br>        self.imgname2=<span class="hljs-string">&#x27;D:/vision/PY/resources/test/A0C573/A0C573_20151103074304_6595543738.jpg&#x27;</span><br>        self.sift=cv2.SIFT_create()<br>        self.time=<span class="hljs-number">0</span><br>        self.DirPath=<span class="hljs-string">&#x27;./&#x27;</span><br>        self.all_pic=[]<br>        self.des1=<span class="hljs-number">0</span><br>        self.kp1=<span class="hljs-number">0</span><br>        self.sampleImage=<span class="hljs-number">0</span><br>        self.FLANN_INDEX_KDTREE = <span class="hljs-number">0</span><br><span class="hljs-comment">#提取特征值</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Sift_feature_transform</span>(<span class="hljs-params">self</span>):</span><br>        self.sampleImage= cv2.imread(self.imgname1)<br>        gray1 = cv2.cvtColor(self.sampleImage, cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 灰度处理图像</span><br><br>        self.kp1, self.des1 = self.sift.detectAndCompute(self.sampleImage, <span class="hljs-literal">None</span>)  <span class="hljs-comment"># kp1是特征点 des是描述子</span><br><br>        img_feature = cv2.drawKeypoints(self.sampleImage, self.kp1, self.sampleImage, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>))  <span class="hljs-comment"># 画出特征点，并显示为红色圆圈</span><br>        cv2.imshow(<span class="hljs-string">&quot;point&quot;</span>,img_feature)<br>        cv2.waitKey(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMatchNum</span>(<span class="hljs-params">self,matches, ratio</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回特征点匹配数量和匹配掩码&#x27;&#x27;&#x27;</span><br>        matchesMask = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matches))]<br>        matchNum = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, (m, n) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(matches):<br>            <span class="hljs-keyword">if</span> m.distance &lt; ratio * n.distance:  <span class="hljs-comment"># 将距离比率小于ratio的匹配点删选出来</span><br>                matchesMask[i] = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>                matchNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> (matchNum, matchesMask)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_pic</span>(<span class="hljs-params">self,path,all_files=[]</span>):</span><br>        filelist1=<span class="hljs-built_in">sorted</span>(os.listdir(path))<br>        <span class="hljs-keyword">for</span> file1 <span class="hljs-keyword">in</span> filelist1:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.isdir(path+file1)):<br>                <span class="hljs-keyword">if</span>(file1.endswith((<span class="hljs-string">&#x27;.jpg&#x27;</span>,<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&quot;.png&quot;</span>))):<br>                    all_files.append(path+file1)<br>            <span class="hljs-keyword">else</span>:<br>            self.get_all_pic(path+file1+<span class="hljs-string">&quot;/&quot;</span>,all_files)<br>  <span class="hljs-comment">#用于匹配最合适的图像</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift_fun</span>(<span class="hljs-params">self,all_P=[]</span>) :</span><br>        comparisonImageList=[]<br>        indexParams = <span class="hljs-built_in">dict</span>(algorithm=self.FLANN_INDEX_KDTREE, trees=<span class="hljs-number">5</span>)<br>        searchParams = <span class="hljs-built_in">dict</span>(checks=<span class="hljs-number">50</span>)<br>        flann = cv2.FlannBasedMatcher(indexParams, searchParams)<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> all_P:<br>            img = cv2.imread(p)<br>            gray2 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 灰度处理图像</span><br>            kp2, des2 = self.sift.detectAndCompute(gray2, <span class="hljs-literal">None</span>)  <span class="hljs-comment"># des是描述子</span><br>            matches= flann.knnMatch(self.des1,des2,k=<span class="hljs-number">2</span>)<span class="hljs-comment">#匹配特征点，为了删选匹配点，指定k为2，这样对样本图的每个特征点，返回两个匹配</span><br>            (matchNum, matchesMask) = self.getMatchNum(matches, <span class="hljs-number">0.9</span>) <span class="hljs-comment">#通过比率条件，计算出匹配程度</span><br>            matchRatio = matchNum * <span class="hljs-number">100</span> / <span class="hljs-built_in">len</span>(matches)<br>            drawParams = <span class="hljs-built_in">dict</span>(matchColor=(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>),<br>                              singlePointColor=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>                              matchesMask=matchesMask,<br>                              flags=<span class="hljs-number">0</span>)<br>            comparisonImage = cv2.drawMatchesKnn(self.sampleImage, self.kp1, img, kp2, matches, <span class="hljs-literal">None</span>, **drawParams)<br>            comparisonImageList.append((comparisonImage, matchRatio,p))  <span class="hljs-comment"># 记录下结果</span><br>        comparisonImageList.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> comparisonImageList<br></code></pre></td></tr></table></figure><h2 id="Surf算法"><a href="#Surf算法" class="headerlink" title="Surf算法"></a>Surf算法</h2><h2 id="生成码本"><a href="#生成码本" class="headerlink" title="生成码本"></a>生成码本</h2><p>K-means聚类算法流程(调用sklearn库的KMeans方法)：</p><p>随机初始化 K 个聚类中心</p><p>重复下述2个步骤直至算法收敛</p><p>对应每个特征，根据距离关系赋值给某个中心/类别</p><p>对每个类别，根据其对应的特征集重新计算聚类中心</p><p>得到的聚类中心就是视觉词典</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json_C</title>
    <link href="/2023/02/26/json-c/"/>
    <url>/2023/02/26/json-c/</url>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在GitHub上找来练手的项目</p><p>在这里记录一下自己的路上遇到的难点和知识吧</p><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><h3 id="Cmake创建项目-windows"><a href="#Cmake创建项目-windows" class="headerlink" title="Cmake创建项目(windows)"></a>Cmake创建项目(windows)</h3><p><img src="/2023/03/03/shi-jue/image-20230309142607715.png" alt="image-20230309142607715"></p><p><img src="/../../pic/json_c.png" alt="image-20230309143021107"></p><p>将这个设立为 启动项</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>一般来说，软件开发是以周期进行，加入一个功能，再写关于该功能的单元测试。但也有另一种软件开发方法论，称为测试驱动开发（test-driven development, TDD），它的主要循环步骤是：</p><ol><li>加入一个测试。</li><li>运行所有测试，新的测试应该会失败。</li><li>编写实现代码。</li><li>运行所有测试，若有测试失败回到3。</li><li>重构代码。</li><li>回到 1。</li></ol><p>TDD 是先写测试，再实现功能。好处是实现只会刚好满足测试，而不会写了一些不需要的代码，或是没有被测试的代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">#define EXPECT_EQ_BASE(equality, <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>, format) \<br>    <span class="hljs-keyword">do</span> &#123;\<br>        test_count++;\<br>        <span class="hljs-keyword">if</span> (equality)\<br>            test_pass++;\<br>        <span class="hljs-keyword">else</span> &#123;\<br>            fprintf(stderr, <span class="hljs-string">&quot;%s:%d: expect: &quot;</span> format <span class="hljs-string">&quot; actual: &quot;</span> format <span class="hljs-string">&quot;\n&quot;</span>, __FILE__, __LINE__, <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>);\<br>            main_ret = <span class="hljs-number">1</span>;\<br>        &#125;\<br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br>#define EXPECT_EQ_INT(<span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>) EXPECT_EQ_BASE((<span class="hljs-keyword">expect</span>) == (<span class="hljs-keyword">actual</span>), <span class="hljs-keyword">expect</span>, <span class="hljs-keyword">actual</span>, <span class="hljs-string">&quot;%d&quot;</span>)<br></code></pre></td></tr></table></figure><p>简单例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static void test<span class="hljs-constructor">_parse_null()</span> &#123;<br>    lept_value v;<br>    v.<span class="hljs-keyword">type</span> = LEPT_FALSE;<br>    <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_PARSE_OK, <span class="hljs-params">lept_parse</span>(&amp;<span class="hljs-params">v</span>, <span class="hljs-string">&quot;null&quot;</span>)</span>);<br>    <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_NULL, <span class="hljs-params">lept_get_type</span>(&amp;<span class="hljs-params">v</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><h3 id="简化单元测试"><a href="#简化单元测试" class="headerlink" title="简化单元测试"></a>简化单元测试</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#define <span class="hljs-constructor">TEST_ERROR(<span class="hljs-params">error</span>, <span class="hljs-params">json</span>)</span>\<br>    <span class="hljs-keyword">do</span> &#123;\<br>        lept_value v;\<br>        v.<span class="hljs-keyword">type</span> = LEPT_FALSE;\<br>        <span class="hljs-constructor">EXPECT_EQ_INT(<span class="hljs-params">error</span>, <span class="hljs-params">lept_parse</span>(&amp;<span class="hljs-params">v</span>, <span class="hljs-params">json</span>)</span>);\<br>        <span class="hljs-constructor">EXPECT_EQ_INT(LEPT_NULL, <span class="hljs-params">lept_get_type</span>(&amp;<span class="hljs-params">v</span>)</span>);\<br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br>static void test<span class="hljs-constructor">_parse_expect_value()</span> &#123;<br>    <span class="hljs-constructor">TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot;&quot;</span>)</span>;<br>    <span class="hljs-constructor">TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot; &quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="number-解析"><a href="#number-解析" class="headerlink" title="number 解析"></a>number 解析</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span>   <span class="hljs-comment">/* errno, ERANGE */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span>    <span class="hljs-comment">/* HUGE_VAL */</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lept_parse_number</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>* end;<br>    <span class="hljs-comment">/* \TODO validate number */</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p = c-&gt;json;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;-&#x27;</span>)p++;<span class="hljs-comment">// -号</span><br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;0&#x27;</span>)p++;<span class="hljs-comment">//整数部分</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT1TO9</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;.&#x27;</span>)<br>    &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;e&#x27;</span> || *p == <span class="hljs-string">&#x27;E&#x27;</span>)<br>    &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;+&#x27;</span> || *p == <span class="hljs-string">&#x27;-&#x27;</span>)p++;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">ISDIGIT</span>(*p))<span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">ISDIGIT</span>(*p))<br>            p++;<br><br>    &#125;<br>    errno = <span class="hljs-number">0</span>;<br>    v-&gt;n = <span class="hljs-built_in">strtod</span>(c-&gt;json, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (errno == ERANGE &amp;&amp; v-&gt;n == HUGE_VAL)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_NUMBER_TOO_BIG;<br>    c-&gt;json = p;<br>    v-&gt;type = LEPT_NUMBER;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>errno 用于判断是否有溢出 ，当溢出后 errno==ERANGE</p><table><thead><tr><th align="left">&lt;math.h&gt; 常量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">HUGE_VALF</td><td align="left">扩展为表示溢出的正浮点表达式</td></tr><tr><td align="left">HUGE_VAL</td><td align="left">扩展为表示溢出的正数双表达式，不一定表示为浮点数</td></tr><tr><td align="left">HUGE_VALL</td><td align="left">扩展为正数long double表达式，表示溢出，不一定表示为float或double</td></tr></tbody></table><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="字符串内存管理"><a href="#字符串内存管理" class="headerlink" title="字符串内存管理"></a>字符串内存管理</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>new 申请</p><p>delete 释放</p><h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><p><code>&lt;stdlib.h&gt;</code> 中的 <code>malloc()</code>、<code>realloc()</code> 和 <code>free()</code> 来分配／释放内存。</p><h4 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h4><table><thead><tr><th>new关键字是C++的一部分</th><th>malloc是由C库提供的函数</th></tr></thead><tbody><tr><td>new以具体类型为单位进行内存分配</td><td>malloc以字节为单位进行内存分配</td></tr><tr><td>new在申请单个类型变量时可进行初始化</td><td>malloc不具备内存初始化的特性</td></tr></tbody></table><h3 id="缓冲区和堆栈"><a href="#缓冲区和堆栈" class="headerlink" title="缓冲区和堆栈"></a>缓冲区和堆栈</h3><p>​    解析字符串（以及之后的数组、对象）时，需要把解析的结果先储存在一个临时的缓冲区，最后再用 <code>lept_set_string()</code> 把缓冲区的结果设进值之中。在完成解析一个字符串之前，这个缓冲区的大小是不能预知的。因此，我们可以采用动态数组（dynamic array）这种数据结构，即数组空间不足时，能自动扩展。C++ 标准库的 <code>std::vector</code> 也是一种动态数组。</p><p>​    如果每次解析字符串时，都重新建一个动态数组，那么是比较耗时的。我们可以重用这个动态数组，每次解析 JSON 时就只需要创建一个。而且我们将会发现，无论是解析字符串、数组或对象，我们也只需要以先进后出的方式访问这个动态数组。换句话说，我们需要一个动态的堆栈（stack）数据结构。</p><p>​    创建一个动态堆栈</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* json;<br>    <span class="hljs-keyword">char</span>* stack;<br>    <span class="hljs-keyword">size_t</span> size, top;<br>&#125;lept_context;<br></code></pre></td></tr></table></figure><p><code>size</code>是堆栈容量</p><p><code>top</code> 是栈顶的位置</p><p>释放的时候要把全部弹出</p><p>因为该堆栈以字节储存，可压入任意字节数量的内存 （参考 <a href="https://zhuanlan.zhihu.com/p/20029820">RapidJSON 代码剖析（一）：混合任意类型的堆栈</a>）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PUTC(c, ch)         do &#123; *(char*)lept_context_push(c, sizeof(char)) = (ch); &#125; while(0)</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LEPT_PARSE_STACK_INIT_SIZE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEPT_PARSE_STACK_INIT_SIZE 256</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>* <span class="hljs-title">lept_context_push</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">void</span>* ret;<br>    <span class="hljs-built_in">assert</span>(size &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;top + size &gt;= c-&gt;size) &#123;<br>        <span class="hljs-keyword">if</span> (c-&gt;size == <span class="hljs-number">0</span>)<br>            c-&gt;size = LEPT_PARSE_STACK_INIT_SIZE;<br>        <span class="hljs-keyword">while</span> (c-&gt;top + size &gt;= c-&gt;size)<br>            c-&gt;size += c-&gt;size &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">/* c-&gt;size * 1.5 */</span><br>        c-&gt;stack = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">realloc</span>(c-&gt;stack, c-&gt;size);<br>    &#125;<br>    ret = c-&gt;stack + c-&gt;top;<br>    c-&gt;top += size;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>* <span class="hljs-title">lept_context_pop</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(c-&gt;top &gt;= size);<br>    <span class="hljs-keyword">return</span> c-&gt;stack + (c-&gt;top -= size);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1A-Windows-下的内存泄漏检测方法"><a href="#1A-Windows-下的内存泄漏检测方法" class="headerlink" title="1A. Windows 下的内存泄漏检测方法"></a>1A. Windows 下的内存泄漏检测方法</h4><p>在 Windows 下，可使用 Visual C++ 的 <a href="https://msdn.microsoft.com/zh-cn/library/x98tx3cf.aspx">C Runtime Library（CRT） 检测内存泄漏</a>。</p><p>首先，我们在两个 .c 文件首行插入这一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WINDOWS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRTDBG_MAP_ALLOC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;crtdbg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>并在 <code>main()</code> 开始位置插入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WINDOWS</span><br>    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在 Debug 配置下按 F5 生成、开始调试程序，没有任何异样。</p><p>然后，我们删去 <code>lept_set_boolean()</code> 中的 <code>lept_free(v)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lept_set_boolean</span><span class="hljs-params">(lept_value* v, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">/* lept_free(v); */</span><br>    v-&gt;type = b ? LEPT_TRUE : LEPT_FALSE;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次按 F5 生成、开始调试程序，在输出会看到内存泄漏信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Detected</span> memory leaks!<br><span class="hljs-attribute">Dumping</span> objects -&gt;<br><span class="hljs-attribute">C</span>:\GitHub\json-tutorial\tutorial<span class="hljs-number">03</span>_answer\leptjson.c(<span class="hljs-number">212</span>) : &#123;<span class="hljs-number">79</span>&#125; normal block at <span class="hljs-number">0</span>x<span class="hljs-number">013</span>D<span class="hljs-number">9868</span>, <span class="hljs-number">2</span> bytes long.<br> <span class="hljs-attribute">Data</span>: &lt;a &gt; <span class="hljs-number">61</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">Object</span> dump complete.<br></code></pre></td></tr></table></figure><p>这正是我们在单元测试中，先设置字符串，然后设布尔值时没释放字符串所分配的内存。比较麻烦的是，它没有显示调用堆栈。从输出信息中 <code>... &#123;79&#125; ...</code> 我们知道是第 79 次分配的内存做成问题，我们可以加上 <code>_CrtSetBreakAlloc(79);</code> 来调试，那么它便会在第 79 次时中断于分配调用的位置，那时候就能从调用堆栈去找出来龙去脉。</p><h4 id="1B-Linux-OSX-下的内存泄漏检测方法"><a href="#1B-Linux-OSX-下的内存泄漏检测方法" class="headerlink" title="1B. Linux/OSX 下的内存泄漏检测方法"></a>1B. Linux/OSX 下的内存泄漏检测方法</h4><p>在 Linux、OS X 下，我们可以使用 <a href="https://valgrind.org/">valgrind</a> 工具（用 <code>apt-get install valgrind</code>、 <code>brew install valgrind</code>）。我们完全不用修改代码，只要在命令行执行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$ valgrind --leak-check=full  ./leptjson_test<br>==<span class="hljs-number">22078</span>== Memcheck, a memory error detector<br>==<span class="hljs-number">22078</span>== Copyright (C) <span class="hljs-number">2002</span>-<span class="hljs-number">2015</span>, and GNU GPL&#x27;d, by Julian Seward et al.<br>==<span class="hljs-number">2207</span>8== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info<br>==<span class="hljs-number">2207</span>8== Command: ./leptjson_test<br>==<span class="hljs-number">2207</span>8== <br>--<span class="hljs-number">2207</span>8-- run: /usr/bin/dsymutil &quot;./leptjson_test&quot;<br>160/160 (100.00%) passed<br>==<span class="hljs-number">2207</span>8== <br>==<span class="hljs-number">2207</span>8== HEAP SUMMARY:<br>==<span class="hljs-number">2207</span>8==     in use at exit: 27,728 bytes in 209 blocks<br>==<span class="hljs-number">2207</span>8==   total heap usage: 301 allocs, 92 frees, 34,966 bytes allocated<br>==<span class="hljs-number">2207</span>8== <br>==<span class="hljs-number">2207</span>8== 2 bytes in 1 blocks are definitely lost in loss record 1 of 79<br>==<span class="hljs-number">2207</span>8==    at 0x<span class="hljs-number">100012</span>EBB: malloc (in /usr/local/Cellar/valgrind/3.11.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">100008</span>F36: lept_set_string (leptjson.c:208)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">10000841</span>5: test_access_boolean (test.c:187)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">10000184</span>9: test_parse (test.c:229)<br>==<span class="hljs-number">2207</span>8==    by 0x<span class="hljs-number">100001</span>7A3: main (test.c:235)<br>==<span class="hljs-number">2207</span>8== <br>...<br></code></pre></td></tr></table></figure><p>它发现了在 <code>test_access_boolean()</code> 中，由 <code>lept_set_string()</code> 分配的 2 个字节（<code>&quot;a&quot;</code>）泄漏了。</p><p>Valgrind 还有很多功能，例如可以发现未初始化变量。我们若在应用程序或测试程序中，忘了调用 <code>lept_init(&amp;v)</code>，那么 <code>v.type</code> 的值没被初始化，其值是不确定的（indeterministic），一些函数如果读取那个值就会出现问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_access_boolean</span><span class="hljs-params">()</span> </span>&#123;<br>    lept_value v;<br>    <span class="hljs-comment">/* lept_init(&amp;v); */</span><br>    lept_set_string(&amp;v, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这种错误有时候测试时能正确运行（刚好 <code>v.type</code> 被设为 <code>0</code>），使我们误以为程序正确，而在发布后一些机器上却可能崩溃。这种误以为正确的假像是很危险的，我们可利用 valgrind 能自动测出来：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ valgrind <span class="hljs-attribute">--leak-check</span>=full  ./leptjson_test<br><span class="hljs-built_in">..</span>.<br>==<span class="hljs-attribute">22174</span>== Conditional jump <span class="hljs-keyword">or</span> move depends on uninitialised value(s)<br>==<span class="hljs-attribute">22174</span>==    at 0x100008B5D: lept_free (leptjson.c:164)<br>==<span class="hljs-attribute">22174</span>==    by 0x100008F26: lept_set_string (leptjson.c:207)<br>==<span class="hljs-attribute">22174</span>==    by 0x1000083FE: test_access_boolean (test.c:187)<br>==<span class="hljs-attribute">22174</span>==    by 0x100001839: test_parse (test.c:229)<br>==<span class="hljs-attribute">22174</span>==    by 0x100001793: main (test.c:235)<br>==<span class="hljs-attribute">22174</span>== <br></code></pre></td></tr></table></figure><p>它发现 <code>lept_free()</code> 中依靠了一个未初始化的值来跳转，就是 <code>v.type</code>，而错误是沿自 <code>test_access_boolean()</code>。</p><p>编写单元测试时，应考虑哪些执行次序会有机会出错，例如内存相关的错误。然后我们可以利用 TDD 的步骤，先令测试失败（以内存工具检测），修正代码，再确认测试是否成功。</p><h3 id="解析字符串"><a href="#解析字符串" class="headerlink" title="解析字符串"></a>解析字符串</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> lept_parse_string(lept_context* c, lept_value* v) &#123;<br>    size_t head = c-&gt;top, len;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p;<br>    EXPECT(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>);<br>    p = c-&gt;json;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">char</span> ch = *p++;<br>        <span class="hljs-keyword">switch</span> (ch) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>:<br>            <span class="hljs-keyword">switch</span> (*p++) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>: PUTC(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>: PUTC(c, <span class="hljs-string">&#x27;\\&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;/&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\b&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\f&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\n&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\r&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:  PUTC(c, <span class="hljs-string">&#x27;\t&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                c-&gt;top = head;<br>                <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_STRING_ESCAPE;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>:<br>            len = c-&gt;top - head;<br>            lept_set_string(v, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*)lept_context_pop(c, len), len);<br>            c-&gt;json = p;<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>            c-&gt;top = head;<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_MISS_QUOTATION_MARK;<br>        <span class="hljs-keyword">default</span>: <br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)ch &lt; <span class="hljs-number">0x20</span>) <br>            &#123;<br>                c-&gt;top = head;<br>                <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_STRING_CHAR;<br>            &#125;<br>            PUTC(c, ch);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><h3 id="uft-8编码"><a href="#uft-8编码" class="headerlink" title="uft-8编码"></a>uft-8编码</h3><p>UTF-8 的编码单元为 8 位（1 字节），每个码点编码成 1 至 4 个字节。它的编码方式很简单，按照码点的范围，把码点的二进位分拆成 1 至最多 4 个字节：</p><table><thead><tr><th align="center">码点范围</th><th align="center">码点位数</th><th align="center">字节1</th><th align="center">字节2</th><th align="center">字节3</th><th align="center">字节4</th></tr></thead><tbody><tr><td align="center">U+0000 ~ U+007F</td><td align="center">7</td><td align="center">0xxxxxxx</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">U+0080 ~ U+07FF</td><td align="center">11</td><td align="center">110xxxxx</td><td align="center">10xxxxxx</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">U+0800 ~ U+FFFF</td><td align="center">16</td><td align="center">1110xxxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td><td align="center"></td></tr><tr><td align="center">U+10000 ~ U+10FFFF</td><td align="center">21</td><td align="center">11110xxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td><td align="center">10xxxxxx</td></tr></tbody></table><p>这个编码方法的好处之一是，码点范围 U+0000 ~ U+007F 编码为一个字节，与 ASCII 编码兼容。这范围的 Unicode 码点也是和 ASCII 字符相同的。因此，一个 ASCII 文本也是一个 UTF-8 文本。</p><p>我们举一个例子解析多字节的情况，欧元符号 <code>€</code> → U+20AC：</p><ol><li>U+20AC 在 U+0800 ~ U+FFFF 的范围内，应编码成 3 个字节。</li><li>U+20AC 的二进位为 10000010101100</li><li>3 个字节的情况我们要 16 位的码点，所以在前面补两个 0，成为 0010000010101100</li><li>按上表把二进位分成 3 组：0010, 000010, 101100</li><li>加上每个字节的前缀：11100010, 10000010, 10101100</li><li>用十六进位表示即：0xE2, 0x82, 0xAC</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static const <span class="hljs-built_in">char</span>* lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">p</span>, <span class="hljs-params">unsigned</span><span class="hljs-operator">*</span> <span class="hljs-params">u</span>)</span> &#123;<span class="hljs-comment">//用于转换</span><br>    <span class="hljs-comment">/* \TODO */</span><br>    *u = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">char</span> ch = *p++;<br>        *u &lt;&lt;= <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-character">&#x27;0&#x27;</span><span class="hljs-operator"> &amp;&amp; </span>ch &lt;= <span class="hljs-character">&#x27;9&#x27;</span>)  *u <span class="hljs-pattern-match">|= ch - &#x27;0&#x27;;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;<span class="hljs-constructor">A</span>&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;<span class="hljs-constructor">F</span>&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;<span class="hljs-constructor">A</span>&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;a&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;f&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;a&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> return <span class="hljs-constructor">NULL</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return p;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">static void lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">u</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> \<span class="hljs-constructor">TODO</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">F</span>)</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, <span class="hljs-params">u</span> &amp; 0xFF)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">FF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xC0 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x<span class="hljs-constructor">FFFF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xE0 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">assert</span>(u &lt;= 0x10<span class="hljs-constructor">FFFF</span>);</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xF0 | ((<span class="hljs-params">u</span> &gt;&gt; 18)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br></code></pre></td></tr></table></figure><h3 id="代理对"><a href="#代理对" class="headerlink" title="代理对"></a>代理对</h3><p>其实，U+0000 至 U+FFFF 这组 Unicode 字符称为基本多文种平面（basic multilingual plane, BMP），还有另外 16 个平面。那么 BMP 以外的字符，JSON 会使用代理对（surrogate pair）表示 <code>\uXXXX\uYYYY</code>。在 BMP 中，保留了 2048 个代理码点。如果第一个码点是 U+D800 至 U+DBFF，我们便知道它的代码对的高代理项（high surrogate），之后应该伴随一个 U+DC00 至 U+DFFF 的低代理项（low surrogate）。然后，我们用下列公式把代理对 (H, L) 变换成真实的码点：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">codepoint</span> = <span class="hljs-number">0</span>x<span class="hljs-number">10000</span> + (H − <span class="hljs-number">0</span>xD<span class="hljs-number">800</span>) × <span class="hljs-number">0</span>x<span class="hljs-number">400</span> + (L − <span class="hljs-number">0</span>xDC<span class="hljs-number">00</span>)<br></code></pre></td></tr></table></figure><p>举个例子，高音谱号字符 <code>𝄞</code> → U+1D11E 不是 BMP 之内的字符。在 JSON 中可写成转义序列 <code>\uD834\uDD1E</code>，我们解析第一个 <code>\uD834</code> 得到码点 U+D834，我们发现它是 U+D800 至 U+DBFF 内的码点，所以它是高代理项。然后我们解析下一个转义序列 <code>\uDD1E</code> 得到码点 U+DD1E，它在 U+DC00 至 U+DFFF 之内，是合法的低代理项。我们计算其码点：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">H = <span class="hljs-number">0xD834</span>, L = <span class="hljs-number">0xDD1E</span><br>codepoint = <span class="hljs-number">0x10000</span> + (H − <span class="hljs-number">0xD800</span>) × <span class="hljs-number">0x400</span> + (L − <span class="hljs-number">0xDC00</span>)<br>          = <span class="hljs-number">0x10000</span> + (<span class="hljs-number">0xD834</span> - <span class="hljs-number">0xD800</span>) × <span class="hljs-number">0x400</span> + (<span class="hljs-number">0xDD1E</span> − <span class="hljs-number">0xDC00</span>)<br>          = <span class="hljs-number">0x10000</span> + <span class="hljs-number">0x34</span> × <span class="hljs-number">0x400</span> + <span class="hljs-number">0x11E</span><br>          = <span class="hljs-number">0x10000</span> + <span class="hljs-number">0xD000</span> + <span class="hljs-number">0x11E</span><br>          = <span class="hljs-number">0x1D11E</span><br></code></pre></td></tr></table></figure><p>这样就得出这转义序列的码点，然后我们再把它编码成 UTF-8。如果只有高代理项而欠缺低代理项，或是低代理项不在合法码点范围，我们都返回 <code>LEPT_PARSE_INVALID_UNICODE_SURROGATE</code> 错误。如果 <code>\u</code> 后不是 4 位十六进位数字，则返回 <code>LEPT_PARSE_INVALID_UNICODE_HEX</code> 错误。</p><h3 id="对于utf-8解析"><a href="#对于utf-8解析" class="headerlink" title="对于utf-8解析"></a>对于utf-8解析</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static const <span class="hljs-built_in">char</span>* lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">p</span>, <span class="hljs-params">unsigned</span><span class="hljs-operator">*</span> <span class="hljs-params">u</span>)</span> &#123;<br>    <span class="hljs-comment">/* \TODO */</span><br>    *u = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">char</span> ch = *p++;<br>        *u &lt;&lt;= <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-character">&#x27;0&#x27;</span><span class="hljs-operator"> &amp;&amp; </span>ch &lt;= <span class="hljs-character">&#x27;9&#x27;</span>)  *u <span class="hljs-pattern-match">|= ch - &#x27;0&#x27;;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;<span class="hljs-constructor">A</span>&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;<span class="hljs-constructor">F</span>&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;<span class="hljs-constructor">A</span>&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= &#x27;a&#x27; <span class="hljs-operator">&amp;&amp;</span> ch &lt;= &#x27;f&#x27;)  <span class="hljs-operator">*</span>u |= ch - (&#x27;a&#x27; - 10);</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> return <span class="hljs-constructor">NULL</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return p;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">static void lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">u</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> \<span class="hljs-constructor">TODO</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">F</span>)</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, <span class="hljs-params">u</span> &amp; 0xFF)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x7<span class="hljs-constructor">FF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xC0 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u &lt;= 0x<span class="hljs-constructor">FFFF</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xE0 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">assert</span>(u &lt;= 0x10<span class="hljs-constructor">FFFF</span>);</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0xF0 | ((<span class="hljs-params">u</span> &gt;&gt; 18)</span> &amp; 0x<span class="hljs-constructor">FF</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 12)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | ((<span class="hljs-params">u</span> &gt;&gt; 6)</span> &amp; 0x3<span class="hljs-constructor">F</span>));</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PUTC(<span class="hljs-params">c</span>, 0x80 | (<span class="hljs-params">u</span> &amp; 0x3F)</span>);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">case <span class="hljs-character">&#x27;u&#x27;</span>:<br>                      <span class="hljs-keyword">if</span> (!(p = lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">p</span>, &amp;<span class="hljs-params">u</span>)</span>))<br>                          <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_HEX)</span>;<br>                      <span class="hljs-comment">/* \TODO surrogate handling */</span><br>                      <span class="hljs-keyword">if</span> (u &gt;= <span class="hljs-number">0xD800</span><span class="hljs-operator"> &amp;&amp; </span>u &lt;= <span class="hljs-number">0xDC00</span>)<br>                      &#123;<br>                          <span class="hljs-keyword">if</span>(*p++!=<span class="hljs-character">&#x27;\\&#x27;</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          <span class="hljs-keyword">if</span>(*p++!=<span class="hljs-character">&#x27;u&#x27;</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          unsigned u2=<span class="hljs-number">0</span>;<br>                          <span class="hljs-keyword">if</span>(!(p=lept<span class="hljs-constructor">_parse_hex4(<span class="hljs-params">p</span>,&amp;<span class="hljs-params">u2</span>)</span>))<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          <span class="hljs-keyword">if</span>(u2 &lt; <span class="hljs-number">0xDC00</span><span class="hljs-operator"> || </span>u2 &gt; <span class="hljs-number">0xDFFF</span>)<br>                              <span class="hljs-constructor">STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE)</span>;<br>                          u = (((u - <span class="hljs-number">0xD800</span>) &lt;&lt; <span class="hljs-number">10</span>) <span class="hljs-pattern-match">| (u2 - 0x<span class="hljs-constructor">DC00</span>)) + 0x10000;</span><br><span class="hljs-pattern-match">                      &#125;</span><br><span class="hljs-pattern-match">                      lept<span class="hljs-constructor">_encode_utf8(<span class="hljs-params">c</span>, <span class="hljs-params">u</span>)</span>;</span><br><span class="hljs-pattern-match">                      break;</span><br></code></pre></td></tr></table></figure><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="解析数组"><a href="#解析数组" class="headerlink" title="解析数组"></a>解析数组</h3><p>json 的数组语法是这样的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">array</span> = <span class="hljs-symbol">%x5B</span> ws [ value *( ws <span class="hljs-symbol">%x2C</span> ws value ) ] ws <span class="hljs-symbol">%x5D</span><br></code></pre></td></tr></table></figure><p>可以像字符串一样</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static <span class="hljs-built_in">int</span> lept<span class="hljs-constructor">_parse_array(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    size_t i, size = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> ret;<br>    <span class="hljs-constructor">EXPECT(<span class="hljs-params">c</span>, &#x27;[&#x27;)</span>;<br>    lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>    <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;]&#x27;</span>) &#123;<br>        c-&gt;json++;<br>        v-&gt;<span class="hljs-keyword">type</span> = LEPT_ARRAY;<br>        v-&gt;u.a.size = <span class="hljs-number">0</span>;<br>        v-&gt;u.a.e = NULL;<br>        return LEPT_PARSE_OK;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        lept_value e;<br>        lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">e</span>)</span>;<br>        <span class="hljs-keyword">if</span> ((ret = lept<span class="hljs-constructor">_parse_value(<span class="hljs-params">c</span>, &amp;<span class="hljs-params">e</span>)</span>) != LEPT_PARSE_OK)<br>            break;<br>        memcpy(lept<span class="hljs-constructor">_context_push(<span class="hljs-params">c</span>, <span class="hljs-params">sizeof</span>(<span class="hljs-params">lept_value</span>)</span>), &amp;e, sizeof(lept_value));<br>        size++;<br>        lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;,&#x27;</span>) &#123;<br>            c-&gt;json++;<br>            lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;]&#x27;</span>) &#123;<br>            c-&gt;json++;<br>            v-&gt;<span class="hljs-keyword">type</span> = LEPT_ARRAY;<br>            v-&gt;u.a.size = size;<br>            size *= sizeof(lept_value);<br>            memcpy(v-&gt;u.a.e = (lept_value*)malloc(size), lept<span class="hljs-constructor">_context_pop(<span class="hljs-params">c</span>, <span class="hljs-params">size</span>)</span>, size);<br>            return LEPT_PARSE_OK;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ret = LEPT_PARSE_MISS_COMMA_OR_SQUARE_BRACKET;<br>            break;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/* Pop and free values on the stack */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>        lept<span class="hljs-constructor">_free((<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span>)</span>lept<span class="hljs-constructor">_context_pop(<span class="hljs-params">c</span>, <span class="hljs-params">sizeof</span>(<span class="hljs-params">lept_value</span>)</span>));<br>    return ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="防止内存泄漏"><a href="#防止内存泄漏" class="headerlink" title="防止内存泄漏"></a>防止内存泄漏</h3><p>更新lept_free 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">void</span> lept_free(lept_value* v) &#123;<br>    size_t i;<br>    assert(v != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">switch</span> (v-&gt;type) &#123;<br>    <span class="hljs-keyword">case</span> LEPT_STRING:<br>        free(v-&gt;u.s.s);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> LEPT_ARRAY:<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; v-&gt;u.a.size; i++)<br>            lept_free(&amp;v-&gt;u.a.e[i]);<br>        free(v-&gt;u.a.e);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;<br>    &#125;<br>    v-&gt;type = LEPT_NULL;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h3><p>然后，我们把这个指针调用 <code>lept_parse_value(c, e)</code>，这里会出现问题，因为 <code>lept_parse_value()</code> 及之下的函数都需要调用 <code>lept_context_push()</code>，而 <code>lept_context_push()</code> 在发现栈满了的时候会用 <code>realloc()</code> 扩容。这时候，我们上层的 <code>e</code> 就会失效，变成一个悬挂指针（dangling pointer），而且 <code>lept_parse_value(c, e)</code> 会通过这个指针写入解析结果，造成非法访问。</p><p>在使用 C++ 容器时，也会遇到类似的问题。从容器中取得的迭代器（iterator）后，如果改动容器内容，之前的迭代器会失效。这里的悬挂指针问题也是相同的。</p><p>但这种 bug 有时可能在简单测试中不能自动发现，因为问题只有堆栈满了才会出现。从测试的角度看，我们需要一些压力测试（stress test），测试更大更复杂的数据。但从编程的角度看，我们要谨慎考虑变量的生命周期，尽量从编程阶段避免出现问题。例如把 <code>lept_context_push()</code> 的 API 改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lept_context_push</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* data, <span class="hljs-keyword">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure><p>这样就确把数据压入栈内，避免了返回指针的生命周期问题。但我们之后会发现，原来的 API 设计在一些情况会更方便一些，例如在把字符串值转化（stringify）为 JSON 时，我们可以预先在堆栈分配字符串所需的最大空间，而当时是未有数据填充进去的。</p><p>无论如何，我们编程时都要考虑清楚变量的生命周期，特别是指针的生命周期</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">member = <span class="hljs-built_in">string</span> <span class="hljs-keyword">ws</span> %x3A <span class="hljs-keyword">ws</span> value<br>object = %x7B <span class="hljs-keyword">ws</span> [ member *( <span class="hljs-keyword">ws</span> %x2C <span class="hljs-keyword">ws</span> member ) ] <span class="hljs-keyword">ws</span> %x7D<br></code></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><table><thead><tr><th></th><th align="center">动态数组</th><th align="center">有序动态数组</th><th align="center">平衡树</th><th align="center">哈希表</th></tr></thead><tbody><tr><td>有序</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">否</td></tr><tr><td>自定成员次序</td><td align="center">可</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td>初始化 n 个成员</td><td align="center">O(n)</td><td align="center">O(n log n)</td><td align="center">O(n log n)</td><td align="center">平均 O(n)、最坏 O(n^2)</td></tr><tr><td>加入成员</td><td align="center">分摊 O(1)</td><td align="center">O(n)</td><td align="center">O(log n)</td><td align="center">平均 O(1)、最坏 O(n)</td></tr><tr><td>移除成员</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">O(log n)</td><td align="center">平均 O(1)、最坏 O(n)</td></tr><tr><td>查询成员</td><td align="center">O(n)</td><td align="center">O(log n)</td><td align="center">O(log n)</td><td align="center">平均 O(1)、最坏 O(n)</td></tr><tr><td>遍历成员</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">O(m)</td></tr><tr><td>检测对象相等</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">平均 O(n)、最坏 O(n^2)</td></tr><tr><td>空间</td><td align="center">O(m)</td><td align="center">O(m)</td><td align="center">O(n)</td><td align="center">O(m)</td></tr></tbody></table><p>创建动态数组</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lept_value</span> <span class="hljs-title">lept_value</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lept_member</span> <span class="hljs-title">lept_member</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lept_value</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> lept_member* m; <span class="hljs-keyword">size_t</span> size; &#125;o;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> lept_value* e; <span class="hljs-keyword">size_t</span> size; &#125;a;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-keyword">char</span>* s; <span class="hljs-keyword">size_t</span> len; &#125;s;<br>        <span class="hljs-keyword">double</span> n;<br>    &#125;u;<br>    lept_type type;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lept_member</span> &#123;</span><br>    <span class="hljs-keyword">char</span>* k; <span class="hljs-keyword">size_t</span> klen;   <span class="hljs-comment">/* member key string, key string length */</span><br>    lept_value v;           <span class="hljs-comment">/* member value */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="重构字符串解析"><a href="#重构字符串解析" class="headerlink" title="重构字符串解析"></a>重构字符串解析</h3><p>把解析 JSON 字符串及写入 <code>lept_value</code> 分拆成两部分</p><p>重构后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lept_parse_string_raw</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">char</span>** str, <span class="hljs-keyword">size_t</span>* len)</span> </span>&#123;<br>    <span class="hljs-comment">/* \todo */</span><br>    <span class="hljs-keyword">size_t</span> head = c-&gt;top;<br>    <span class="hljs-keyword">unsigned</span> u, u2;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p;<br>    <span class="hljs-built_in">EXPECT</span>(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>);<br>    p = c-&gt;json;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">char</span> ch = *p++;<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ch) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>:<br>            *len = c-&gt;top - head;<br>            *str = <span class="hljs-built_in">lept_context_pop</span>(c, *len);<br>            c-&gt;json = p;<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>:<br>            <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (*p++) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>: <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\&quot;&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>: <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\\&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;/&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\b&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\f&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\n&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\r&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:  <span class="hljs-built_in">PUTC</span>(c, <span class="hljs-string">&#x27;\t&#x27;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (!(p = <span class="hljs-built_in">lept_parse_hex4</span>(p, &amp;u)))<br>                    <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_UNICODE_HEX);<br>                <span class="hljs-keyword">if</span> (u &gt;= <span class="hljs-number">0xD800</span> &amp;&amp; u &lt;= <span class="hljs-number">0xDBFF</span>) &#123; <span class="hljs-comment">/* surrogate pair */</span><br>                    <span class="hljs-keyword">if</span> (*p++ != <span class="hljs-string">&#x27;\\&#x27;</span>)<br>                        <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_UNICODE_SURROGATE);<br>                    <span class="hljs-keyword">if</span> (*p++ != <span class="hljs-string">&#x27;u&#x27;</span>)<br>                        <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_UNICODE_SURROGATE);<br>                    <span class="hljs-keyword">if</span> (!(p = <span class="hljs-built_in">lept_parse_hex4</span>(p, &amp;u2)))<br>                        <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_UNICODE_HEX);<br>                    <span class="hljs-keyword">if</span> (u2 &lt; <span class="hljs-number">0xDC00</span> || u2 &gt; <span class="hljs-number">0xDFFF</span>)<br>                        <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_UNICODE_SURROGATE);<br>                    u = (((u - <span class="hljs-number">0xD800</span>) &lt;&lt; <span class="hljs-number">10</span>) | (u2 - <span class="hljs-number">0xDC00</span>)) + <span class="hljs-number">0x10000</span>;<br>                &#125;<br>                <span class="hljs-built_in">lept_encode_utf8</span>(c, u);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_STRING_ESCAPE);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>            <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_MISS_QUOTATION_MARK);<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)ch &lt; <span class="hljs-number">0x20</span>)<br>                <span class="hljs-built_in">STRING_ERROR</span>(LEPT_PARSE_INVALID_STRING_CHAR);<br>            <span class="hljs-built_in">PUTC</span>(c, ch);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lept_parse_string</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">char</span>* s;<br>    <span class="hljs-keyword">size_t</span> len;<br>    <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">lept_parse_string_raw</span>(c, &amp;s, &amp;len)) == LEPT_PARSE_OK)<br>        <span class="hljs-built_in">lept_set_string</span>(v, s, len);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="解析对象"><a href="#解析对象" class="headerlink" title="解析对象"></a>解析对象</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static <span class="hljs-built_in">int</span> lept<span class="hljs-constructor">_parse_object(<span class="hljs-params">lept_context</span><span class="hljs-operator">*</span> <span class="hljs-params">c</span>, <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    size_t i,size;<br>    lept_member m;<br>    <span class="hljs-built_in">int</span> ret;<br>    <span class="hljs-constructor">EXPECT(<span class="hljs-params">c</span>, &#x27;&#123;&#x27;)</span>;<br>    lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>    <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;&#125;&#x27;</span>) &#123;<br>        c-&gt;json++;<br>        v-&gt;<span class="hljs-keyword">type</span> = LEPT_OBJECT;<br>        v-&gt;u.o.m = <span class="hljs-number">0</span>;<br>        v-&gt;u.o.size = <span class="hljs-number">0</span>;<br>        return LEPT_PARSE_OK;<br>    &#125;<br>    m.k = NULL;<br>    size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-built_in">char</span>* str;<br>        lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">m</span>.<span class="hljs-params">v</span>)</span>;<br>        <span class="hljs-comment">/* \todo parse key to m.k, m.klen */</span><br>        <span class="hljs-keyword">if</span> (*c-&gt;json != <span class="hljs-character">&#x27;&quot;&#x27;</span>) &#123;<br>            ret = LEPT_PARSE_MISS_KEY;<br>            break;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((ret = lept<span class="hljs-constructor">_parse_string_raw(<span class="hljs-params">c</span>, &amp;<span class="hljs-params">str</span>, &amp;<span class="hljs-params">m</span>.<span class="hljs-params">klen</span>)</span>) != LEPT_PARSE_OK)<br>            break;<br>        memcpy(m.k = (<span class="hljs-built_in">char</span>*)malloc(m.klen + <span class="hljs-number">1</span>), str, m.klen);<br>        m.k<span class="hljs-literal">[<span class="hljs-identifier">m</span>.<span class="hljs-identifier">klen</span>]</span> = <span class="hljs-character">&#x27;\0&#x27;</span>;<span class="hljs-comment">//结束</span><br>        lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        <span class="hljs-comment">/* \todo parse ws colon ws */</span><br>        <span class="hljs-keyword">if</span> (*c-&gt;json != <span class="hljs-character">&#x27;:&#x27;</span>)<br>        &#123;<br>            ret = LEPT_PARSE_MISS_COLON;<br>            break;<br>        &#125;<br>        c-&gt;json++;<br>        lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        <span class="hljs-comment">/* parse value */</span><br>        <span class="hljs-keyword">if</span> ((ret = lept<span class="hljs-constructor">_parse_value(<span class="hljs-params">c</span>, &amp;<span class="hljs-params">m</span>.<span class="hljs-params">v</span>)</span>) != LEPT_PARSE_OK)<br>            break;<br>        memcpy(lept<span class="hljs-constructor">_context_push(<span class="hljs-params">c</span>, <span class="hljs-params">sizeof</span>(<span class="hljs-params">lept_member</span>)</span>), &amp;m, sizeof(lept_member));<br>        size++;<br>        m.k = NULL; <span class="hljs-comment">/* ownership is transferred to member on stack */</span><br>        <span class="hljs-comment">/* \todo parse ws [comma | right-curly-brace] ws */</span><br>        lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;,&#x27;</span>)<br>        &#123;<br>            c-&gt;json++;<br>            lept<span class="hljs-constructor">_parse_whitespace(<span class="hljs-params">c</span>)</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*c-&gt;json<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;&#125;&#x27;</span>)<br>        &#123;<br>            size_t s = sizeof(lept_member)<span class="hljs-operator"> * </span>size;<br>            c-&gt;json++;<br>            v-&gt;<span class="hljs-keyword">type</span> = LEPT_OBJECT;<br>            v-&gt;u.o.size = size;<br>            memcpy(v-&gt;u.o.m = (lept_member*)malloc(s), lept<span class="hljs-constructor">_context_pop(<span class="hljs-params">c</span>, <span class="hljs-params">s</span>)</span>, s);<br>            return LEPT_PARSE_OK;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ret= LEPT_PARSE_MISS_COMMA_OR_CURLY_BRACKET;<br>            break;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/* \todo Pop and free members on the stack */</span><br>    free(m.k);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        lept_member* m = (lept_member*)lept<span class="hljs-constructor">_context_pop(<span class="hljs-params">c</span>, <span class="hljs-params">sizeof</span>(<span class="hljs-params">lept_member</span>)</span>);<br>        free(m-&gt;k);<br>        lept<span class="hljs-constructor">_free(&amp;<span class="hljs-params">m</span>-&gt;<span class="hljs-params">v</span>)</span>;<br>    &#125;<br>    return ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此基本完成了所有的解析器</p><h2 id="07-JSON-生成器"><a href="#07-JSON-生成器" class="headerlink" title="07 JSON 生成器"></a>07 JSON 生成器</h2><h3 id="字符串化"><a href="#字符串化" class="headerlink" title="字符串化"></a>字符串化</h3><p>我们在前 6 个单元实现了一个合乎标准的 JSON 解析器，它把 JSON 文本解析成一个树形数据结构，整个结构以 <code>lept_value</code> 的节点组成。</p><p>JSON 生成器（generator）负责相反的事情，就是把树形数据结构转换成 JSON 文本。这个过程又称为「字符串化（stringify）」。</p><p><img src="/../json_C/parse_stringify.png" alt="JSON 的解析与生成"></p><p>相对于解析器，通常生成器更容易实现，而且生成器几乎不会造成运行时错误。因此，生成器的 API 设计为以下形式，直接返回 JSON 的字符串：</p><h3 id="lept-context-动态数组-再利用"><a href="#lept-context-动态数组-再利用" class="headerlink" title="lept_context 动态数组 再利用"></a>lept_context 动态数组 再利用</h3><p>在实现 JSON 解析时，我们加入了一个动态变长的堆栈，用于存储临时的解析结果。而现在，我们也需要存储生成的结果，所以最简单是再利用该数据结构，作为输出缓冲区。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">char</span>* lept<span class="hljs-constructor">_stringify(<span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>, <span class="hljs-params">size_t</span><span class="hljs-operator">*</span> <span class="hljs-params">length</span>)</span> &#123;<br>    lept_context c;<br>    <span class="hljs-keyword">assert</span>(v != NULL);<br>    c.stack = (<span class="hljs-built_in">char</span>*)malloc(c.size = LEPT_PARSE_STRINGIFY_INIT_SIZE);<br>    c.top = <span class="hljs-number">0</span>;<br>    lept<span class="hljs-constructor">_stringify_value(&amp;<span class="hljs-params">c</span>, <span class="hljs-params">v</span>)</span>;<br>    <span class="hljs-keyword">if</span> (length)<br>        *length = c.top;<br>    <span class="hljs-constructor">PUTC(&amp;<span class="hljs-params">c</span>, &#x27;\0&#x27;)</span>;<br>    return c.stack;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lept_stringify_string</span><span class="hljs-params">(lept_context* c, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">size_t</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> hex_digits[] = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span> &#125;;<br>    <span class="hljs-keyword">size_t</span> i, size;<br>    <span class="hljs-keyword">char</span>* head, *p;<br>    <span class="hljs-built_in">assert</span>(s != <span class="hljs-literal">NULL</span>);<br>    p = head = <span class="hljs-built_in">lept_context_push</span>(c, size = len * <span class="hljs-number">6</span> + <span class="hljs-number">2</span>); <span class="hljs-comment">/* &quot;\u00xx...&quot; */</span><br>    *p++ = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ch = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)s[i];<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ch) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;\&quot;&#x27;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\b&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;b&#x27;</span>;  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\f&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;f&#x27;</span>;  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\n&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;n&#x27;</span>;  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\r&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;r&#x27;</span>;  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\t&#x27;</span>: *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;t&#x27;</span>;  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">if</span> (ch &lt; <span class="hljs-number">0x20</span>) &#123;<br>                    *p++ = <span class="hljs-string">&#x27;\\&#x27;</span>; *p++ = <span class="hljs-string">&#x27;u&#x27;</span>; *p++ = <span class="hljs-string">&#x27;0&#x27;</span>; *p++ = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    *p++ = hex_digits[ch &gt;&gt; <span class="hljs-number">4</span>];<br>                    *p++ = hex_digits[ch &amp; <span class="hljs-number">15</span>];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    *p++ = s[i];<br>        &#125;<br>    &#125;<br>    *p++ = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>    c-&gt;top -= size - (p - head);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>为了简单起见，我们使用 <code>sprintf(&quot;%.17g&quot;, ...)</code> 来把浮点数转换成文本。<code>&quot;%.17g&quot;</code> 是足够把双精度浮点转换成可还原的文本。</p><p>最简单的实现方式可能是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> LEPT_NUMBER:<br>    &#123;<br>        <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">32</span>];<br>        <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">&quot;%.17g&quot;</span>, v-&gt;u.n);<br>        PUTS(c, buffer, length);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>但这样需要在 <code>PUTS()</code> 中做一次 <code>memcpy()</code>，实际上我们可以避免这次复制，只需要生成的时候直接写进 <code>c</code> 里的堆栈，然后再按实际长度调查 <code>c-&gt;top</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> LEPT_NUMBER:<br>    &#123;<br>        <span class="hljs-keyword">char</span>* buffer = lept_context_push(c, <span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">&quot;%.17g&quot;</span>, v-&gt;u.n);<br>        c-&gt;top -= <span class="hljs-number">32</span> - length;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>因每个临时变量只用了一次，我们可以把代码压缩成一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> LEPT_NUMBER:<br>    c-&gt;top -= <span class="hljs-number">32</span> - <span class="hljs-built_in">sprintf</span>(lept_context_push(c, <span class="hljs-number">32</span>), <span class="hljs-string">&quot;%.17g&quot;</span>, v-&gt;u.n);<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h3 id="元素比较"><a href="#元素比较" class="headerlink" title="元素比较"></a>元素比较</h3><p>在实现数组和对象的修改之前，为了测试结果的正确性，我们先实现 <code>lept_value</code> 的<a href="https://zh.wikipedia.org/zh-cn/%E9%97%9C%E4%BF%82%E9%81%8B%E7%AE%97%E5%AD%90">相等比较</a>（equality comparison）。首先，两个值的类型必须相同，对于 true、false、null 这三种类型，比较类型后便完成比较。而对于数字和字符串，需进一步检查是否相等：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> lept<span class="hljs-constructor">_is_equal(<span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">lhs</span>, <span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">rhs</span>)</span> &#123;<br>    size_t i;<br>    <span class="hljs-keyword">assert</span>(lhs != NULL<span class="hljs-operator"> &amp;&amp; </span>rhs != NULL);<br>    <span class="hljs-keyword">if</span> (lhs-&gt;<span class="hljs-keyword">type</span> != rhs-&gt;<span class="hljs-keyword">type</span>)<br>        return <span class="hljs-number">0</span>;<br>    switch (lhs-&gt;<span class="hljs-keyword">type</span>) &#123;<br>        case LEPT_STRING:<br>            return lhs-&gt;u.s.len<span class="hljs-operator"> == </span>rhs-&gt;u.s.len<span class="hljs-operator"> &amp;&amp; </span><br><span class="hljs-operator">                </span>memcmp(lhs-&gt;u.s.s, rhs-&gt;u.s.s, lhs-&gt;u.s.len)<span class="hljs-operator"> == </span><span class="hljs-number">0</span>;<br>        case LEPT_NUMBER:<br>            return lhs-&gt;u.n<span class="hljs-operator"> == </span>rhs-&gt;u.n;<br>        case LEPT_ARRAY:<br>            <span class="hljs-keyword">if</span> (lhs-&gt;u.a.size != rhs-&gt;u.a.size)<br>                return <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; lhs-&gt;u.a.size; i++)<br>                <span class="hljs-keyword">if</span> (!lept<span class="hljs-constructor">_is_equal(&amp;<span class="hljs-params">lhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>], &amp;<span class="hljs-params">rhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>])</span>)<br>                    return <span class="hljs-number">0</span>;<br>            return <span class="hljs-number">1</span>;<br>        case LEPT_OBJECT:<br>            <span class="hljs-comment">/* \todo */</span><br>            <span class="hljs-keyword">if</span> (lhs-&gt;u.o.size != rhs-&gt;u.o.size)<br>                return <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; lhs-&gt;u.o.size; i++)<br>            &#123;<br>                size_t idx;<br>                <span class="hljs-keyword">if</span> ((idx = lept<span class="hljs-constructor">_find_object_index(<span class="hljs-params">rhs</span>, <span class="hljs-params">lhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">i</span>].<span class="hljs-params">k</span>, <span class="hljs-params">lhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">i</span>].<span class="hljs-params">klen</span>)</span>)<span class="hljs-operator"> == </span>LEPT_KEY_NOT_EXIST)<br>                    return <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (!lept<span class="hljs-constructor">_is_equal(&amp;<span class="hljs-params">lhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">i</span>].<span class="hljs-params">v</span>, &amp;<span class="hljs-params">rhs</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">idx</span>].<span class="hljs-params">v</span>)</span>)<br>                    return <span class="hljs-number">0</span>;<br>            &#125;<br>            return <span class="hljs-number">1</span>;<br>        default:<br>            return <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而对象与数组的不同之处，在于概念上对象的键值对是无序的。例如，<code>&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</code> 和 <code>&#123;&quot;b&quot;:2,&quot;a&quot;:1&#125;</code> 虽然键值的次序不同，但这两个 JSON 对象是相等的。我们可以简单地利用 <code>lept_find_object_index()</code> 去找出对应的值，然后递归作比较。</p><h3 id="lept-pushback-array-element"><a href="#lept-pushback-array-element" class="headerlink" title="lept_pushback_array_element()"></a>lept_pushback_array_element()</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">lept_value* lept<span class="hljs-constructor">_pushback_array_element(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_ARRAY);<br>    <span class="hljs-keyword">if</span> (v-&gt;u.a.size<span class="hljs-operator"> == </span>v-&gt;u.a.capacity)<br>        lept<span class="hljs-constructor">_reserve_array(<span class="hljs-params">v</span>, <span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">capacity</span> <span class="hljs-operator">==</span> 0 ? 1 : <span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">capacity</span> <span class="hljs-operator">*</span> 2)</span>;<br>    lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">size</span>])</span>;<br>    return &amp;v-&gt;u.a.e<span class="hljs-literal">[<span class="hljs-identifier">v</span>-&gt;<span class="hljs-identifier">u</span>.<span class="hljs-identifier">a</span>.<span class="hljs-identifier">size</span><span class="hljs-operator">++</span>]</span>;<br>&#125;<br><br>void lept<span class="hljs-constructor">_popback_array_element(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_ARRAY<span class="hljs-operator"> &amp;&amp; </span>v-&gt;u.a.size &gt; <span class="hljs-number">0</span>);<br>    lept<span class="hljs-constructor">_free(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[--<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">size</span>])</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>lept_pushback_array_element()</code> 在数组末端压入一个元素，返回新的元素指针。如果现有的容量不足，就需要调用 <code>lept_reserve_array()</code> 扩容。我们现在用了一个最简单的扩容公式：若容量为 0，则分配 1 个元素；其他情况倍增容量。</p><p><code>lept_popback_array_element()</code> 则做相反的工作，记得删去的元素需要调用 <code>lept_free()</code>。</p><h3 id="lept-insert-array-element"><a href="#lept-insert-array-element" class="headerlink" title="lept_insert_array_element()"></a>lept_insert_array_element()</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">lept_value* lept_insert_array_element(lept_value* v, size_t index) &#123;<br>    <span class="hljs-function"><span class="hljs-title">assert</span>(v != NULL &amp;&amp; v-&gt;</span><span class="hljs-function"><span class="hljs-title">type</span> == LEPT_ARRAY &amp;&amp; index &lt;= v-&gt;</span>u.a.size);<br>    <span class="hljs-comment">/* \todo */</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.a.size &gt;= v-&gt;</span>u.a.capacity) <span class="hljs-comment">// 先看是否需要扩容扩容</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">lept_reserve_array</span>(v, v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.a.capacity == 0 ? 1 : v-&gt;</span>u.a.capacity * <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">memcpy</span>(v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.a.e + index + 1, v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.a.e + index, (v-&gt;</span>u.a.size - index) * sizeof(lept_value));<br>    <span class="hljs-function"><span class="hljs-title">lept_init</span>(&amp;v-&gt;</span>u.a.e[index]);<br>    <span class="hljs-function"><span class="hljs-title">v</span>-&gt;</span>u.a.size++;<br>    <span class="hljs-function"><span class="hljs-title">return</span> v-&gt;</span>u.a.e+index;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数的作用是在指定的index位置腾出一个位置。<br>首先检查size和capacity，看是否要扩容。接着将index位置开始的元素整体向后移动一位。 最后使用<code>lept_init()</code>将index位置的元素初始化，同时size++，返回地址。</p><h3 id="lept-erase-array-element"><a href="#lept-erase-array-element" class="headerlink" title="lept_erase_array_element()"></a>lept_erase_array_element()</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_erase_array_element(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">index</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">count</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_ARRAY<span class="hljs-operator"> &amp;&amp; </span>index + count &lt;= v-&gt;u.a.size);<br>    <span class="hljs-comment">/* \todo */</span><br>    size_t i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = index; i &lt; count + index; i++)<br>        lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>])</span>;<br>    memcpy(v-&gt;u.a.e + index, v-&gt;u.a.e + index + count, (v-&gt;u.a.size - index - count)<span class="hljs-operator"> * </span>sizeof(lept_value));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = v-&gt;u.a.size - count; i &lt; v-&gt;u.a.size; i++)<br>        lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>])</span>;<br>    v-&gt;u.a.size -= count;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数的作用是删除从某个位置开始的，指定数目的元素 所以首先<code>lept_free()</code>释放内存，接着将数组后面剩下的元素往前移动 </p><p>因为这样数组少了<code>count</code>个元素，所以最末尾的<code>count</code>元素是无效值,调用<code>lept_init()</code>初始化 最后更新size</p><h3 id="动态对象-object-相关代码补全"><a href="#动态对象-object-相关代码补全" class="headerlink" title="动态对象 object 相关代码补全"></a>动态对象 object 相关代码补全</h3><h4 id="lept-reserve-object"><a href="#lept-reserve-object" class="headerlink" title="lept_reserve_object()"></a>lept_reserve_object()</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">void lept_reserve_object(lept_value* v, size_t capacity) &#123;<br>    <span class="hljs-function"><span class="hljs-title">assert</span>(v != NULL &amp;&amp; v-&gt;</span>type == LEPT_OBJECT);<br>    <span class="hljs-comment">/* \todo */</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (v-&gt;</span>u.o.capacity &lt; capacity)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">v</span>-&gt;</span>u.o.capacity = capacity;<br>        <span class="hljs-function"><span class="hljs-title">v</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m = (lept_member*)realloc(v-&gt;</span>u.o.m, capacity * sizeof(lept_member));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考 lept_reserve_array 即可</p><h4 id="lept-get-object-capacity"><a href="#lept-get-object-capacity" class="headerlink" title="lept_get_object_capacity()"></a>lept_get_object_capacity()</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">size_t lept<span class="hljs-constructor">_get_object_capacity(<span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_OBJECT);<br>    <span class="hljs-comment">/* \todo */</span><br>    return v-&gt;u.o.capacity;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="lept-set-object"><a href="#lept-set-object" class="headerlink" title="lept_set_object()"></a>lept_set_object()</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_set_object(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">capacity</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL);<br>    lept<span class="hljs-constructor">_free(<span class="hljs-params">v</span>)</span>;<br>    v-&gt;<span class="hljs-keyword">type</span> = LEPT_OBJECT;<br>    v-&gt;u.o.size = <span class="hljs-number">0</span>;<br>    v-&gt;u.o.capacity = capacity;<br>    v-&gt;u.o.m = capacity &gt; <span class="hljs-number">0</span> ? (lept_member*)malloc(capacity<span class="hljs-operator"> * </span>sizeof(lept_member)) : NULL;<br>&#125;<br></code></pre></td></tr></table></figure><p>释放原来的内存，初始化类型和容量，分配新的内存</p><h4 id="lept-shrink-object"><a href="#lept-shrink-object" class="headerlink" title="lept_shrink_object()"></a>lept_shrink_object()</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">void lept_shrink_object(lept_value* v) &#123;<br>    <span class="hljs-function"><span class="hljs-title">assert</span>(v != NULL &amp;&amp; v-&gt;</span>type == LEPT_OBJECT);<br>    <span class="hljs-comment">/* \todo */</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.capacity &gt; v-&gt;</span>u.o.size) &#123;<br>        <span class="hljs-function"><span class="hljs-title">v</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.capacity = v-&gt;</span>u.o.size;<br>        <span class="hljs-function"><span class="hljs-title">v</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m = (lept_member*)realloc(v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m, v-&gt;</span>u.o.capacity * sizeof(lept_member));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新分配内存</p><h4 id="lept-clear-object"><a href="#lept-clear-object" class="headerlink" title="lept_clear_object()"></a>lept_clear_object()</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_clear_object(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_OBJECT);<br>    <span class="hljs-comment">/* \todo */</span><br>    size_t i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; v-&gt;u.o.size; i++)<br>    &#123;<br>        <span class="hljs-built_in">char</span>* k = v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.k;<br>        free(k);<br>        v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.klen = <span class="hljs-number">0</span>;<br>        k = NULL;<br>        lept<span class="hljs-constructor">_free(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">i</span>].<span class="hljs-params">v</span>)</span>;<br>    &#125;<br>    v-&gt;u.o.size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>清除所有内存</p><p>依次free lept_member里面的 key klen value</p><h4 id="lept-set-object-value"><a href="#lept-set-object-value" class="headerlink" title="lept_set_object_value()"></a>lept_set_object_value()</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">lept_value* lept<span class="hljs-constructor">_set_object_value(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>, <span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">key</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">klen</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(v != NULL<span class="hljs-operator"> &amp;&amp; </span>v-&gt;<span class="hljs-keyword">type</span><span class="hljs-operator"> == </span>LEPT_OBJECT<span class="hljs-operator"> &amp;&amp; </span>key != NULL);<br>    <span class="hljs-comment">/* \todo */</span><br>    size_t index=lept<span class="hljs-constructor">_find_object_index(<span class="hljs-params">v</span>,<span class="hljs-params">key</span>,<span class="hljs-params">klen</span>)</span>;<span class="hljs-comment">// 根据值来找下标</span><br>    <span class="hljs-keyword">if</span> (index != LEPT_KEY_NOT_EXIST)<span class="hljs-comment">// 找到了</span><br>        return &amp;v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">index</span>]</span>.v;<br>    <span class="hljs-keyword">if</span> (v-&gt;u.o.size<span class="hljs-operator"> == </span>v-&gt;u.o.capacity)<span class="hljs-comment">//扩容</span><br>        lept<span class="hljs-constructor">_reserve_object(<span class="hljs-params">v</span>, <span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">capacity</span> <span class="hljs-operator">==</span> 0 ? 1 : <span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">capacity</span> <span class="hljs-operator">*</span> 2)</span>;<br>    <span class="hljs-comment">//不存在则加入一个</span><br>    size_t sz = v-&gt;u.o.size;<br>    v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">sz</span>]</span>.k = (<span class="hljs-built_in">char</span>*)malloc(klen + <span class="hljs-number">1</span>);<br>    memcpy(v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">sz</span>]</span>.k, key, klen);<br>    v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">sz</span>]</span>.k<span class="hljs-literal">[<span class="hljs-identifier">klen</span>]</span> = <span class="hljs-string">&quot;\0&quot;</span>;<br>    v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">sz</span>]</span>.klen = klen;<br>    lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">v</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">m</span>[<span class="hljs-params">sz</span>].<span class="hljs-params">v</span>)</span>;<br><br>    return &amp;v-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">v</span>-&gt;<span class="hljs-identifier">u</span>.<span class="hljs-identifier">o</span>.<span class="hljs-identifier">size</span><span class="hljs-operator">++</span>]</span>.v;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据key返回对应的value，如果不存在，则新建一个键值对，key通过参数深复制达成同步</p><p>注意 <code>lept_set_object_value()</code> 会先搜寻是否存在现有的键，若存在则直接返回该值的指针，不存在时才新增</p><h4 id="lept-remove-object-value"><a href="#lept-remove-object-value" class="headerlink" title="lept_remove_object_value()"></a>lept_remove_object_value()</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">void lept_remove_object_value(lept_value* v, size_t index) &#123;<br>    <span class="hljs-function"><span class="hljs-title">assert</span>(v != NULL &amp;&amp; v-&gt;</span><span class="hljs-function"><span class="hljs-title">type</span> == LEPT_OBJECT &amp;&amp; index &lt; v-&gt;</span>u.o.size);<br>    <span class="hljs-comment">/* \todo */</span><br>    <span class="hljs-function"><span class="hljs-title">lept_member</span>* rm = &amp;v-&gt;</span>u.o.m[index];<br>    <span class="hljs-function"><span class="hljs-title">free</span>(rm-&gt;</span>k);<br>    <span class="hljs-function"><span class="hljs-title">lept_free</span>(&amp;rm-&gt;</span>v);<br>    <span class="hljs-function"><span class="hljs-title">memcpy</span>(v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m + index, v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m + index + 1, (v-&gt;</span>u.o.size - index - <span class="hljs-number">1</span>) * sizeof(lept_member));<br>    <span class="hljs-function"><span class="hljs-title">lept_member</span>* ed = &amp;v-&gt;</span><span class="hljs-function"><span class="hljs-title">u</span>.o.m[--v-&gt;</span>u.o.size];<br>    <span class="hljs-function"><span class="hljs-title">ed</span>-&gt;</span>k = NULL;<br>    <span class="hljs-function"><span class="hljs-title">ed</span>-&gt;</span>klen = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">lept_init</span>(&amp;ed-&gt;</span>v);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先释放原先的键值对(<code>lept_member</code>)，将后面剩下的元素整体往前移动一位。 不要忘记对最后结尾的元素初始化，因为它们已经往前移动，剩下的是无效值。</p><h3 id="元素移动，复制"><a href="#元素移动，复制" class="headerlink" title="元素移动，复制"></a>元素移动，复制</h3><h4 id="深度复制"><a href="#深度复制" class="headerlink" title="深度复制"></a>深度复制</h4><p>例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_set_object_value(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">v</span>, <span class="hljs-params">const</span> <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">key</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">klen</span>, <span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">value</span>)</span>;<br><br>void f<span class="hljs-literal">()</span> &#123;<br>    lept_value v, s;<br>    lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">v</span>)</span>;<br>    lept<span class="hljs-constructor">_parse(&amp;<span class="hljs-params">v</span>, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>)</span>;<br>    lept<span class="hljs-constructor">_init(&amp;<span class="hljs-params">s</span>)</span>;<br>    lept<span class="hljs-constructor">_set_string(&amp;<span class="hljs-params">s</span>, <span class="hljs-string">&quot;Hello&quot;</span>, 5)</span>;<br>    lept<span class="hljs-constructor">_set_object_keyvalue(&amp;<span class="hljs-params">v</span>, <span class="hljs-string">&quot;s&quot;</span>, &amp;<span class="hljs-params">s</span>)</span>; <span class="hljs-comment">/* &#123;&quot;s&quot;:&quot;Hello&quot;&#125; */</span><br>    lept<span class="hljs-constructor">_free(&amp;<span class="hljs-params">v</span>)</span><br>    lept<span class="hljs-constructor">_free(&amp;<span class="hljs-params">s</span>)</span>;  <span class="hljs-comment">/* 第二次释放！*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>凡涉及赋值，都可能会引起资源拥有权（resource ownership）的问题。值 <code>s</code> 并不能以指针方式简单地写入对象 <code>v</code>，因为这样便会有两个地方都拥有 <code>s</code>，会做成重复释放的 bug。我们有两个选择：</p><ol><li><p>在 <code>lept_set_object_value()</code> 中，把参数 <code>value</code> <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy">深度复制</a>（deep copy）一个值，即把整个树复制一份，写入其新增的键值对中。</p></li><li><p>在 <code>lept_set_object_value()</code> 中，把参数 <code>value</code> 拥有权转移至新增的键值对，再把 <code>value</code> 设置成 null 值。这就是所谓的移动语意（move semantics）。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_copy(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">dst</span>, <span class="hljs-params">const</span> <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">src</span>)</span> &#123;<br>    size_t sz,i;<br>    <span class="hljs-keyword">assert</span>(src != NULL<span class="hljs-operator"> &amp;&amp; </span>dst != NULL<span class="hljs-operator"> &amp;&amp; </span>src != dst);<br>    switch (src-&gt;<span class="hljs-keyword">type</span>) &#123;<br>        case LEPT_STRING:<br>            lept<span class="hljs-constructor">_set_string(<span class="hljs-params">dst</span>, <span class="hljs-params">src</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">s</span>.<span class="hljs-params">s</span>, <span class="hljs-params">src</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">s</span>.<span class="hljs-params">len</span>)</span>;<br>            break;<br>        case LEPT_ARRAY:<br>            <span class="hljs-comment">/* \todo */</span><br><br>            sz = src-&gt;u.a.size;<br>            lept<span class="hljs-constructor">_set_array(<span class="hljs-params">dst</span>, <span class="hljs-params">sz</span>)</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>            &#123;<br>                lept<span class="hljs-constructor">_copy(&amp;<span class="hljs-params">dst</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>],&amp;<span class="hljs-params">src</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">a</span>.<span class="hljs-params">e</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br>            dst-&gt;u.a.size = sz;<br>            break;<br>        case LEPT_OBJECT:<br>            <span class="hljs-comment">/* \todo */</span><br>            lept<span class="hljs-constructor">_set_object(<span class="hljs-params">dst</span>, <span class="hljs-params">src</span>-&gt;<span class="hljs-params">u</span>.<span class="hljs-params">o</span>.<span class="hljs-params">size</span>)</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; src-&gt;u.o.size; ++i)<br>            &#123;<br>                lept_member* src_member = &amp;src-&gt;u.o.m<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>                lept_value* dst_value = lept<span class="hljs-constructor">_set_object_value(<span class="hljs-params">dst</span>, <span class="hljs-params">src_member</span>-&gt;<span class="hljs-params">k</span>, <span class="hljs-params">src_member</span>-&gt;<span class="hljs-params">klen</span>)</span>;<br>                lept<span class="hljs-constructor">_copy(<span class="hljs-params">dst_value</span>, &amp;<span class="hljs-params">src_member</span>-&gt;<span class="hljs-params">v</span>)</span>;<br>            &#125;<br>            break;<br>        default:<br>            lept<span class="hljs-constructor">_free(<span class="hljs-params">dst</span>)</span>;<br>            memcpy(dst, src, sizeof(lept_value));<br>            break;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>C++11 加入了右值引用的功能，可以从语言层面区分复制和移动语意。而在 C 语言中，我们也可以通过实现不同版本的接口（不同名字的函数），实现这两种语意。但为了令接口更简单和正交（orthogonal），我们修改了 <code>lept_set_object_value()</code> 的设计，让它返回新增键值对的值指针，所以我们可以用 <code>lept_copy()</code> 去复制赋值，也可以简单地改变新增的键值：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">lept_value</span>* <span class="hljs-selector-tag">lept_set_object_value</span>(lept_value* v, const char* key, size_t klen);<br><br><span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">f</span>() &#123;<br>    <span class="hljs-selector-tag">lept_value</span> <span class="hljs-selector-tag">v</span>;<br>    <span class="hljs-selector-tag">lept_init</span>(&amp;v);<br>    <span class="hljs-selector-tag">lept_parse</span>(&amp;v, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>    <span class="hljs-selector-tag">lept_set_string</span>(lept_set_object_value(&amp;v, <span class="hljs-string">&quot;s&quot;</span>), <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">/* &#123;&quot;s&quot;:&quot;Hello&quot;&#125; */</span><br>    <span class="hljs-selector-tag">lept_copy</span>(<br>        lept_add_object_keyvalue(&amp;v, <span class="hljs-string">&quot;t&quot;</span>),<br>        lept_get_object_keyvalue(&amp;v, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">/* &#123;&quot;s&quot;:&quot;Hello&quot;,&quot;t&quot;:&quot;Hello&quot;&#125; */</span><br>    <span class="hljs-selector-tag">lept_free</span>(&amp;v);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void lept<span class="hljs-constructor">_move(<span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">dst</span>, <span class="hljs-params">lept_value</span><span class="hljs-operator">*</span> <span class="hljs-params">src</span>)</span> &#123;<br>    <span class="hljs-keyword">assert</span>(dst != NULL<span class="hljs-operator"> &amp;&amp; </span>src != NULL<span class="hljs-operator"> &amp;&amp; </span>src != dst);<br>    lept<span class="hljs-constructor">_free(<span class="hljs-params">dst</span>)</span>;<br>    memcpy(dst, src, sizeof(lept_value));<br>    lept<span class="hljs-constructor">_init(<span class="hljs-params">src</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类似，交换值同理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lept_swap</span><span class="hljs-params">(lept_value* lhs, lept_value* rhs)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(lhs != <span class="hljs-literal">NULL</span> &amp;&amp; rhs != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (lhs != rhs) &#123;<br>        lept_value temp;<br>        <span class="hljs-built_in">memcpy</span>(&amp;temp, lhs, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(lept_value));<br>        <span class="hljs-built_in">memcpy</span>(lhs,   rhs, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(lept_value));<br>        <span class="hljs-built_in">memcpy</span>(rhs, &amp;temp, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(lept_value));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>当我们要修改对象或数组里的值时，我们可以利用这 3 个函数。例如：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sas">const char<span class="hljs-comment">* json = &quot;&#123;\&quot;a\&quot;:[1,2],\&quot;b\&quot;:3&#125;&quot;;</span><br>char <span class="hljs-comment">*out;</span><br>lept_value v;<br>lept_init(<span class="hljs-variable">&amp;v</span>);<br>lept_parse(<span class="hljs-variable">&amp;v</span>, json);<br>lept_copy(<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;b&quot;</span>, 1),<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;a&quot;</span>, 1));<br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-meta">out</span> = lept_stringify(<span class="hljs-variable">&amp;v</span>, <span class="hljs-meta">NULL</span>)); <span class="hljs-comment">/* &#123;&quot;a&quot;:[1,2],&quot;b&quot;:[1,2]&#125; */</span><br>free(<span class="hljs-meta">out</span>);<br><br>lept_parse(<span class="hljs-variable">&amp;v</span>, json);<br>lept_move(<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;b&quot;</span>, 1),<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;a&quot;</span>, 1));<br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-meta">out</span> = lept_stringify(<span class="hljs-variable">&amp;v</span>, <span class="hljs-meta">NULL</span>)); <span class="hljs-comment">/* &#123;&quot;a&quot;:null,&quot;b&quot;:[1,2]&#125; */</span><br>free(<span class="hljs-meta">out</span>);<br><br>lept_parse(<span class="hljs-variable">&amp;v</span>, json);<br>lept_swap(<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;b&quot;</span>, 1),<br>    lept_find_object_value(<span class="hljs-variable">&amp;v</span>, <span class="hljs-string">&quot;a&quot;</span>, 1));<br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-meta">out</span> = lept_stringify(<span class="hljs-variable">&amp;v</span>, <span class="hljs-meta">NULL</span>)); <span class="hljs-comment">/* &#123;&quot;a&quot;:3,&quot;b&quot;:[1,2]&#125; */</span><br>free(<span class="hljs-meta">out</span>);<br><br>lept_free(<span class="hljs-variable">&amp;v</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用手册</title>
    <link href="/2023/02/25/hexo-shi-yong-shou-ce/"/>
    <url>/2023/02/25/hexo-shi-yong-shou-ce/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博弈论</title>
    <link href="/2023/02/25/bo-yi-lun/"/>
    <url>/2023/02/25/bo-yi-lun/</url>
    
    <content type="html"><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><h2 id="sg函数-Sprague-Garundy"><a href="#sg函数-Sprague-Garundy" class="headerlink" title="sg函数(Sprague-Garundy)"></a>sg函数(Sprague-Garundy)</h2><h3 id="如何求"><a href="#如何求" class="headerlink" title="如何求"></a>如何求</h3><p>要弄明白sg函数首先要明白什么是 必败态 N-position(g(x)一般是 mex{})</p><p>对于一个g(x)=0的顶点x，它的所有后继y都满足g(y)!=0。 N</p><p>对于一个g(x)!=0的顶点，必定存在一个后继y满足g(y)=0。 P</p><p>比如定义一个游戏</p><p>有一堆石头个数 为n 两人轮流可以 1~3个</p><p>直到不能取的人失败</p><p>当n==0时必败 或者说n%4==0时都是必败的</p><p><img src="/2023/02/25/bo-yi-lun/sg%E5%87%BD%E6%95%B0.jpg" alt="sg函数"></p><p>有向无环图上面定义一个sg函数的</p><p>从小到大标记 sg函数</p><p>x  0  1  2  3  4  5  6  7  8  9  10  11<br>g(x)  0  1  2  3  0  1  2  3  0  1  2  3 ]</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//打表</span><br><span class="hljs-keyword">int</span> f[N],sg[N],hash[N];     <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSG</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bitset&lt;N&gt;vis;<br>   vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>      vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;f[j]&lt;=i;j++)<br>            vis[sg[i-f[j]]]=<span class="hljs-number">1</span>;<span class="hljs-comment">//f[i]为实现方法</span><br>       <span class="hljs-keyword">while</span>(vis[sg[i]])   <span class="hljs-comment">//求mes&#123;&#125;中未出现的最小的非负整数</span><br>       sg[i]++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//dfs</span><br><span class="hljs-keyword">int</span> s[<span class="hljs-number">110</span>],sg[<span class="hljs-number">10010</span>],n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SG_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sg[x]!=<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> sg[x];<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x&gt;=s[i])<br>        &#123;<br>            <span class="hljs-built_in">SG_dfs</span>(x-s[i]);<br>            vis[sg[x-s[i]]]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            e=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> sg[x]=e;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="SG定理"><a href="#SG定理" class="headerlink" title="SG定理"></a>SG定理</h2><h3 id="nim"><a href="#nim" class="headerlink" title="nim"></a>nim</h3><p>经典nim博弈嗷</p><p>如果有n个游戏的话</p><p>总游戏 的sg值 为 </p><p><img src="/../%E5%8D%9A%E5%BC%88%E8%AE%BA.assets/image-20220219123412894.png" alt="image-20220219123412894"></p><p>大概就是这样子啦</p><h3 id="阶梯nim博弈"><a href="#阶梯nim博弈" class="headerlink" title="阶梯nim博弈"></a>阶梯nim博弈</h3><p><img src="D:\c语言\题目\杂题\图片\image-20220219192045720.png" alt="image-20220219192045720"></p><p><strong>对奇数阶的石头进行 Nim，偶数阶的石头对结果不影响。</strong></p><p>为什么是奇数阶？</p><p><strong>因为最后石子都要到 0 上，从 1 到 0 就是最后一步，这是从奇数阶到偶数阶，</strong></p><p><strong>所以认为从奇数阶上移到偶数阶上相当于取一次石子才能保证状态一致。</strong></p><h2 id="寒冬信使2"><a href="#寒冬信使2" class="headerlink" title=" 寒冬信使2"></a><a href="https://ac.nowcoder.com/acm/contest/23481/H"> 寒冬信使2</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有长度为n 的只含 b 和w 的字符串(&lt;=10)</p><p>现有 两个操作</p><p><img src="D:\c语言\题目\杂题\图片\image-20220219143115738.png" alt="image-20220219143115738"></p><p>不能操作的人先输掉</p><p>问是否有必胜策略</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将 w 看成1 b看出0</p><p>然后打表 sg函数 (1~1&lt;&lt;10)应该很小</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;long long,long long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int128 __int128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>), eps = <span class="hljs-number">1e-8</span>, EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf32 = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1000000007</span>, inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">50</span>, maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>+<span class="hljs-number">1</span>);<br>    bitset&lt;105&gt;vis;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>); i++)<br>    &#123;<br>        vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>                    vis[sg[i ^ (<span class="hljs-number">1</span> &lt;&lt; j)]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; j; k++)<br>                        vis[sg[i ^ (<span class="hljs-number">1</span> &lt;&lt; j) ^ (<span class="hljs-number">1</span> &lt;&lt; k)]] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (vis[sg[i]])<br>        &#123;<br>            sg[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> t; cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        cin &gt;&gt; n;<br>        string str;<br>        cin &gt;&gt; str;<br>        <span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;w&#x27;</span>)<br>            &#123;<br>                st|= (<span class="hljs-number">1</span> &lt;&lt; i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sg[st])<br>            cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//int t; cin &gt;&gt; t; while (t--)</span><br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高手过招"><a href="#高手过招" class="headerlink" title="高手过招"></a>高手过招</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有个 20*n  的棋盘</p><p>每行 有mi个棋子</p><p>可以进行以下操作</p><p>对于一个棋子，能将它向右移动一格，如果右边有棋子，则向右跳到第一个空格，如果右边没有空格，则不能移动这个棋子，如果所有棋子都不能移动，那么将输掉这场比赛。</p><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>用st打表 1&lt;&lt;20 大概 1e7左右 </p><h3 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a>AC代码1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;long long,long long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int128 __int128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>), eps = <span class="hljs-number">1e-8</span>, EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf32 = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1000000007</span>, inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">50</span>, maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">sg</span>(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>);<br>bitset&lt;105&gt;vis;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>        vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>, nxt = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>        &#123;<br>            temp = <span class="hljs-number">1</span> &lt;&lt; i;<br>            <span class="hljs-keyword">if</span> (x &amp; temp)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((x | (temp &gt;&gt; <span class="hljs-number">1</span>)) != x)<br>                    vis[sg[x ^ temp ^ (temp &gt;&gt; <span class="hljs-number">1</span>)]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nxt!=<span class="hljs-number">-1</span>)<br>                    vis[sg[x ^ temp ^ (<span class="hljs-number">1</span> &lt;&lt; (nxt))]] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                nxt = i;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (vis[sg[x]])<br>        &#123;<br>            sg[x]++;<br>        &#125;<br>   <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n ;<br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; m;<br>        st = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x;<br>            cin &gt;&gt; x;<br>            st|=(<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">20</span> - x));<br>        &#125;<br>        ans ^= sg[st];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans)<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>);i++)<br>        <span class="hljs-built_in">fun</span>(i);<br>    <span class="hljs-keyword">int</span> t; cin &gt;&gt; t; <span class="hljs-keyword">while</span> (t--)<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>变形 的阶梯nim 博弈( )</p><p>将相互连接的棋子看作一个阶梯的</p><p>在 第21个格子加上一个棋子</p><p>进行 阶梯nim 博弈</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开机自连宽带</title>
    <link href="/2023/02/25/kai-ji-zi-lian-kuan-dai/"/>
    <url>/2023/02/25/kai-ji-zi-lian-kuan-dai/</url>
    
    <content type="html"><![CDATA[<h1 id="开机自动连接宽带以及启动随e行"><a href="#开机自动连接宽带以及启动随e行" class="headerlink" title="开机自动连接宽带以及启动随e行"></a>开机自动连接宽带以及启动随e行</h1><h3 id="连接宽带"><a href="#连接宽带" class="headerlink" title="连接宽带"></a>连接宽带</h3><p>可以在cmd中使用可以连接宽带</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rasdial <span class="hljs-selector-attr">[宽带名称]</span> <span class="hljs-selector-attr">[用户名]</span> <span class="hljs-selector-attr">[密码]</span><br></code></pre></td></tr></table></figure><h3 id="获取随e行的句柄"><a href="#获取随e行的句柄" class="headerlink" title="获取随e行的句柄"></a>获取随e行的句柄</h3><p>使用Spy++获取软件的句柄</p><p><img src="/../../pic/spyxx.png" alt="spy++"></p><p><img src="/../../pic/spyxx2.png" alt="spy++2"></p><p>之后用</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">hwnd</span>=win32gui.FindWindow(None, FrameTitle)<br></code></pre></td></tr></table></figure><p>参数1 是类</p><p>参数2 是标题</p><p>这边只用标题找就行（随e行的类会变）</p><h3 id="任务计划程序"><a href="#任务计划程序" class="headerlink" title="任务计划程序"></a>任务计划程序</h3><p><img src="/../../pic/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E8%AE%A1%E5%88%92.png" alt="image-20230214175153874"></p><p>编写一个bat程序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@echo off<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%1&quot;</span> == <span class="hljs-string">&quot;h&quot;</span> <span class="hljs-keyword">goto</span> begin<br>mshta vbscript:<span class="hljs-built_in">createobject</span>(<span class="hljs-string">&quot;wscript.shell&quot;</span>).<span class="hljs-built_in">run</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;%~0&quot;</span><span class="hljs-string">&quot; h&quot;</span>,<span class="hljs-number">0</span>)(window.close)&amp;&amp;exit<br>:begin<br>python <span class="hljs-string">&quot;D:\py_test\automatic.py&quot;</span><br></code></pre></td></tr></table></figure><p>让其开机启动 注意要使用最高权限运行</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br><span class="hljs-keyword">import</span> ctypes, sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#宽带名称 宽带账号 密码</span><br>g_adsl_account=&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;ZJGSU&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;2012190228&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    <br>app_path=<span class="hljs-string">r&quot;C:\Program Files (x86)\cmclient\bin\CMClient.exe&quot;</span> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adsl</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span> <br>    <span class="hljs-comment"># 初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">object</span></span>):</span><br>        self.name=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;name&quot;</span>]<br>        self.username=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;username&quot;</span>]<br>        self.password=<span class="hljs-built_in">object</span>[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-comment"># 修改基本信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_adsl</span>(<span class="hljs-params">self, account</span>):</span><br>        self.name=account[<span class="hljs-string">&quot;name&quot;</span>]<br>        self.username=account[<span class="hljs-string">&quot;username&quot;</span>]<br>        self.password=account[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-comment"># 连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect</span>(<span class="hljs-params">self</span>):</span><br>        cmd_str=<span class="hljs-string">&quot;rasdial %s %s %s&quot;</span>%(self.name,self.username,self.password)<br>        os.system(cmd_str)<br>    <span class="hljs-comment">#</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disconnect</span>(<span class="hljs-params">self</span>):</span><br>        cmd_str=<span class="hljs-string">&quot;rasdial %s /disconnect&quot;</span>%self.name<br>        os.system(cmd_str)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reconnect</span>(<span class="hljs-params">self</span>):</span><br>        self.disconnect()<br>        self.connect()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_app</span>(<span class="hljs-params">app_dir</span>):</span><br>  os.startfile(app_dir)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_admin</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> ctypes.windll.shell32.IsUserAnAdmin()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    auto=Adsl(g_adsl_account)<br>    auto.connect()<br>    <span class="hljs-comment">#判断是否是管理员权限</span><br>    <span class="hljs-keyword">if</span> is_admin():<br>        open_app(app_dir=app_path)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> sys.version_info[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span>:<br>            ctypes.windll.shell32.ShellExecuteW(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;runas&quot;</span>, sys.executable, __file__, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># in python2.x</span><br>            ctypes.windll.shell32.ShellExecuteW(<span class="hljs-literal">None</span>, <span class="hljs-string">u&quot;runas&quot;</span>, unicode(sys.executable), unicode(__file__), <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#移动鼠标的位置</span><br>    pyautogui.moveTo(<span class="hljs-number">1120</span>, <span class="hljs-number">508</span>)<br>    pyautogui.click(clicks=<span class="hljs-number">1</span>)<br>    FrameTitle=<span class="hljs-string">&quot;随e行&quot;</span><br>    hwnd=win32gui.FindWindow(<span class="hljs-literal">None</span>, FrameTitle)<br>    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>莫队算法（离线查询）</title>
    <link href="/2022/02/20/mo-dui-suan-fa-chi-xian-cha-xun/"/>
    <url>/2022/02/20/mo-dui-suan-fa-chi-xian-cha-xun/</url>
    
    <content type="html"><![CDATA[<h1 id="莫队算法-离线查询"><a href="#莫队算法-离线查询" class="headerlink" title="莫队算法(离线查询)"></a>莫队算法(离线查询)</h1><h2 id="SP3267-DQUERY-D-query"><a href="#SP3267-DQUERY-D-query" class="headerlink" title="SP3267 DQUERY - D-query"></a>SP3267 DQUERY - D-query</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 n个数 m次查询</p><p>每次查询给出 范围 l 和 r</p><p>求 l ~r之间有多少不同的数</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>(其实线段树,树状数组都可以)莫队算法</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> EI = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span>+<span class="hljs-number">50</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">query</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">query</span>() &#123;&#125;<br><span class="hljs-built_in">query</span>(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> id) :<span class="hljs-built_in">l</span>(l), <span class="hljs-built_in">r</span>(r), <span class="hljs-built_in">id</span>(id) &#123;&#125;<br><span class="hljs-keyword">int</span> l, r, id;<br><br>&#125;q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) res = (res &lt;&lt; <span class="hljs-number">1</span>) + (res &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> res;<br>&#125;<span class="hljs-comment">//快读</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>) <span class="hljs-built_in">printi</span>(x / <span class="hljs-number">10</span>);<br><span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn], cnt[N], ans[maxn], belong[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(query a, query b)</span><span class="hljs-comment">//分块排序</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (belong[a.l] ^ belong[b.l])<br>&#123;<br><span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (belong[a.l] &amp; <span class="hljs-number">1</span>) <span class="hljs-comment">//如果左端点在奇数块则按照右端点升序 反之相反</span><br>&#123;<br><span class="hljs-keyword">return</span> a.r &lt; b.r;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a.r &gt; b.r;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>cnt[x]++;<br><span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>cnt[x]--;<br><span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><span class="hljs-comment">//分区</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> size = <span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-keyword">int</span> bnum = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(n) / size);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i++)<span class="hljs-comment">//</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = (i - <span class="hljs-number">1</span>) * size + <span class="hljs-number">1</span>; j &lt;= i * size; j++)<br>&#123;<br>belong[j] = i;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, m;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">init</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cin &gt;&gt; a[i];<br>cin &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">int</span> l, r;<br>cin &gt;&gt; l &gt;&gt; r;<br>q[i] = <span class="hljs-built_in">query</span>(l, r, i);<br>&#125;<br><span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + <span class="hljs-number">1</span> + m, cmp);<br><span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> now = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">int</span> ql = q[i].l, qr = q[i].r;<br><span class="hljs-keyword">while</span> (l &lt; ql) now += <span class="hljs-built_in">del</span>(a[l++]);<br><span class="hljs-keyword">while</span> (l &gt; ql) now += <span class="hljs-built_in">add</span>(a[--l]);<br><span class="hljs-keyword">while</span> (r &lt; qr) now += <span class="hljs-built_in">add</span>(a[++r]);<br><span class="hljs-keyword">while</span> (r &gt; qr) now += <span class="hljs-built_in">del</span>(a[r--]);<br>ans[q[i].id] = now;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>cout &lt;&lt; ans[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//int t; cin &gt;&gt; t; while (t--)</span><br><span class="hljs-built_in">solve</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
